<?xml version="1.0"?>
<doc>
    <assembly>
        <name>UnitsNet</name>
    </assembly>
    <members>
        <member name="T:UnitsNet.AmbiguousUnitParseException">
            <summary>
                Unable to parse because more than one unit of the given quantity type had this exact unit abbreviation.
                Example: Length.Parse("1 pt") will throw <see cref="T:UnitsNet.AmbiguousUnitParseException" />, because both
                <see cref="F:UnitsNet.Units.LengthUnit.DtpPoint" /> and
                <see cref="F:UnitsNet.Units.LengthUnit.PrinterPoint" /> have "pt" as their abbreviation.
            </summary>
        </member>
        <member name="M:UnitsNet.AmbiguousUnitParseException.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.AmbiguousUnitParseException.#ctor(System.String,System.Exception)">
            <inheritdoc />
        </member>
        <member name="T:UnitsNet.BaseDimensions">
            <summary>
                Represents the base dimensions of a quantity.
            </summary>
        </member>
        <member name="M:UnitsNet.BaseDimensions.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.BaseDimensions.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.BaseDimensions.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.BaseDimensions.Multiply(UnitsNet.BaseDimensions)">
            <summary>
            Get resulting dimensions after multiplying two dimensions, by performing addition of each dimension.
            </summary>
            <param name="right">Other dimensions.</param>
            <returns>Resulting dimensions.</returns>
        </member>
        <member name="M:UnitsNet.BaseDimensions.Divide(UnitsNet.BaseDimensions)">
            <summary>
            Get resulting dimensions after dividing two dimensions, by performing subtraction of each dimension.
            </summary>
            <param name="right">Other dimensions.</param>
            <returns>Resulting dimensions.</returns>
        </member>
        <member name="M:UnitsNet.BaseDimensions.op_Equality(UnitsNet.BaseDimensions,UnitsNet.BaseDimensions)">
            <summary>
            Check if two dimensions are equal.
            </summary>
            <param name="left">Left.</param>
            <param name="right">Right.</param>
            <returns>True if equal.</returns>
        </member>
        <member name="M:UnitsNet.BaseDimensions.op_Inequality(UnitsNet.BaseDimensions,UnitsNet.BaseDimensions)">
            <summary>
            Check if two dimensions are unequal.
            </summary>
            <param name="left">Left.</param>
            <param name="right">Right.</param>
            <returns>True if not equal.</returns>
        </member>
        <member name="M:UnitsNet.BaseDimensions.op_Multiply(UnitsNet.BaseDimensions,UnitsNet.BaseDimensions)">
            <summary>
            Multiply two dimensions.
            </summary>
            <param name="left">Left.</param>
            <param name="right">Right.</param>
            <returns>Resulting dimensions.</returns>
        </member>
        <member name="M:UnitsNet.BaseDimensions.op_Division(UnitsNet.BaseDimensions,UnitsNet.BaseDimensions)">
            <summary>
            Divide two dimensions.
            </summary>
            <param name="left">Left.</param>
            <param name="right">Right.</param>
            <returns>Resulting dimensions.</returns>
        </member>
        <member name="M:UnitsNet.BaseDimensions.ToString">
            <inheritdoc />
        </member>
        <member name="P:UnitsNet.BaseDimensions.Length">
            <summary>
            Gets the length dimensions (L).
            </summary>
        </member>
        <member name="P:UnitsNet.BaseDimensions.Mass">
            <summary>
            Gets the mass dimensions (M).
            </summary>
        </member>
        <member name="P:UnitsNet.BaseDimensions.Time">
            <summary>
            Gets the time dimensions (T).
            </summary>
        </member>
        <member name="P:UnitsNet.BaseDimensions.Current">
            <summary>
            Gets the electric current dimensions (I).
            </summary>
        </member>
        <member name="P:UnitsNet.BaseDimensions.Temperature">
            <summary>
            Gets the temperature dimensions (Î˜).
            </summary>
        </member>
        <member name="P:UnitsNet.BaseDimensions.Amount">
            <summary>
            Gets the amount of substance dimensions (N).
            </summary>
        </member>
        <member name="P:UnitsNet.BaseDimensions.LuminousIntensity">
            <summary>
            Gets the luminous intensity dimensions (J).
            </summary>
        </member>
        <member name="T:UnitsNet.Comparison">
            <summary>
                Helper methods to perform relative and absolute comparison.
            </summary>
        </member>
        <member name="M:UnitsNet.Comparison.Equals(System.Double,System.Double,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                    Checks if two values are equal with a given relative or absolute tolerance.
                </para>
                <para>
                    Relative tolerance is defined as the maximum allowable absolute difference between
                    <paramref name="referenceValue" /> and
                    <paramref name="otherValue" /> as a percentage of <paramref name="referenceValue" />. A relative tolerance of
                    0.01 means the
                    absolute difference of <paramref name="referenceValue" /> and <paramref name="otherValue" /> must be within +/-
                    1%.
                    <example>
                        In this example, the two values will be equal if the value of b is within +/- 1% of a.
                        <code>
                Equals(a, b, 0.01, ComparisonType.Relative);
                </code>
                    </example>
                </para>
                <para>
                    Absolute tolerance is defined as the maximum allowable absolute difference between
                    <paramref name="referenceValue" /> and
                    <paramref name="otherValue" /> as a fixed number.
                    <example>
                        In this example, the two values will be equal if abs(<paramref name="referenceValue" /> -
                        <paramref name="otherValue" />) &lt;= 0.01
                        <code>
                Equals(a, b, 0.01, ComparisonType.Absolute);
                </code>
                    </example>
                </para>
            </summary>
            <param name="referenceValue">
                The reference value. If using relative tolerance, it is the value which the relative
                tolerance will be calculated against.
            </param>
            <param name="otherValue">The value to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">Whether the tolerance is absolute or relative.</param>
            <returns></returns>
        </member>
        <member name="M:UnitsNet.Comparison.EqualsRelative(System.Double,System.Double,System.Double)">
            <summary>
                Checks if two values are equal with a given relative tolerance.
                <para>
                    Relative tolerance is defined as the maximum allowable absolute difference between
                    <paramref name="referenceValue" /> and
                    <paramref name="otherValue" /> as a percentage of <paramref name="referenceValue" />. A relative tolerance of
                    0.01 means the
                    absolute difference of <paramref name="referenceValue" /> and <paramref name="otherValue" /> must be within +/-
                    1%.
                    <example>
                        In this example, the two values will be equal if the value of b is within +/- 1% of a.
                        <code>
                EqualsRelative(a, b, 0.01);
                </code>
                    </example>
                </para>
            </summary>
            <param name="referenceValue">The reference value which the tolerance will be calculated against.</param>
            <param name="otherValue">The value to compare to.</param>
            <param name="tolerance">The relative tolerance. Must be greater than or equal to 0.</param>
            <returns>True if the two values are equal within the given relative tolerance, otherwise false.</returns>
        </member>
        <member name="M:UnitsNet.Comparison.EqualsAbsolute(System.Double,System.Double,System.Double)">
            <summary>
                Checks if two values are equal with a given absolute tolerance.
                <para>
                    Absolute tolerance is defined as the maximum allowable absolute difference between <paramref name="value1" />
                    and
                    <paramref name="value2" /> as a fixed number.
                    <example>
                        In this example, the two values will be equal if abs(<paramref name="value1" /> -
                        <paramref name="value2" />) &lt;= 0.01
                        <code>
                Equals(a, b, 0.01, ComparisonType.Absolute);
                </code>
                    </example>
                </para>
            </summary>
            <param name="value1">The first value.</param>
            <param name="value2">The second value.</param>
            <param name="tolerance">The absolute tolerance. Must be greater than or equal to 0.</param>
            <returns>True if the two values are equal within the given absolute tolerance, otherwise false.</returns>
        </member>
        <member name="T:UnitsNet.ComparisonType">
            <summary>
            Specifies if the comparison between numbers is absolute or relative.
            </summary>
        </member>
        <member name="F:UnitsNet.ComparisonType.Relative">
            <summary>
            Error margin in relative size to a reference value.
            </summary>
        </member>
        <member name="F:UnitsNet.ComparisonType.Absolute">
            <summary>
            Error margin as absolute size.
            </summary>
        </member>
        <member name="P:UnitsNet.GlobalConfiguration.DefaultCulture">
            <summary>
                Defaults to <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> when creating an instance with no culture provided.
                Can be overridden, but note that this is static and will affect all subsequent usages.
            </summary>
        </member>
        <member name="T:UnitsNet.Acceleration">
            <summary>
                Acceleration, in physics, is the rate at which the velocity of an object changes over time. An object's acceleration is the net result of any and all forces acting on the object, as described by Newton's Second Law. The SI unit for acceleration is the Meter per second squared (m/sÂ²). Accelerations are vector quantities (they have magnitude and direction) and add according to the parallelogram law. As a vector, the calculated net force is equal to the product of the object's mass (a scalar quantity) and the acceleration.
            </summary>
            <summary>
                Acceleration, in physics, is the rate at which the velocity of an object changes over time. An object's acceleration is the net result of any and all forces acting on the object, as described by Newton's Second Law. The SI unit for acceleration is the Meter per second squared (m/sÂ²). Accelerations are vector quantities (they have magnitude and direction) and add according to the parallelogram law. As a vector, the calculated net force is equal to the product of the object's mass (a scalar quantity) and the acceleration.
            </summary>
        </member>
        <member name="M:UnitsNet.Acceleration.op_Multiply(UnitsNet.Acceleration,UnitsNet.Density)">
            <summary>
            Multiply <see cref="T:UnitsNet.Acceleration"/> and <see cref="T:UnitsNet.Density"/> to get <see cref="T:UnitsNet.SpecificWeight"/>.
            </summary>
        </member>
        <member name="P:UnitsNet.Acceleration.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.Acceleration.GetAbbreviation(UnitsNet.Units.AccelerationUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.Acceleration.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Acceleration.TryParse(System.String,System.IFormatProvider,UnitsNet.Acceleration@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Acceleration.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Acceleration.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.AccelerationUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Acceleration.ToString(UnitsNet.Units.AccelerationUnit,System.IFormatProvider)">
            <summary>
                Get string representation of value and unit. Using two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Acceleration.ToString(UnitsNet.Units.AccelerationUnit,System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Acceleration.ToString(UnitsNet.Units.AccelerationUnit,System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">Unit representation to use.</param>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
        </member>
        <member name="F:UnitsNet.Acceleration._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.Acceleration._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.Acceleration.Unit">
            <summary>
                The unit this quantity was constructed with -or- <see cref="P:UnitsNet.Acceleration.BaseUnit" /> if default ctor was used.
            </summary>
        </member>
        <member name="M:UnitsNet.Acceleration.#ctor(System.Double,UnitsNet.Units.AccelerationUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="numericValue">The numeric value  to contruct this quantity with.</param>
            <param name="unit">The unit representation to contruct this quantity with.</param>
            <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="P:UnitsNet.Acceleration.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.Acceleration.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Acceleration.BaseUnit">
            <summary>
                The base unit of Acceleration, which is MeterPerSecondSquared. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.Acceleration.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.Acceleration.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Acceleration.Units">
            <summary>
                All units of measurement for the Acceleration quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Acceleration.CentimetersPerSecondSquared">
            <summary>
                Get Acceleration in CentimetersPerSecondSquared.
            </summary>
        </member>
        <member name="P:UnitsNet.Acceleration.DecimetersPerSecondSquared">
            <summary>
                Get Acceleration in DecimetersPerSecondSquared.
            </summary>
        </member>
        <member name="P:UnitsNet.Acceleration.FeetPerSecondSquared">
            <summary>
                Get Acceleration in FeetPerSecondSquared.
            </summary>
        </member>
        <member name="P:UnitsNet.Acceleration.InchesPerSecondSquared">
            <summary>
                Get Acceleration in InchesPerSecondSquared.
            </summary>
        </member>
        <member name="P:UnitsNet.Acceleration.KilometersPerSecondSquared">
            <summary>
                Get Acceleration in KilometersPerSecondSquared.
            </summary>
        </member>
        <member name="P:UnitsNet.Acceleration.KnotsPerHour">
            <summary>
                Get Acceleration in KnotsPerHour.
            </summary>
        </member>
        <member name="P:UnitsNet.Acceleration.KnotsPerMinute">
            <summary>
                Get Acceleration in KnotsPerMinute.
            </summary>
        </member>
        <member name="P:UnitsNet.Acceleration.KnotsPerSecond">
            <summary>
                Get Acceleration in KnotsPerSecond.
            </summary>
        </member>
        <member name="P:UnitsNet.Acceleration.MetersPerSecondSquared">
            <summary>
                Get Acceleration in MetersPerSecondSquared.
            </summary>
        </member>
        <member name="P:UnitsNet.Acceleration.MicrometersPerSecondSquared">
            <summary>
                Get Acceleration in MicrometersPerSecondSquared.
            </summary>
        </member>
        <member name="P:UnitsNet.Acceleration.MillimetersPerSecondSquared">
            <summary>
                Get Acceleration in MillimetersPerSecondSquared.
            </summary>
        </member>
        <member name="P:UnitsNet.Acceleration.NanometersPerSecondSquared">
            <summary>
                Get Acceleration in NanometersPerSecondSquared.
            </summary>
        </member>
        <member name="P:UnitsNet.Acceleration.StandardGravity">
            <summary>
                Get Acceleration in StandardGravity.
            </summary>
        </member>
        <member name="P:UnitsNet.Acceleration.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit MeterPerSecondSquared.
            </summary>
        </member>
        <member name="M:UnitsNet.Acceleration.FromCentimetersPerSecondSquared(UnitsNet.QuantityValue)">
            <summary>
                Get Acceleration from CentimetersPerSecondSquared.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Acceleration.FromDecimetersPerSecondSquared(UnitsNet.QuantityValue)">
            <summary>
                Get Acceleration from DecimetersPerSecondSquared.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Acceleration.FromFeetPerSecondSquared(UnitsNet.QuantityValue)">
            <summary>
                Get Acceleration from FeetPerSecondSquared.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Acceleration.FromInchesPerSecondSquared(UnitsNet.QuantityValue)">
            <summary>
                Get Acceleration from InchesPerSecondSquared.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Acceleration.FromKilometersPerSecondSquared(UnitsNet.QuantityValue)">
            <summary>
                Get Acceleration from KilometersPerSecondSquared.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Acceleration.FromKnotsPerHour(UnitsNet.QuantityValue)">
            <summary>
                Get Acceleration from KnotsPerHour.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Acceleration.FromKnotsPerMinute(UnitsNet.QuantityValue)">
            <summary>
                Get Acceleration from KnotsPerMinute.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Acceleration.FromKnotsPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Get Acceleration from KnotsPerSecond.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Acceleration.FromMetersPerSecondSquared(UnitsNet.QuantityValue)">
            <summary>
                Get Acceleration from MetersPerSecondSquared.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Acceleration.FromMicrometersPerSecondSquared(UnitsNet.QuantityValue)">
            <summary>
                Get Acceleration from MicrometersPerSecondSquared.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Acceleration.FromMillimetersPerSecondSquared(UnitsNet.QuantityValue)">
            <summary>
                Get Acceleration from MillimetersPerSecondSquared.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Acceleration.FromNanometersPerSecondSquared(UnitsNet.QuantityValue)">
            <summary>
                Get Acceleration from NanometersPerSecondSquared.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Acceleration.FromStandardGravity(UnitsNet.QuantityValue)">
            <summary>
                Get Acceleration from StandardGravity.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Acceleration.From(UnitsNet.QuantityValue,UnitsNet.Units.AccelerationUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.AccelerationUnit" /> to <see cref="T:UnitsNet.Acceleration" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>Acceleration unit value.</returns>
        </member>
        <member name="M:UnitsNet.Acceleration.GetAbbreviation(UnitsNet.Units.AccelerationUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.Acceleration.Equals(UnitsNet.Acceleration,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another Acceleration within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.Acceleration.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current Acceleration.</returns>
        </member>
        <member name="M:UnitsNet.Acceleration.As(UnitsNet.Units.AccelerationUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Acceleration.ToUnit(UnitsNet.Units.AccelerationUnit)">
            <summary>
                Converts this Acceleration to another Acceleration with the unit representation <paramref name="unit" />.
            </summary>
            <returns>A Acceleration with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Acceleration.AsBaseUnit">
            <summary>
                Converts the current value + unit to the base unit.
                This is typically the first step in converting from one unit to another.
            </summary>
            <returns>The value in the base unit representation.</returns>
        </member>
        <member name="M:UnitsNet.Acceleration.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Acceleration.TryParse(System.String,UnitsNet.Acceleration@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Acceleration.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Acceleration.ParseInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Acceleration.TryParseInternal(System.String,System.IFormatProvider,UnitsNet.Acceleration@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Acceleration.ParseUnitInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Acceleration.TryParseUnitInternal(System.String,System.IFormatProvider,UnitsNet.Units.AccelerationUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Acceleration.ToString">
            <summary>
                Get default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Acceleration.ToString(UnitsNet.Units.AccelerationUnit)">
            <summary>
                Get string representation of value and unit. Using current UI culture and two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <returns>String representation.</returns>
        </member>
        <member name="P:UnitsNet.Acceleration.MaxValue">
            <summary>
            Represents the largest possible value of Acceleration
            </summary>
        </member>
        <member name="P:UnitsNet.Acceleration.MinValue">
            <summary>
            Represents the smallest possible value of Acceleration
            </summary>
        </member>
        <member name="P:UnitsNet.Acceleration.Type">
            <summary>
                The <see cref="P:UnitsNet.Acceleration.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Acceleration.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.Acceleration.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="T:UnitsNet.AmplitudeRatio">
            <summary>
                The strength of a signal expressed in decibels (dB) relative to one volt RMS.
            </summary>
            <summary>
                The strength of a signal expressed in decibels (dB) relative to one volt RMS.
            </summary>
        </member>
        <member name="M:UnitsNet.AmplitudeRatio.#ctor(UnitsNet.ElectricPotential)">
            <summary>
                Initializes a new instance of the <see cref="T:UnitsNet.AmplitudeRatio" /> struct from the specified electric potential
                referenced to one volt RMS. This assumes both the specified electric potential and the one volt reference have the
                same
                resistance.
            </summary>
            <param name="voltage">The electric potential referenced to one volt.</param>
        </member>
        <member name="M:UnitsNet.AmplitudeRatio.ToElectricPotential">
            <summary>
                Gets an <see cref="T:UnitsNet.ElectricPotential" /> from this <see cref="T:UnitsNet.AmplitudeRatio" />.
            </summary>
            <remarks>
                Provides a nicer syntax for converting an amplitude ratio back to a voltage.
                <example>
                    <c>var voltage = voltageRatio.ToElectricPotential();</c>
                </example>
            </remarks>
        </member>
        <member name="M:UnitsNet.AmplitudeRatio.ToPowerRatio(UnitsNet.ElectricResistance)">
            <summary>
                Converts this <see cref="T:UnitsNet.AmplitudeRatio" /> to a <see cref="T:UnitsNet.PowerRatio" />.
            </summary>
            <param name="impedance">The input impedance of the load. This is usually 50, 75 or 600 ohms.</param>
            <remarks>http://www.maximintegrated.com/en/app-notes/index.mvp/id/808</remarks>
        </member>
        <member name="M:UnitsNet.AmplitudeRatio.FromElectricPotential(UnitsNet.ElectricPotential)">
            <summary>
                Gets an <see cref="T:UnitsNet.AmplitudeRatio" /> in decibels (dB) relative to 1 volt RMS from an
                <see cref="T:UnitsNet.ElectricPotential" />.
            </summary>
            <param name="voltage">The voltage (electric potential) relative to one volt RMS.</param>
        </member>
        <member name="P:UnitsNet.AmplitudeRatio.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.AmplitudeRatio.GetAbbreviation(UnitsNet.Units.AmplitudeRatioUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.AmplitudeRatio.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.AmplitudeRatio.TryParse(System.String,System.IFormatProvider,UnitsNet.AmplitudeRatio@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.AmplitudeRatio.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.AmplitudeRatio.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.AmplitudeRatioUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.AmplitudeRatio.ToString(UnitsNet.Units.AmplitudeRatioUnit,System.IFormatProvider)">
            <summary>
                Get string representation of value and unit. Using two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.AmplitudeRatio.ToString(UnitsNet.Units.AmplitudeRatioUnit,System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.AmplitudeRatio.ToString(UnitsNet.Units.AmplitudeRatioUnit,System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">Unit representation to use.</param>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
        </member>
        <member name="F:UnitsNet.AmplitudeRatio._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.AmplitudeRatio._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.AmplitudeRatio.Unit">
            <summary>
                The unit this quantity was constructed with -or- <see cref="P:UnitsNet.AmplitudeRatio.BaseUnit" /> if default ctor was used.
            </summary>
        </member>
        <member name="M:UnitsNet.AmplitudeRatio.#ctor(System.Double,UnitsNet.Units.AmplitudeRatioUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="numericValue">The numeric value  to contruct this quantity with.</param>
            <param name="unit">The unit representation to contruct this quantity with.</param>
            <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="P:UnitsNet.AmplitudeRatio.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.AmplitudeRatio.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.AmplitudeRatio.BaseUnit">
            <summary>
                The base unit of AmplitudeRatio, which is DecibelVolt. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.AmplitudeRatio.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.AmplitudeRatio.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.AmplitudeRatio.Units">
            <summary>
                All units of measurement for the AmplitudeRatio quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.AmplitudeRatio.DecibelMicrovolts">
            <summary>
                Get AmplitudeRatio in DecibelMicrovolts.
            </summary>
        </member>
        <member name="P:UnitsNet.AmplitudeRatio.DecibelMillivolts">
            <summary>
                Get AmplitudeRatio in DecibelMillivolts.
            </summary>
        </member>
        <member name="P:UnitsNet.AmplitudeRatio.DecibelsUnloaded">
            <summary>
                Get AmplitudeRatio in DecibelsUnloaded.
            </summary>
        </member>
        <member name="P:UnitsNet.AmplitudeRatio.DecibelVolts">
            <summary>
                Get AmplitudeRatio in DecibelVolts.
            </summary>
        </member>
        <member name="P:UnitsNet.AmplitudeRatio.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit DecibelVolt.
            </summary>
        </member>
        <member name="M:UnitsNet.AmplitudeRatio.FromDecibelMicrovolts(UnitsNet.QuantityValue)">
            <summary>
                Get AmplitudeRatio from DecibelMicrovolts.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.AmplitudeRatio.FromDecibelMillivolts(UnitsNet.QuantityValue)">
            <summary>
                Get AmplitudeRatio from DecibelMillivolts.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.AmplitudeRatio.FromDecibelsUnloaded(UnitsNet.QuantityValue)">
            <summary>
                Get AmplitudeRatio from DecibelsUnloaded.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.AmplitudeRatio.FromDecibelVolts(UnitsNet.QuantityValue)">
            <summary>
                Get AmplitudeRatio from DecibelVolts.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.AmplitudeRatio.From(UnitsNet.QuantityValue,UnitsNet.Units.AmplitudeRatioUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.AmplitudeRatioUnit" /> to <see cref="T:UnitsNet.AmplitudeRatio" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>AmplitudeRatio unit value.</returns>
        </member>
        <member name="M:UnitsNet.AmplitudeRatio.GetAbbreviation(UnitsNet.Units.AmplitudeRatioUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.AmplitudeRatio.Equals(UnitsNet.AmplitudeRatio,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another AmplitudeRatio within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.AmplitudeRatio.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current AmplitudeRatio.</returns>
        </member>
        <member name="M:UnitsNet.AmplitudeRatio.As(UnitsNet.Units.AmplitudeRatioUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.AmplitudeRatio.ToUnit(UnitsNet.Units.AmplitudeRatioUnit)">
            <summary>
                Converts this AmplitudeRatio to another AmplitudeRatio with the unit representation <paramref name="unit" />.
            </summary>
            <returns>A AmplitudeRatio with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.AmplitudeRatio.AsBaseUnit">
            <summary>
                Converts the current value + unit to the base unit.
                This is typically the first step in converting from one unit to another.
            </summary>
            <returns>The value in the base unit representation.</returns>
        </member>
        <member name="M:UnitsNet.AmplitudeRatio.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.AmplitudeRatio.TryParse(System.String,UnitsNet.AmplitudeRatio@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.AmplitudeRatio.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.AmplitudeRatio.ParseInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.AmplitudeRatio.TryParseInternal(System.String,System.IFormatProvider,UnitsNet.AmplitudeRatio@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.AmplitudeRatio.ParseUnitInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.AmplitudeRatio.TryParseUnitInternal(System.String,System.IFormatProvider,UnitsNet.Units.AmplitudeRatioUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.AmplitudeRatio.ToString">
            <summary>
                Get default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.AmplitudeRatio.ToString(UnitsNet.Units.AmplitudeRatioUnit)">
            <summary>
                Get string representation of value and unit. Using current UI culture and two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <returns>String representation.</returns>
        </member>
        <member name="P:UnitsNet.AmplitudeRatio.MaxValue">
            <summary>
            Represents the largest possible value of AmplitudeRatio
            </summary>
        </member>
        <member name="P:UnitsNet.AmplitudeRatio.MinValue">
            <summary>
            Represents the smallest possible value of AmplitudeRatio
            </summary>
        </member>
        <member name="P:UnitsNet.AmplitudeRatio.Type">
            <summary>
                The <see cref="P:UnitsNet.AmplitudeRatio.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.AmplitudeRatio.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.AmplitudeRatio.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="T:UnitsNet.Angle">
            <summary>
                In geometry, an angle is the figure formed by two rays, called the sides of the angle, sharing a common endpoint, called the vertex of the angle.
            </summary>
            <summary>
                In geometry, an angle is the figure formed by two rays, called the sides of the angle, sharing a common endpoint, called the vertex of the angle.
            </summary>
        </member>
        <member name="P:UnitsNet.Angle.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.Angle.GetAbbreviation(UnitsNet.Units.AngleUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.Angle.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Angle.TryParse(System.String,System.IFormatProvider,UnitsNet.Angle@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Angle.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Angle.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.AngleUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Angle.ToString(UnitsNet.Units.AngleUnit,System.IFormatProvider)">
            <summary>
                Get string representation of value and unit. Using two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Angle.ToString(UnitsNet.Units.AngleUnit,System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Angle.ToString(UnitsNet.Units.AngleUnit,System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">Unit representation to use.</param>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
        </member>
        <member name="F:UnitsNet.Angle._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.Angle._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.Angle.Unit">
            <summary>
                The unit this quantity was constructed with -or- <see cref="P:UnitsNet.Angle.BaseUnit" /> if default ctor was used.
            </summary>
        </member>
        <member name="M:UnitsNet.Angle.#ctor(System.Double,UnitsNet.Units.AngleUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="numericValue">The numeric value  to contruct this quantity with.</param>
            <param name="unit">The unit representation to contruct this quantity with.</param>
            <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="P:UnitsNet.Angle.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.Angle.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Angle.BaseUnit">
            <summary>
                The base unit of Angle, which is Degree. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.Angle.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.Angle.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Angle.Units">
            <summary>
                All units of measurement for the Angle quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Angle.Arcminutes">
            <summary>
                Get Angle in Arcminutes.
            </summary>
        </member>
        <member name="P:UnitsNet.Angle.Arcseconds">
            <summary>
                Get Angle in Arcseconds.
            </summary>
        </member>
        <member name="P:UnitsNet.Angle.Centiradians">
            <summary>
                Get Angle in Centiradians.
            </summary>
        </member>
        <member name="P:UnitsNet.Angle.Deciradians">
            <summary>
                Get Angle in Deciradians.
            </summary>
        </member>
        <member name="P:UnitsNet.Angle.Degrees">
            <summary>
                Get Angle in Degrees.
            </summary>
        </member>
        <member name="P:UnitsNet.Angle.Gradians">
            <summary>
                Get Angle in Gradians.
            </summary>
        </member>
        <member name="P:UnitsNet.Angle.Microdegrees">
            <summary>
                Get Angle in Microdegrees.
            </summary>
        </member>
        <member name="P:UnitsNet.Angle.Microradians">
            <summary>
                Get Angle in Microradians.
            </summary>
        </member>
        <member name="P:UnitsNet.Angle.Millidegrees">
            <summary>
                Get Angle in Millidegrees.
            </summary>
        </member>
        <member name="P:UnitsNet.Angle.Milliradians">
            <summary>
                Get Angle in Milliradians.
            </summary>
        </member>
        <member name="P:UnitsNet.Angle.Nanodegrees">
            <summary>
                Get Angle in Nanodegrees.
            </summary>
        </member>
        <member name="P:UnitsNet.Angle.Nanoradians">
            <summary>
                Get Angle in Nanoradians.
            </summary>
        </member>
        <member name="P:UnitsNet.Angle.Radians">
            <summary>
                Get Angle in Radians.
            </summary>
        </member>
        <member name="P:UnitsNet.Angle.Revolutions">
            <summary>
                Get Angle in Revolutions.
            </summary>
        </member>
        <member name="P:UnitsNet.Angle.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit Degree.
            </summary>
        </member>
        <member name="M:UnitsNet.Angle.FromArcminutes(UnitsNet.QuantityValue)">
            <summary>
                Get Angle from Arcminutes.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Angle.FromArcseconds(UnitsNet.QuantityValue)">
            <summary>
                Get Angle from Arcseconds.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Angle.FromCentiradians(UnitsNet.QuantityValue)">
            <summary>
                Get Angle from Centiradians.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Angle.FromDeciradians(UnitsNet.QuantityValue)">
            <summary>
                Get Angle from Deciradians.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Angle.FromDegrees(UnitsNet.QuantityValue)">
            <summary>
                Get Angle from Degrees.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Angle.FromGradians(UnitsNet.QuantityValue)">
            <summary>
                Get Angle from Gradians.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Angle.FromMicrodegrees(UnitsNet.QuantityValue)">
            <summary>
                Get Angle from Microdegrees.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Angle.FromMicroradians(UnitsNet.QuantityValue)">
            <summary>
                Get Angle from Microradians.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Angle.FromMillidegrees(UnitsNet.QuantityValue)">
            <summary>
                Get Angle from Millidegrees.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Angle.FromMilliradians(UnitsNet.QuantityValue)">
            <summary>
                Get Angle from Milliradians.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Angle.FromNanodegrees(UnitsNet.QuantityValue)">
            <summary>
                Get Angle from Nanodegrees.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Angle.FromNanoradians(UnitsNet.QuantityValue)">
            <summary>
                Get Angle from Nanoradians.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Angle.FromRadians(UnitsNet.QuantityValue)">
            <summary>
                Get Angle from Radians.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Angle.FromRevolutions(UnitsNet.QuantityValue)">
            <summary>
                Get Angle from Revolutions.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Angle.From(UnitsNet.QuantityValue,UnitsNet.Units.AngleUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.AngleUnit" /> to <see cref="T:UnitsNet.Angle" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>Angle unit value.</returns>
        </member>
        <member name="M:UnitsNet.Angle.GetAbbreviation(UnitsNet.Units.AngleUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.Angle.Equals(UnitsNet.Angle,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another Angle within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.Angle.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current Angle.</returns>
        </member>
        <member name="M:UnitsNet.Angle.As(UnitsNet.Units.AngleUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Angle.ToUnit(UnitsNet.Units.AngleUnit)">
            <summary>
                Converts this Angle to another Angle with the unit representation <paramref name="unit" />.
            </summary>
            <returns>A Angle with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Angle.AsBaseUnit">
            <summary>
                Converts the current value + unit to the base unit.
                This is typically the first step in converting from one unit to another.
            </summary>
            <returns>The value in the base unit representation.</returns>
        </member>
        <member name="M:UnitsNet.Angle.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Angle.TryParse(System.String,UnitsNet.Angle@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Angle.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Angle.ParseInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Angle.TryParseInternal(System.String,System.IFormatProvider,UnitsNet.Angle@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Angle.ParseUnitInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Angle.TryParseUnitInternal(System.String,System.IFormatProvider,UnitsNet.Units.AngleUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Angle.ToString">
            <summary>
                Get default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Angle.ToString(UnitsNet.Units.AngleUnit)">
            <summary>
                Get string representation of value and unit. Using current UI culture and two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <returns>String representation.</returns>
        </member>
        <member name="P:UnitsNet.Angle.MaxValue">
            <summary>
            Represents the largest possible value of Angle
            </summary>
        </member>
        <member name="P:UnitsNet.Angle.MinValue">
            <summary>
            Represents the smallest possible value of Angle
            </summary>
        </member>
        <member name="P:UnitsNet.Angle.Type">
            <summary>
                The <see cref="P:UnitsNet.Angle.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Angle.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.Angle.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="T:UnitsNet.Area">
            <summary>
                Area is a quantity that expresses the extent of a two-dimensional surface or shape, or planar lamina, in the plane. Area can be understood as the amount of material with a given thickness that would be necessary to fashion a model of the shape, or the amount of paint necessary to cover the surface with a single coat.[1] It is the two-dimensional analog of the length of a curve (a one-dimensional concept) or the volume of a solid (a three-dimensional concept).
            </summary>
            <summary>
                Area is a quantity that expresses the extent of a two-dimensional surface or shape, or planar lamina, in the plane. Area can be understood as the amount of material with a given thickness that would be necessary to fashion a model of the shape, or the amount of paint necessary to cover the surface with a single coat.[1] It is the two-dimensional analog of the length of a curve (a one-dimensional concept) or the volume of a solid (a three-dimensional concept).
            </summary>
        </member>
        <member name="P:UnitsNet.Area.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.Area.GetAbbreviation(UnitsNet.Units.AreaUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.Area.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Area.TryParse(System.String,System.IFormatProvider,UnitsNet.Area@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Area.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Area.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.AreaUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Area.ToString(UnitsNet.Units.AreaUnit,System.IFormatProvider)">
            <summary>
                Get string representation of value and unit. Using two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Area.ToString(UnitsNet.Units.AreaUnit,System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Area.ToString(UnitsNet.Units.AreaUnit,System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">Unit representation to use.</param>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
        </member>
        <member name="F:UnitsNet.Area._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.Area._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.Area.Unit">
            <summary>
                The unit this quantity was constructed with -or- <see cref="P:UnitsNet.Area.BaseUnit" /> if default ctor was used.
            </summary>
        </member>
        <member name="M:UnitsNet.Area.#ctor(System.Double,UnitsNet.Units.AreaUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="numericValue">The numeric value  to contruct this quantity with.</param>
            <param name="unit">The unit representation to contruct this quantity with.</param>
            <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="P:UnitsNet.Area.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.Area.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Area.BaseUnit">
            <summary>
                The base unit of Area, which is SquareMeter. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.Area.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.Area.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Area.Units">
            <summary>
                All units of measurement for the Area quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Area.Acres">
            <summary>
                Get Area in Acres.
            </summary>
        </member>
        <member name="P:UnitsNet.Area.Hectares">
            <summary>
                Get Area in Hectares.
            </summary>
        </member>
        <member name="P:UnitsNet.Area.SquareCentimeters">
            <summary>
                Get Area in SquareCentimeters.
            </summary>
        </member>
        <member name="P:UnitsNet.Area.SquareDecimeters">
            <summary>
                Get Area in SquareDecimeters.
            </summary>
        </member>
        <member name="P:UnitsNet.Area.SquareFeet">
            <summary>
                Get Area in SquareFeet.
            </summary>
        </member>
        <member name="P:UnitsNet.Area.SquareInches">
            <summary>
                Get Area in SquareInches.
            </summary>
        </member>
        <member name="P:UnitsNet.Area.SquareKilometers">
            <summary>
                Get Area in SquareKilometers.
            </summary>
        </member>
        <member name="P:UnitsNet.Area.SquareMeters">
            <summary>
                Get Area in SquareMeters.
            </summary>
        </member>
        <member name="P:UnitsNet.Area.SquareMicrometers">
            <summary>
                Get Area in SquareMicrometers.
            </summary>
        </member>
        <member name="P:UnitsNet.Area.SquareMiles">
            <summary>
                Get Area in SquareMiles.
            </summary>
        </member>
        <member name="P:UnitsNet.Area.SquareMillimeters">
            <summary>
                Get Area in SquareMillimeters.
            </summary>
        </member>
        <member name="P:UnitsNet.Area.SquareYards">
            <summary>
                Get Area in SquareYards.
            </summary>
        </member>
        <member name="P:UnitsNet.Area.UsSurveySquareFeet">
            <summary>
                Get Area in UsSurveySquareFeet.
            </summary>
        </member>
        <member name="P:UnitsNet.Area.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit SquareMeter.
            </summary>
        </member>
        <member name="M:UnitsNet.Area.FromAcres(UnitsNet.QuantityValue)">
            <summary>
                Get Area from Acres.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Area.FromHectares(UnitsNet.QuantityValue)">
            <summary>
                Get Area from Hectares.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Area.FromSquareCentimeters(UnitsNet.QuantityValue)">
            <summary>
                Get Area from SquareCentimeters.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Area.FromSquareDecimeters(UnitsNet.QuantityValue)">
            <summary>
                Get Area from SquareDecimeters.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Area.FromSquareFeet(UnitsNet.QuantityValue)">
            <summary>
                Get Area from SquareFeet.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Area.FromSquareInches(UnitsNet.QuantityValue)">
            <summary>
                Get Area from SquareInches.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Area.FromSquareKilometers(UnitsNet.QuantityValue)">
            <summary>
                Get Area from SquareKilometers.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Area.FromSquareMeters(UnitsNet.QuantityValue)">
            <summary>
                Get Area from SquareMeters.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Area.FromSquareMicrometers(UnitsNet.QuantityValue)">
            <summary>
                Get Area from SquareMicrometers.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Area.FromSquareMiles(UnitsNet.QuantityValue)">
            <summary>
                Get Area from SquareMiles.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Area.FromSquareMillimeters(UnitsNet.QuantityValue)">
            <summary>
                Get Area from SquareMillimeters.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Area.FromSquareYards(UnitsNet.QuantityValue)">
            <summary>
                Get Area from SquareYards.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Area.FromUsSurveySquareFeet(UnitsNet.QuantityValue)">
            <summary>
                Get Area from UsSurveySquareFeet.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Area.From(UnitsNet.QuantityValue,UnitsNet.Units.AreaUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.AreaUnit" /> to <see cref="T:UnitsNet.Area" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>Area unit value.</returns>
        </member>
        <member name="M:UnitsNet.Area.GetAbbreviation(UnitsNet.Units.AreaUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.Area.Equals(UnitsNet.Area,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another Area within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.Area.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current Area.</returns>
        </member>
        <member name="M:UnitsNet.Area.As(UnitsNet.Units.AreaUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Area.ToUnit(UnitsNet.Units.AreaUnit)">
            <summary>
                Converts this Area to another Area with the unit representation <paramref name="unit" />.
            </summary>
            <returns>A Area with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Area.AsBaseUnit">
            <summary>
                Converts the current value + unit to the base unit.
                This is typically the first step in converting from one unit to another.
            </summary>
            <returns>The value in the base unit representation.</returns>
        </member>
        <member name="M:UnitsNet.Area.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Area.TryParse(System.String,UnitsNet.Area@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Area.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Area.ParseInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Area.TryParseInternal(System.String,System.IFormatProvider,UnitsNet.Area@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Area.ParseUnitInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Area.TryParseUnitInternal(System.String,System.IFormatProvider,UnitsNet.Units.AreaUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Area.ToString">
            <summary>
                Get default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Area.ToString(UnitsNet.Units.AreaUnit)">
            <summary>
                Get string representation of value and unit. Using current UI culture and two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <returns>String representation.</returns>
        </member>
        <member name="P:UnitsNet.Area.MaxValue">
            <summary>
            Represents the largest possible value of Area
            </summary>
        </member>
        <member name="P:UnitsNet.Area.MinValue">
            <summary>
            Represents the smallest possible value of Area
            </summary>
        </member>
        <member name="P:UnitsNet.Area.Type">
            <summary>
                The <see cref="P:UnitsNet.Area.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Area.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.Area.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="T:UnitsNet.BrakeSpecificFuelConsumption">
            <summary>
                Brake specific fuel consumption (BSFC) is a measure of the fuel efficiency of any prime mover that burns fuel and produces rotational, or shaft, power. It is typically used for comparing the efficiency of internal combustion engines with a shaft output.
            </summary>
            <summary>
                Brake specific fuel consumption (BSFC) is a measure of the fuel efficiency of any prime mover that burns fuel and produces rotational, or shaft, power. It is typically used for comparing the efficiency of internal combustion engines with a shaft output.
            </summary>
        </member>
        <member name="P:UnitsNet.BrakeSpecificFuelConsumption.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.BrakeSpecificFuelConsumption.GetAbbreviation(UnitsNet.Units.BrakeSpecificFuelConsumptionUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.BrakeSpecificFuelConsumption.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.BrakeSpecificFuelConsumption.TryParse(System.String,System.IFormatProvider,UnitsNet.BrakeSpecificFuelConsumption@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.BrakeSpecificFuelConsumption.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.BrakeSpecificFuelConsumption.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.BrakeSpecificFuelConsumptionUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.BrakeSpecificFuelConsumption.ToString(UnitsNet.Units.BrakeSpecificFuelConsumptionUnit,System.IFormatProvider)">
            <summary>
                Get string representation of value and unit. Using two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.BrakeSpecificFuelConsumption.ToString(UnitsNet.Units.BrakeSpecificFuelConsumptionUnit,System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.BrakeSpecificFuelConsumption.ToString(UnitsNet.Units.BrakeSpecificFuelConsumptionUnit,System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">Unit representation to use.</param>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
        </member>
        <member name="F:UnitsNet.BrakeSpecificFuelConsumption._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.BrakeSpecificFuelConsumption._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.BrakeSpecificFuelConsumption.Unit">
            <summary>
                The unit this quantity was constructed with -or- <see cref="P:UnitsNet.BrakeSpecificFuelConsumption.BaseUnit" /> if default ctor was used.
            </summary>
        </member>
        <member name="M:UnitsNet.BrakeSpecificFuelConsumption.#ctor(System.Double,UnitsNet.Units.BrakeSpecificFuelConsumptionUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="numericValue">The numeric value  to contruct this quantity with.</param>
            <param name="unit">The unit representation to contruct this quantity with.</param>
            <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="P:UnitsNet.BrakeSpecificFuelConsumption.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.BrakeSpecificFuelConsumption.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.BrakeSpecificFuelConsumption.BaseUnit">
            <summary>
                The base unit of BrakeSpecificFuelConsumption, which is KilogramPerJoule. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.BrakeSpecificFuelConsumption.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.BrakeSpecificFuelConsumption.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.BrakeSpecificFuelConsumption.Units">
            <summary>
                All units of measurement for the BrakeSpecificFuelConsumption quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.BrakeSpecificFuelConsumption.GramsPerKiloWattHour">
            <summary>
                Get BrakeSpecificFuelConsumption in GramsPerKiloWattHour.
            </summary>
        </member>
        <member name="P:UnitsNet.BrakeSpecificFuelConsumption.KilogramsPerJoule">
            <summary>
                Get BrakeSpecificFuelConsumption in KilogramsPerJoule.
            </summary>
        </member>
        <member name="P:UnitsNet.BrakeSpecificFuelConsumption.PoundsPerMechanicalHorsepowerHour">
            <summary>
                Get BrakeSpecificFuelConsumption in PoundsPerMechanicalHorsepowerHour.
            </summary>
        </member>
        <member name="P:UnitsNet.BrakeSpecificFuelConsumption.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit KilogramPerJoule.
            </summary>
        </member>
        <member name="M:UnitsNet.BrakeSpecificFuelConsumption.FromGramsPerKiloWattHour(UnitsNet.QuantityValue)">
            <summary>
                Get BrakeSpecificFuelConsumption from GramsPerKiloWattHour.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.BrakeSpecificFuelConsumption.FromKilogramsPerJoule(UnitsNet.QuantityValue)">
            <summary>
                Get BrakeSpecificFuelConsumption from KilogramsPerJoule.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.BrakeSpecificFuelConsumption.FromPoundsPerMechanicalHorsepowerHour(UnitsNet.QuantityValue)">
            <summary>
                Get BrakeSpecificFuelConsumption from PoundsPerMechanicalHorsepowerHour.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.BrakeSpecificFuelConsumption.From(UnitsNet.QuantityValue,UnitsNet.Units.BrakeSpecificFuelConsumptionUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.BrakeSpecificFuelConsumptionUnit" /> to <see cref="T:UnitsNet.BrakeSpecificFuelConsumption" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>BrakeSpecificFuelConsumption unit value.</returns>
        </member>
        <member name="M:UnitsNet.BrakeSpecificFuelConsumption.GetAbbreviation(UnitsNet.Units.BrakeSpecificFuelConsumptionUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.BrakeSpecificFuelConsumption.Equals(UnitsNet.BrakeSpecificFuelConsumption,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another BrakeSpecificFuelConsumption within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.BrakeSpecificFuelConsumption.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current BrakeSpecificFuelConsumption.</returns>
        </member>
        <member name="M:UnitsNet.BrakeSpecificFuelConsumption.As(UnitsNet.Units.BrakeSpecificFuelConsumptionUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.BrakeSpecificFuelConsumption.ToUnit(UnitsNet.Units.BrakeSpecificFuelConsumptionUnit)">
            <summary>
                Converts this BrakeSpecificFuelConsumption to another BrakeSpecificFuelConsumption with the unit representation <paramref name="unit" />.
            </summary>
            <returns>A BrakeSpecificFuelConsumption with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.BrakeSpecificFuelConsumption.AsBaseUnit">
            <summary>
                Converts the current value + unit to the base unit.
                This is typically the first step in converting from one unit to another.
            </summary>
            <returns>The value in the base unit representation.</returns>
        </member>
        <member name="M:UnitsNet.BrakeSpecificFuelConsumption.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.BrakeSpecificFuelConsumption.TryParse(System.String,UnitsNet.BrakeSpecificFuelConsumption@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.BrakeSpecificFuelConsumption.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.BrakeSpecificFuelConsumption.ParseInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.BrakeSpecificFuelConsumption.TryParseInternal(System.String,System.IFormatProvider,UnitsNet.BrakeSpecificFuelConsumption@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.BrakeSpecificFuelConsumption.ParseUnitInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.BrakeSpecificFuelConsumption.TryParseUnitInternal(System.String,System.IFormatProvider,UnitsNet.Units.BrakeSpecificFuelConsumptionUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.BrakeSpecificFuelConsumption.ToString">
            <summary>
                Get default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.BrakeSpecificFuelConsumption.ToString(UnitsNet.Units.BrakeSpecificFuelConsumptionUnit)">
            <summary>
                Get string representation of value and unit. Using current UI culture and two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <returns>String representation.</returns>
        </member>
        <member name="P:UnitsNet.BrakeSpecificFuelConsumption.MaxValue">
            <summary>
            Represents the largest possible value of BrakeSpecificFuelConsumption
            </summary>
        </member>
        <member name="P:UnitsNet.BrakeSpecificFuelConsumption.MinValue">
            <summary>
            Represents the smallest possible value of BrakeSpecificFuelConsumption
            </summary>
        </member>
        <member name="P:UnitsNet.BrakeSpecificFuelConsumption.Type">
            <summary>
                The <see cref="P:UnitsNet.BrakeSpecificFuelConsumption.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.BrakeSpecificFuelConsumption.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.BrakeSpecificFuelConsumption.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="T:UnitsNet.Density">
            <summary>
                The density, or more precisely, the volumetric mass density, of a substance is its mass per unit volume.
            </summary>
            <summary>
                The density, or more precisely, the volumetric mass density, of a substance is its mass per unit volume.
            </summary>
        </member>
        <member name="M:UnitsNet.Density.ToMolarity(UnitsNet.Mass)">
            <summary>
                Gets <see cref="T:UnitsNet.Molarity" /> from this <see cref="T:UnitsNet.Density" />.
            </summary>
            <param name="molecularWeight"></param>
        </member>
        <member name="M:UnitsNet.Density.FromMolarity(UnitsNet.Molarity,UnitsNet.Mass)">
            <summary>
                Get <see cref="T:UnitsNet.Density" /> from <see cref="T:UnitsNet.Molarity" />.
            </summary>
            <param name="molarity"></param>
            <param name="molecularWeight"></param>
        </member>
        <member name="P:UnitsNet.Density.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.Density.GetAbbreviation(UnitsNet.Units.DensityUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.Density.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Density.TryParse(System.String,System.IFormatProvider,UnitsNet.Density@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Density.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Density.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.DensityUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Density.ToString(UnitsNet.Units.DensityUnit,System.IFormatProvider)">
            <summary>
                Get string representation of value and unit. Using two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Density.ToString(UnitsNet.Units.DensityUnit,System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Density.ToString(UnitsNet.Units.DensityUnit,System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">Unit representation to use.</param>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
        </member>
        <member name="F:UnitsNet.Density._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.Density._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.Density.Unit">
            <summary>
                The unit this quantity was constructed with -or- <see cref="P:UnitsNet.Density.BaseUnit" /> if default ctor was used.
            </summary>
        </member>
        <member name="M:UnitsNet.Density.#ctor(System.Double,UnitsNet.Units.DensityUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="numericValue">The numeric value  to contruct this quantity with.</param>
            <param name="unit">The unit representation to contruct this quantity with.</param>
            <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="P:UnitsNet.Density.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.Density.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Density.BaseUnit">
            <summary>
                The base unit of Density, which is KilogramPerCubicMeter. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.Density.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.Density.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Density.Units">
            <summary>
                All units of measurement for the Density quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Density.CentigramsPerDeciLiter">
            <summary>
                Get Density in CentigramsPerDeciLiter.
            </summary>
        </member>
        <member name="P:UnitsNet.Density.CentigramsPerLiter">
            <summary>
                Get Density in CentigramsPerLiter.
            </summary>
        </member>
        <member name="P:UnitsNet.Density.CentigramsPerMilliliter">
            <summary>
                Get Density in CentigramsPerMilliliter.
            </summary>
        </member>
        <member name="P:UnitsNet.Density.DecigramsPerDeciLiter">
            <summary>
                Get Density in DecigramsPerDeciLiter.
            </summary>
        </member>
        <member name="P:UnitsNet.Density.DecigramsPerLiter">
            <summary>
                Get Density in DecigramsPerLiter.
            </summary>
        </member>
        <member name="P:UnitsNet.Density.DecigramsPerMilliliter">
            <summary>
                Get Density in DecigramsPerMilliliter.
            </summary>
        </member>
        <member name="P:UnitsNet.Density.GramsPerCubicCentimeter">
            <summary>
                Get Density in GramsPerCubicCentimeter.
            </summary>
        </member>
        <member name="P:UnitsNet.Density.GramsPerCubicMeter">
            <summary>
                Get Density in GramsPerCubicMeter.
            </summary>
        </member>
        <member name="P:UnitsNet.Density.GramsPerCubicMillimeter">
            <summary>
                Get Density in GramsPerCubicMillimeter.
            </summary>
        </member>
        <member name="P:UnitsNet.Density.GramsPerDeciLiter">
            <summary>
                Get Density in GramsPerDeciLiter.
            </summary>
        </member>
        <member name="P:UnitsNet.Density.GramsPerLiter">
            <summary>
                Get Density in GramsPerLiter.
            </summary>
        </member>
        <member name="P:UnitsNet.Density.GramsPerMilliliter">
            <summary>
                Get Density in GramsPerMilliliter.
            </summary>
        </member>
        <member name="P:UnitsNet.Density.KilogramsPerCubicCentimeter">
            <summary>
                Get Density in KilogramsPerCubicCentimeter.
            </summary>
        </member>
        <member name="P:UnitsNet.Density.KilogramsPerCubicMeter">
            <summary>
                Get Density in KilogramsPerCubicMeter.
            </summary>
        </member>
        <member name="P:UnitsNet.Density.KilogramsPerCubicMillimeter">
            <summary>
                Get Density in KilogramsPerCubicMillimeter.
            </summary>
        </member>
        <member name="P:UnitsNet.Density.KilopoundsPerCubicFoot">
            <summary>
                Get Density in KilopoundsPerCubicFoot.
            </summary>
        </member>
        <member name="P:UnitsNet.Density.KilopoundsPerCubicInch">
            <summary>
                Get Density in KilopoundsPerCubicInch.
            </summary>
        </member>
        <member name="P:UnitsNet.Density.MicrogramsPerDeciLiter">
            <summary>
                Get Density in MicrogramsPerDeciLiter.
            </summary>
        </member>
        <member name="P:UnitsNet.Density.MicrogramsPerLiter">
            <summary>
                Get Density in MicrogramsPerLiter.
            </summary>
        </member>
        <member name="P:UnitsNet.Density.MicrogramsPerMilliliter">
            <summary>
                Get Density in MicrogramsPerMilliliter.
            </summary>
        </member>
        <member name="P:UnitsNet.Density.MilligramsPerCubicMeter">
            <summary>
                Get Density in MilligramsPerCubicMeter.
            </summary>
        </member>
        <member name="P:UnitsNet.Density.MilligramsPerDeciLiter">
            <summary>
                Get Density in MilligramsPerDeciLiter.
            </summary>
        </member>
        <member name="P:UnitsNet.Density.MilligramsPerLiter">
            <summary>
                Get Density in MilligramsPerLiter.
            </summary>
        </member>
        <member name="P:UnitsNet.Density.MilligramsPerMilliliter">
            <summary>
                Get Density in MilligramsPerMilliliter.
            </summary>
        </member>
        <member name="P:UnitsNet.Density.NanogramsPerDeciLiter">
            <summary>
                Get Density in NanogramsPerDeciLiter.
            </summary>
        </member>
        <member name="P:UnitsNet.Density.NanogramsPerLiter">
            <summary>
                Get Density in NanogramsPerLiter.
            </summary>
        </member>
        <member name="P:UnitsNet.Density.NanogramsPerMilliliter">
            <summary>
                Get Density in NanogramsPerMilliliter.
            </summary>
        </member>
        <member name="P:UnitsNet.Density.PicogramsPerDeciLiter">
            <summary>
                Get Density in PicogramsPerDeciLiter.
            </summary>
        </member>
        <member name="P:UnitsNet.Density.PicogramsPerLiter">
            <summary>
                Get Density in PicogramsPerLiter.
            </summary>
        </member>
        <member name="P:UnitsNet.Density.PicogramsPerMilliliter">
            <summary>
                Get Density in PicogramsPerMilliliter.
            </summary>
        </member>
        <member name="P:UnitsNet.Density.PoundsPerCubicFoot">
            <summary>
                Get Density in PoundsPerCubicFoot.
            </summary>
        </member>
        <member name="P:UnitsNet.Density.PoundsPerCubicInch">
            <summary>
                Get Density in PoundsPerCubicInch.
            </summary>
        </member>
        <member name="P:UnitsNet.Density.PoundsPerImperialGallon">
            <summary>
                Get Density in PoundsPerImperialGallon.
            </summary>
        </member>
        <member name="P:UnitsNet.Density.PoundsPerUSGallon">
            <summary>
                Get Density in PoundsPerUSGallon.
            </summary>
        </member>
        <member name="P:UnitsNet.Density.SlugsPerCubicFoot">
            <summary>
                Get Density in SlugsPerCubicFoot.
            </summary>
        </member>
        <member name="P:UnitsNet.Density.TonnesPerCubicCentimeter">
            <summary>
                Get Density in TonnesPerCubicCentimeter.
            </summary>
        </member>
        <member name="P:UnitsNet.Density.TonnesPerCubicMeter">
            <summary>
                Get Density in TonnesPerCubicMeter.
            </summary>
        </member>
        <member name="P:UnitsNet.Density.TonnesPerCubicMillimeter">
            <summary>
                Get Density in TonnesPerCubicMillimeter.
            </summary>
        </member>
        <member name="P:UnitsNet.Density.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit KilogramPerCubicMeter.
            </summary>
        </member>
        <member name="M:UnitsNet.Density.FromCentigramsPerDeciLiter(UnitsNet.QuantityValue)">
            <summary>
                Get Density from CentigramsPerDeciLiter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Density.FromCentigramsPerLiter(UnitsNet.QuantityValue)">
            <summary>
                Get Density from CentigramsPerLiter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Density.FromCentigramsPerMilliliter(UnitsNet.QuantityValue)">
            <summary>
                Get Density from CentigramsPerMilliliter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Density.FromDecigramsPerDeciLiter(UnitsNet.QuantityValue)">
            <summary>
                Get Density from DecigramsPerDeciLiter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Density.FromDecigramsPerLiter(UnitsNet.QuantityValue)">
            <summary>
                Get Density from DecigramsPerLiter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Density.FromDecigramsPerMilliliter(UnitsNet.QuantityValue)">
            <summary>
                Get Density from DecigramsPerMilliliter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Density.FromGramsPerCubicCentimeter(UnitsNet.QuantityValue)">
            <summary>
                Get Density from GramsPerCubicCentimeter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Density.FromGramsPerCubicMeter(UnitsNet.QuantityValue)">
            <summary>
                Get Density from GramsPerCubicMeter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Density.FromGramsPerCubicMillimeter(UnitsNet.QuantityValue)">
            <summary>
                Get Density from GramsPerCubicMillimeter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Density.FromGramsPerDeciLiter(UnitsNet.QuantityValue)">
            <summary>
                Get Density from GramsPerDeciLiter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Density.FromGramsPerLiter(UnitsNet.QuantityValue)">
            <summary>
                Get Density from GramsPerLiter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Density.FromGramsPerMilliliter(UnitsNet.QuantityValue)">
            <summary>
                Get Density from GramsPerMilliliter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Density.FromKilogramsPerCubicCentimeter(UnitsNet.QuantityValue)">
            <summary>
                Get Density from KilogramsPerCubicCentimeter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Density.FromKilogramsPerCubicMeter(UnitsNet.QuantityValue)">
            <summary>
                Get Density from KilogramsPerCubicMeter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Density.FromKilogramsPerCubicMillimeter(UnitsNet.QuantityValue)">
            <summary>
                Get Density from KilogramsPerCubicMillimeter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Density.FromKilopoundsPerCubicFoot(UnitsNet.QuantityValue)">
            <summary>
                Get Density from KilopoundsPerCubicFoot.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Density.FromKilopoundsPerCubicInch(UnitsNet.QuantityValue)">
            <summary>
                Get Density from KilopoundsPerCubicInch.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Density.FromMicrogramsPerDeciLiter(UnitsNet.QuantityValue)">
            <summary>
                Get Density from MicrogramsPerDeciLiter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Density.FromMicrogramsPerLiter(UnitsNet.QuantityValue)">
            <summary>
                Get Density from MicrogramsPerLiter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Density.FromMicrogramsPerMilliliter(UnitsNet.QuantityValue)">
            <summary>
                Get Density from MicrogramsPerMilliliter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Density.FromMilligramsPerCubicMeter(UnitsNet.QuantityValue)">
            <summary>
                Get Density from MilligramsPerCubicMeter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Density.FromMilligramsPerDeciLiter(UnitsNet.QuantityValue)">
            <summary>
                Get Density from MilligramsPerDeciLiter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Density.FromMilligramsPerLiter(UnitsNet.QuantityValue)">
            <summary>
                Get Density from MilligramsPerLiter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Density.FromMilligramsPerMilliliter(UnitsNet.QuantityValue)">
            <summary>
                Get Density from MilligramsPerMilliliter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Density.FromNanogramsPerDeciLiter(UnitsNet.QuantityValue)">
            <summary>
                Get Density from NanogramsPerDeciLiter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Density.FromNanogramsPerLiter(UnitsNet.QuantityValue)">
            <summary>
                Get Density from NanogramsPerLiter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Density.FromNanogramsPerMilliliter(UnitsNet.QuantityValue)">
            <summary>
                Get Density from NanogramsPerMilliliter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Density.FromPicogramsPerDeciLiter(UnitsNet.QuantityValue)">
            <summary>
                Get Density from PicogramsPerDeciLiter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Density.FromPicogramsPerLiter(UnitsNet.QuantityValue)">
            <summary>
                Get Density from PicogramsPerLiter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Density.FromPicogramsPerMilliliter(UnitsNet.QuantityValue)">
            <summary>
                Get Density from PicogramsPerMilliliter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Density.FromPoundsPerCubicFoot(UnitsNet.QuantityValue)">
            <summary>
                Get Density from PoundsPerCubicFoot.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Density.FromPoundsPerCubicInch(UnitsNet.QuantityValue)">
            <summary>
                Get Density from PoundsPerCubicInch.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Density.FromPoundsPerImperialGallon(UnitsNet.QuantityValue)">
            <summary>
                Get Density from PoundsPerImperialGallon.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Density.FromPoundsPerUSGallon(UnitsNet.QuantityValue)">
            <summary>
                Get Density from PoundsPerUSGallon.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Density.FromSlugsPerCubicFoot(UnitsNet.QuantityValue)">
            <summary>
                Get Density from SlugsPerCubicFoot.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Density.FromTonnesPerCubicCentimeter(UnitsNet.QuantityValue)">
            <summary>
                Get Density from TonnesPerCubicCentimeter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Density.FromTonnesPerCubicMeter(UnitsNet.QuantityValue)">
            <summary>
                Get Density from TonnesPerCubicMeter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Density.FromTonnesPerCubicMillimeter(UnitsNet.QuantityValue)">
            <summary>
                Get Density from TonnesPerCubicMillimeter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Density.From(UnitsNet.QuantityValue,UnitsNet.Units.DensityUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.DensityUnit" /> to <see cref="T:UnitsNet.Density" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>Density unit value.</returns>
        </member>
        <member name="M:UnitsNet.Density.GetAbbreviation(UnitsNet.Units.DensityUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.Density.Equals(UnitsNet.Density,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another Density within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.Density.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current Density.</returns>
        </member>
        <member name="M:UnitsNet.Density.As(UnitsNet.Units.DensityUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Density.ToUnit(UnitsNet.Units.DensityUnit)">
            <summary>
                Converts this Density to another Density with the unit representation <paramref name="unit" />.
            </summary>
            <returns>A Density with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Density.AsBaseUnit">
            <summary>
                Converts the current value + unit to the base unit.
                This is typically the first step in converting from one unit to another.
            </summary>
            <returns>The value in the base unit representation.</returns>
        </member>
        <member name="M:UnitsNet.Density.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Density.TryParse(System.String,UnitsNet.Density@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Density.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Density.ParseInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Density.TryParseInternal(System.String,System.IFormatProvider,UnitsNet.Density@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Density.ParseUnitInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Density.TryParseUnitInternal(System.String,System.IFormatProvider,UnitsNet.Units.DensityUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Density.ToString">
            <summary>
                Get default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Density.ToString(UnitsNet.Units.DensityUnit)">
            <summary>
                Get string representation of value and unit. Using current UI culture and two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <returns>String representation.</returns>
        </member>
        <member name="P:UnitsNet.Density.MaxValue">
            <summary>
            Represents the largest possible value of Density
            </summary>
        </member>
        <member name="P:UnitsNet.Density.MinValue">
            <summary>
            Represents the smallest possible value of Density
            </summary>
        </member>
        <member name="P:UnitsNet.Density.Type">
            <summary>
                The <see cref="P:UnitsNet.Density.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Density.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.Density.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="T:UnitsNet.Duration">
            <summary>
                Time is a dimension in which events can be ordered from the past through the present into the future, and also the measure of durations of events and the intervals between them.
            </summary>
            <summary>
                Time is a dimension in which events can be ordered from the past through the present into the future, and also the measure of durations of events and the intervals between them.
            </summary>
        </member>
        <member name="M:UnitsNet.Duration.ToTimeSpan">
            <summary>
                Convert a Duration to a TimeSpan.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Throws if the TimeSpan can't represent the Duration exactly </exception>
            <returns>The TimeSpan with the same time as the duration</returns>
        </member>
        <member name="P:UnitsNet.Duration.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.Duration.GetAbbreviation(UnitsNet.Units.DurationUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.Duration.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Duration.TryParse(System.String,System.IFormatProvider,UnitsNet.Duration@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Duration.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Duration.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.DurationUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Duration.ToString(UnitsNet.Units.DurationUnit,System.IFormatProvider)">
            <summary>
                Get string representation of value and unit. Using two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Duration.ToString(UnitsNet.Units.DurationUnit,System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Duration.ToString(UnitsNet.Units.DurationUnit,System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">Unit representation to use.</param>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
        </member>
        <member name="F:UnitsNet.Duration._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.Duration._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.Duration.Unit">
            <summary>
                The unit this quantity was constructed with -or- <see cref="P:UnitsNet.Duration.BaseUnit" /> if default ctor was used.
            </summary>
        </member>
        <member name="M:UnitsNet.Duration.#ctor(System.Double,UnitsNet.Units.DurationUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="numericValue">The numeric value  to contruct this quantity with.</param>
            <param name="unit">The unit representation to contruct this quantity with.</param>
            <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="P:UnitsNet.Duration.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.Duration.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Duration.BaseUnit">
            <summary>
                The base unit of Duration, which is Second. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.Duration.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.Duration.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Duration.Units">
            <summary>
                All units of measurement for the Duration quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Duration.Days">
            <summary>
                Get Duration in Days.
            </summary>
        </member>
        <member name="P:UnitsNet.Duration.Hours">
            <summary>
                Get Duration in Hours.
            </summary>
        </member>
        <member name="P:UnitsNet.Duration.Microseconds">
            <summary>
                Get Duration in Microseconds.
            </summary>
        </member>
        <member name="P:UnitsNet.Duration.Milliseconds">
            <summary>
                Get Duration in Milliseconds.
            </summary>
        </member>
        <member name="P:UnitsNet.Duration.Minutes">
            <summary>
                Get Duration in Minutes.
            </summary>
        </member>
        <member name="P:UnitsNet.Duration.Months30">
            <summary>
                Get Duration in Months30.
            </summary>
        </member>
        <member name="P:UnitsNet.Duration.Nanoseconds">
            <summary>
                Get Duration in Nanoseconds.
            </summary>
        </member>
        <member name="P:UnitsNet.Duration.Seconds">
            <summary>
                Get Duration in Seconds.
            </summary>
        </member>
        <member name="P:UnitsNet.Duration.Weeks">
            <summary>
                Get Duration in Weeks.
            </summary>
        </member>
        <member name="P:UnitsNet.Duration.Years365">
            <summary>
                Get Duration in Years365.
            </summary>
        </member>
        <member name="P:UnitsNet.Duration.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit Second.
            </summary>
        </member>
        <member name="M:UnitsNet.Duration.FromDays(UnitsNet.QuantityValue)">
            <summary>
                Get Duration from Days.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Duration.FromHours(UnitsNet.QuantityValue)">
            <summary>
                Get Duration from Hours.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Duration.FromMicroseconds(UnitsNet.QuantityValue)">
            <summary>
                Get Duration from Microseconds.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Duration.FromMilliseconds(UnitsNet.QuantityValue)">
            <summary>
                Get Duration from Milliseconds.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Duration.FromMinutes(UnitsNet.QuantityValue)">
            <summary>
                Get Duration from Minutes.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Duration.FromMonths30(UnitsNet.QuantityValue)">
            <summary>
                Get Duration from Months30.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Duration.FromNanoseconds(UnitsNet.QuantityValue)">
            <summary>
                Get Duration from Nanoseconds.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Duration.FromSeconds(UnitsNet.QuantityValue)">
            <summary>
                Get Duration from Seconds.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Duration.FromWeeks(UnitsNet.QuantityValue)">
            <summary>
                Get Duration from Weeks.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Duration.FromYears365(UnitsNet.QuantityValue)">
            <summary>
                Get Duration from Years365.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Duration.From(UnitsNet.QuantityValue,UnitsNet.Units.DurationUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.DurationUnit" /> to <see cref="T:UnitsNet.Duration" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>Duration unit value.</returns>
        </member>
        <member name="M:UnitsNet.Duration.GetAbbreviation(UnitsNet.Units.DurationUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.Duration.Equals(UnitsNet.Duration,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another Duration within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.Duration.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current Duration.</returns>
        </member>
        <member name="M:UnitsNet.Duration.As(UnitsNet.Units.DurationUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Duration.ToUnit(UnitsNet.Units.DurationUnit)">
            <summary>
                Converts this Duration to another Duration with the unit representation <paramref name="unit" />.
            </summary>
            <returns>A Duration with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Duration.AsBaseUnit">
            <summary>
                Converts the current value + unit to the base unit.
                This is typically the first step in converting from one unit to another.
            </summary>
            <returns>The value in the base unit representation.</returns>
        </member>
        <member name="M:UnitsNet.Duration.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Duration.TryParse(System.String,UnitsNet.Duration@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Duration.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Duration.ParseInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Duration.TryParseInternal(System.String,System.IFormatProvider,UnitsNet.Duration@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Duration.ParseUnitInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Duration.TryParseUnitInternal(System.String,System.IFormatProvider,UnitsNet.Units.DurationUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Duration.ToString">
            <summary>
                Get default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Duration.ToString(UnitsNet.Units.DurationUnit)">
            <summary>
                Get string representation of value and unit. Using current UI culture and two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <returns>String representation.</returns>
        </member>
        <member name="P:UnitsNet.Duration.MaxValue">
            <summary>
            Represents the largest possible value of Duration
            </summary>
        </member>
        <member name="P:UnitsNet.Duration.MinValue">
            <summary>
            Represents the smallest possible value of Duration
            </summary>
        </member>
        <member name="P:UnitsNet.Duration.Type">
            <summary>
                The <see cref="P:UnitsNet.Duration.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Duration.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.Duration.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="T:UnitsNet.DynamicViscosity">
            <summary>
                The dynamic (shear) viscosity of a fluid expresses its resistance to shearing flows, where adjacent layers move parallel to each other with different speeds
            </summary>
            <summary>
                The dynamic (shear) viscosity of a fluid expresses its resistance to shearing flows, where adjacent layers move parallel to each other with different speeds
            </summary>
        </member>
        <member name="P:UnitsNet.DynamicViscosity.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.DynamicViscosity.GetAbbreviation(UnitsNet.Units.DynamicViscosityUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.DynamicViscosity.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.DynamicViscosity.TryParse(System.String,System.IFormatProvider,UnitsNet.DynamicViscosity@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.DynamicViscosity.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.DynamicViscosity.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.DynamicViscosityUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.DynamicViscosity.ToString(UnitsNet.Units.DynamicViscosityUnit,System.IFormatProvider)">
            <summary>
                Get string representation of value and unit. Using two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.DynamicViscosity.ToString(UnitsNet.Units.DynamicViscosityUnit,System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.DynamicViscosity.ToString(UnitsNet.Units.DynamicViscosityUnit,System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">Unit representation to use.</param>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
        </member>
        <member name="F:UnitsNet.DynamicViscosity._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.DynamicViscosity._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.DynamicViscosity.Unit">
            <summary>
                The unit this quantity was constructed with -or- <see cref="P:UnitsNet.DynamicViscosity.BaseUnit" /> if default ctor was used.
            </summary>
        </member>
        <member name="M:UnitsNet.DynamicViscosity.#ctor(System.Double,UnitsNet.Units.DynamicViscosityUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="numericValue">The numeric value  to contruct this quantity with.</param>
            <param name="unit">The unit representation to contruct this quantity with.</param>
            <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="P:UnitsNet.DynamicViscosity.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.DynamicViscosity.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.DynamicViscosity.BaseUnit">
            <summary>
                The base unit of DynamicViscosity, which is NewtonSecondPerMeterSquared. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.DynamicViscosity.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.DynamicViscosity.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.DynamicViscosity.Units">
            <summary>
                All units of measurement for the DynamicViscosity quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.DynamicViscosity.Centipoise">
            <summary>
                Get DynamicViscosity in Centipoise.
            </summary>
        </member>
        <member name="P:UnitsNet.DynamicViscosity.MicropascalSeconds">
            <summary>
                Get DynamicViscosity in MicropascalSeconds.
            </summary>
        </member>
        <member name="P:UnitsNet.DynamicViscosity.MillipascalSeconds">
            <summary>
                Get DynamicViscosity in MillipascalSeconds.
            </summary>
        </member>
        <member name="P:UnitsNet.DynamicViscosity.NewtonSecondsPerMeterSquared">
            <summary>
                Get DynamicViscosity in NewtonSecondsPerMeterSquared.
            </summary>
        </member>
        <member name="P:UnitsNet.DynamicViscosity.PascalSeconds">
            <summary>
                Get DynamicViscosity in PascalSeconds.
            </summary>
        </member>
        <member name="P:UnitsNet.DynamicViscosity.Poise">
            <summary>
                Get DynamicViscosity in Poise.
            </summary>
        </member>
        <member name="P:UnitsNet.DynamicViscosity.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit NewtonSecondPerMeterSquared.
            </summary>
        </member>
        <member name="M:UnitsNet.DynamicViscosity.FromCentipoise(UnitsNet.QuantityValue)">
            <summary>
                Get DynamicViscosity from Centipoise.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.DynamicViscosity.FromMicropascalSeconds(UnitsNet.QuantityValue)">
            <summary>
                Get DynamicViscosity from MicropascalSeconds.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.DynamicViscosity.FromMillipascalSeconds(UnitsNet.QuantityValue)">
            <summary>
                Get DynamicViscosity from MillipascalSeconds.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.DynamicViscosity.FromNewtonSecondsPerMeterSquared(UnitsNet.QuantityValue)">
            <summary>
                Get DynamicViscosity from NewtonSecondsPerMeterSquared.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.DynamicViscosity.FromPascalSeconds(UnitsNet.QuantityValue)">
            <summary>
                Get DynamicViscosity from PascalSeconds.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.DynamicViscosity.FromPoise(UnitsNet.QuantityValue)">
            <summary>
                Get DynamicViscosity from Poise.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.DynamicViscosity.From(UnitsNet.QuantityValue,UnitsNet.Units.DynamicViscosityUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.DynamicViscosityUnit" /> to <see cref="T:UnitsNet.DynamicViscosity" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>DynamicViscosity unit value.</returns>
        </member>
        <member name="M:UnitsNet.DynamicViscosity.GetAbbreviation(UnitsNet.Units.DynamicViscosityUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.DynamicViscosity.Equals(UnitsNet.DynamicViscosity,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another DynamicViscosity within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.DynamicViscosity.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current DynamicViscosity.</returns>
        </member>
        <member name="M:UnitsNet.DynamicViscosity.As(UnitsNet.Units.DynamicViscosityUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.DynamicViscosity.ToUnit(UnitsNet.Units.DynamicViscosityUnit)">
            <summary>
                Converts this DynamicViscosity to another DynamicViscosity with the unit representation <paramref name="unit" />.
            </summary>
            <returns>A DynamicViscosity with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.DynamicViscosity.AsBaseUnit">
            <summary>
                Converts the current value + unit to the base unit.
                This is typically the first step in converting from one unit to another.
            </summary>
            <returns>The value in the base unit representation.</returns>
        </member>
        <member name="M:UnitsNet.DynamicViscosity.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.DynamicViscosity.TryParse(System.String,UnitsNet.DynamicViscosity@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.DynamicViscosity.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.DynamicViscosity.ParseInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.DynamicViscosity.TryParseInternal(System.String,System.IFormatProvider,UnitsNet.DynamicViscosity@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.DynamicViscosity.ParseUnitInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.DynamicViscosity.TryParseUnitInternal(System.String,System.IFormatProvider,UnitsNet.Units.DynamicViscosityUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.DynamicViscosity.ToString">
            <summary>
                Get default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.DynamicViscosity.ToString(UnitsNet.Units.DynamicViscosityUnit)">
            <summary>
                Get string representation of value and unit. Using current UI culture and two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <returns>String representation.</returns>
        </member>
        <member name="P:UnitsNet.DynamicViscosity.MaxValue">
            <summary>
            Represents the largest possible value of DynamicViscosity
            </summary>
        </member>
        <member name="P:UnitsNet.DynamicViscosity.MinValue">
            <summary>
            Represents the smallest possible value of DynamicViscosity
            </summary>
        </member>
        <member name="P:UnitsNet.DynamicViscosity.Type">
            <summary>
                The <see cref="P:UnitsNet.DynamicViscosity.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.DynamicViscosity.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.DynamicViscosity.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="T:UnitsNet.ElectricPotential">
            <summary>
                In classical electromagnetism, the electric potential (a scalar quantity denoted by Î¦, Î¦E or V and also called the electric field potential or the electrostatic potential) at a point is the amount of electric potential energy that a unitary point charge would have when located at that point.
            </summary>
            <summary>
                In classical electromagnetism, the electric potential (a scalar quantity denoted by Î¦, Î¦E or V and also called the electric field potential or the electrostatic potential) at a point is the amount of electric potential energy that a unitary point charge would have when located at that point.
            </summary>
        </member>
        <member name="M:UnitsNet.ElectricPotential.ToAmplitudeRatio">
            <summary>
                Gets an <see cref="T:UnitsNet.AmplitudeRatio" /> in decibels (dB) relative to 1 volt RMS from this <see cref="T:UnitsNet.ElectricPotential" />.
            </summary>
            <remarks>
                Provides a nicer syntax for converting a voltage to an amplitude ratio (relative to 1 volt RMS).
                <example>
                    <c>var voltageRatio = voltage.ToAmplitudeRatio();</c>
                </example>
            </remarks>
        </member>
        <member name="P:UnitsNet.ElectricPotential.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.ElectricPotential.GetAbbreviation(UnitsNet.Units.ElectricPotentialUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.ElectricPotential.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.ElectricPotential.TryParse(System.String,System.IFormatProvider,UnitsNet.ElectricPotential@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ElectricPotential.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ElectricPotential.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.ElectricPotentialUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ElectricPotential.ToString(UnitsNet.Units.ElectricPotentialUnit,System.IFormatProvider)">
            <summary>
                Get string representation of value and unit. Using two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.ElectricPotential.ToString(UnitsNet.Units.ElectricPotentialUnit,System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.ElectricPotential.ToString(UnitsNet.Units.ElectricPotentialUnit,System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">Unit representation to use.</param>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
        </member>
        <member name="F:UnitsNet.ElectricPotential._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.ElectricPotential._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotential.Unit">
            <summary>
                The unit this quantity was constructed with -or- <see cref="P:UnitsNet.ElectricPotential.BaseUnit" /> if default ctor was used.
            </summary>
        </member>
        <member name="M:UnitsNet.ElectricPotential.#ctor(System.Double,UnitsNet.Units.ElectricPotentialUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="numericValue">The numeric value  to contruct this quantity with.</param>
            <param name="unit">The unit representation to contruct this quantity with.</param>
            <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="P:UnitsNet.ElectricPotential.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.ElectricPotential.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotential.BaseUnit">
            <summary>
                The base unit of ElectricPotential, which is Volt. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotential.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.ElectricPotential.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotential.Units">
            <summary>
                All units of measurement for the ElectricPotential quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotential.Kilovolts">
            <summary>
                Get ElectricPotential in Kilovolts.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotential.Megavolts">
            <summary>
                Get ElectricPotential in Megavolts.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotential.Microvolts">
            <summary>
                Get ElectricPotential in Microvolts.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotential.Millivolts">
            <summary>
                Get ElectricPotential in Millivolts.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotential.Volts">
            <summary>
                Get ElectricPotential in Volts.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotential.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit Volt.
            </summary>
        </member>
        <member name="M:UnitsNet.ElectricPotential.FromKilovolts(UnitsNet.QuantityValue)">
            <summary>
                Get ElectricPotential from Kilovolts.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricPotential.FromMegavolts(UnitsNet.QuantityValue)">
            <summary>
                Get ElectricPotential from Megavolts.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricPotential.FromMicrovolts(UnitsNet.QuantityValue)">
            <summary>
                Get ElectricPotential from Microvolts.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricPotential.FromMillivolts(UnitsNet.QuantityValue)">
            <summary>
                Get ElectricPotential from Millivolts.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricPotential.FromVolts(UnitsNet.QuantityValue)">
            <summary>
                Get ElectricPotential from Volts.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricPotential.From(UnitsNet.QuantityValue,UnitsNet.Units.ElectricPotentialUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.ElectricPotentialUnit" /> to <see cref="T:UnitsNet.ElectricPotential" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>ElectricPotential unit value.</returns>
        </member>
        <member name="M:UnitsNet.ElectricPotential.GetAbbreviation(UnitsNet.Units.ElectricPotentialUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.ElectricPotential.Equals(UnitsNet.ElectricPotential,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another ElectricPotential within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.ElectricPotential.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current ElectricPotential.</returns>
        </member>
        <member name="M:UnitsNet.ElectricPotential.As(UnitsNet.Units.ElectricPotentialUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ElectricPotential.ToUnit(UnitsNet.Units.ElectricPotentialUnit)">
            <summary>
                Converts this ElectricPotential to another ElectricPotential with the unit representation <paramref name="unit" />.
            </summary>
            <returns>A ElectricPotential with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ElectricPotential.AsBaseUnit">
            <summary>
                Converts the current value + unit to the base unit.
                This is typically the first step in converting from one unit to another.
            </summary>
            <returns>The value in the base unit representation.</returns>
        </member>
        <member name="M:UnitsNet.ElectricPotential.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.ElectricPotential.TryParse(System.String,UnitsNet.ElectricPotential@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ElectricPotential.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ElectricPotential.ParseInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.ElectricPotential.TryParseInternal(System.String,System.IFormatProvider,UnitsNet.ElectricPotential@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ElectricPotential.ParseUnitInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ElectricPotential.TryParseUnitInternal(System.String,System.IFormatProvider,UnitsNet.Units.ElectricPotentialUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ElectricPotential.ToString">
            <summary>
                Get default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.ElectricPotential.ToString(UnitsNet.Units.ElectricPotentialUnit)">
            <summary>
                Get string representation of value and unit. Using current UI culture and two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <returns>String representation.</returns>
        </member>
        <member name="P:UnitsNet.ElectricPotential.MaxValue">
            <summary>
            Represents the largest possible value of ElectricPotential
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotential.MinValue">
            <summary>
            Represents the smallest possible value of ElectricPotential
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotential.Type">
            <summary>
                The <see cref="P:UnitsNet.ElectricPotential.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotential.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.ElectricPotential.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="T:UnitsNet.Force">
            <summary>
                In physics, a force is any influence that causes an object to undergo a certain change, either concerning its movement, direction, or geometrical construction. In other words, a force can cause an object with mass to change its velocity (which includes to begin moving from a state of rest), i.e., to accelerate, or a flexible object to deform, or both. Force can also be described by intuitive concepts such as a push or a pull. A force has both magnitude and direction, making it a vector quantity. It is measured in the SI unit of newtons and represented by the symbol F.
            </summary>
            <summary>
                In physics, a force is any influence that causes an object to undergo a certain change, either concerning its movement, direction, or geometrical construction. In other words, a force can cause an object with mass to change its velocity (which includes to begin moving from a state of rest), i.e., to accelerate, or a flexible object to deform, or both. Force can also be described by intuitive concepts such as a push or a pull. A force has both magnitude and direction, making it a vector quantity. It is measured in the SI unit of newtons and represented by the symbol F.
            </summary>
        </member>
        <member name="P:UnitsNet.Force.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.Force.GetAbbreviation(UnitsNet.Units.ForceUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.Force.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Force.TryParse(System.String,System.IFormatProvider,UnitsNet.Force@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Force.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Force.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.ForceUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Force.ToString(UnitsNet.Units.ForceUnit,System.IFormatProvider)">
            <summary>
                Get string representation of value and unit. Using two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Force.ToString(UnitsNet.Units.ForceUnit,System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Force.ToString(UnitsNet.Units.ForceUnit,System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">Unit representation to use.</param>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
        </member>
        <member name="F:UnitsNet.Force._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.Force._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.Force.Unit">
            <summary>
                The unit this quantity was constructed with -or- <see cref="P:UnitsNet.Force.BaseUnit" /> if default ctor was used.
            </summary>
        </member>
        <member name="M:UnitsNet.Force.#ctor(System.Double,UnitsNet.Units.ForceUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="numericValue">The numeric value  to contruct this quantity with.</param>
            <param name="unit">The unit representation to contruct this quantity with.</param>
            <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="P:UnitsNet.Force.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.Force.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Force.BaseUnit">
            <summary>
                The base unit of Force, which is Newton. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.Force.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.Force.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Force.Units">
            <summary>
                All units of measurement for the Force quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Force.Decanewtons">
            <summary>
                Get Force in Decanewtons.
            </summary>
        </member>
        <member name="P:UnitsNet.Force.Dyne">
            <summary>
                Get Force in Dyne.
            </summary>
        </member>
        <member name="P:UnitsNet.Force.KilogramsForce">
            <summary>
                Get Force in KilogramsForce.
            </summary>
        </member>
        <member name="P:UnitsNet.Force.Kilonewtons">
            <summary>
                Get Force in Kilonewtons.
            </summary>
        </member>
        <member name="P:UnitsNet.Force.KiloPonds">
            <summary>
                Get Force in KiloPonds.
            </summary>
        </member>
        <member name="P:UnitsNet.Force.Meganewtons">
            <summary>
                Get Force in Meganewtons.
            </summary>
        </member>
        <member name="P:UnitsNet.Force.Newtons">
            <summary>
                Get Force in Newtons.
            </summary>
        </member>
        <member name="P:UnitsNet.Force.Poundals">
            <summary>
                Get Force in Poundals.
            </summary>
        </member>
        <member name="P:UnitsNet.Force.PoundsForce">
            <summary>
                Get Force in PoundsForce.
            </summary>
        </member>
        <member name="P:UnitsNet.Force.TonnesForce">
            <summary>
                Get Force in TonnesForce.
            </summary>
        </member>
        <member name="P:UnitsNet.Force.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit Newton.
            </summary>
        </member>
        <member name="M:UnitsNet.Force.FromDecanewtons(UnitsNet.QuantityValue)">
            <summary>
                Get Force from Decanewtons.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Force.FromDyne(UnitsNet.QuantityValue)">
            <summary>
                Get Force from Dyne.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Force.FromKilogramsForce(UnitsNet.QuantityValue)">
            <summary>
                Get Force from KilogramsForce.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Force.FromKilonewtons(UnitsNet.QuantityValue)">
            <summary>
                Get Force from Kilonewtons.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Force.FromKiloPonds(UnitsNet.QuantityValue)">
            <summary>
                Get Force from KiloPonds.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Force.FromMeganewtons(UnitsNet.QuantityValue)">
            <summary>
                Get Force from Meganewtons.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Force.FromNewtons(UnitsNet.QuantityValue)">
            <summary>
                Get Force from Newtons.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Force.FromPoundals(UnitsNet.QuantityValue)">
            <summary>
                Get Force from Poundals.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Force.FromPoundsForce(UnitsNet.QuantityValue)">
            <summary>
                Get Force from PoundsForce.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Force.FromTonnesForce(UnitsNet.QuantityValue)">
            <summary>
                Get Force from TonnesForce.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Force.From(UnitsNet.QuantityValue,UnitsNet.Units.ForceUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.ForceUnit" /> to <see cref="T:UnitsNet.Force" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>Force unit value.</returns>
        </member>
        <member name="M:UnitsNet.Force.GetAbbreviation(UnitsNet.Units.ForceUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.Force.Equals(UnitsNet.Force,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another Force within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.Force.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current Force.</returns>
        </member>
        <member name="M:UnitsNet.Force.As(UnitsNet.Units.ForceUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Force.ToUnit(UnitsNet.Units.ForceUnit)">
            <summary>
                Converts this Force to another Force with the unit representation <paramref name="unit" />.
            </summary>
            <returns>A Force with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Force.AsBaseUnit">
            <summary>
                Converts the current value + unit to the base unit.
                This is typically the first step in converting from one unit to another.
            </summary>
            <returns>The value in the base unit representation.</returns>
        </member>
        <member name="M:UnitsNet.Force.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Force.TryParse(System.String,UnitsNet.Force@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Force.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Force.ParseInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Force.TryParseInternal(System.String,System.IFormatProvider,UnitsNet.Force@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Force.ParseUnitInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Force.TryParseUnitInternal(System.String,System.IFormatProvider,UnitsNet.Units.ForceUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Force.ToString">
            <summary>
                Get default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Force.ToString(UnitsNet.Units.ForceUnit)">
            <summary>
                Get string representation of value and unit. Using current UI culture and two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <returns>String representation.</returns>
        </member>
        <member name="P:UnitsNet.Force.MaxValue">
            <summary>
            Represents the largest possible value of Force
            </summary>
        </member>
        <member name="P:UnitsNet.Force.MinValue">
            <summary>
            Represents the smallest possible value of Force
            </summary>
        </member>
        <member name="P:UnitsNet.Force.Type">
            <summary>
                The <see cref="P:UnitsNet.Force.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Force.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.Force.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="T:UnitsNet.ForcePerLength">
            <summary>
                The magnitude of force per unit length.
            </summary>
            <summary>
                The magnitude of force per unit length.
            </summary>
        </member>
        <member name="P:UnitsNet.ForcePerLength.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.ForcePerLength.GetAbbreviation(UnitsNet.Units.ForcePerLengthUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.ForcePerLength.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.ForcePerLength.TryParse(System.String,System.IFormatProvider,UnitsNet.ForcePerLength@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ForcePerLength.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ForcePerLength.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.ForcePerLengthUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ForcePerLength.ToString(UnitsNet.Units.ForcePerLengthUnit,System.IFormatProvider)">
            <summary>
                Get string representation of value and unit. Using two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.ForcePerLength.ToString(UnitsNet.Units.ForcePerLengthUnit,System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.ForcePerLength.ToString(UnitsNet.Units.ForcePerLengthUnit,System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">Unit representation to use.</param>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
        </member>
        <member name="F:UnitsNet.ForcePerLength._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.ForcePerLength._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.ForcePerLength.Unit">
            <summary>
                The unit this quantity was constructed with -or- <see cref="P:UnitsNet.ForcePerLength.BaseUnit" /> if default ctor was used.
            </summary>
        </member>
        <member name="M:UnitsNet.ForcePerLength.#ctor(System.Double,UnitsNet.Units.ForcePerLengthUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="numericValue">The numeric value  to contruct this quantity with.</param>
            <param name="unit">The unit representation to contruct this quantity with.</param>
            <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="P:UnitsNet.ForcePerLength.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.ForcePerLength.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ForcePerLength.BaseUnit">
            <summary>
                The base unit of ForcePerLength, which is NewtonPerMeter. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.ForcePerLength.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.ForcePerLength.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ForcePerLength.Units">
            <summary>
                All units of measurement for the ForcePerLength quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ForcePerLength.CentinewtonsPerMeter">
            <summary>
                Get ForcePerLength in CentinewtonsPerMeter.
            </summary>
        </member>
        <member name="P:UnitsNet.ForcePerLength.DecinewtonsPerMeter">
            <summary>
                Get ForcePerLength in DecinewtonsPerMeter.
            </summary>
        </member>
        <member name="P:UnitsNet.ForcePerLength.KilogramsForcePerMeter">
            <summary>
                Get ForcePerLength in KilogramsForcePerMeter.
            </summary>
        </member>
        <member name="P:UnitsNet.ForcePerLength.KilonewtonsPerMeter">
            <summary>
                Get ForcePerLength in KilonewtonsPerMeter.
            </summary>
        </member>
        <member name="P:UnitsNet.ForcePerLength.MeganewtonsPerMeter">
            <summary>
                Get ForcePerLength in MeganewtonsPerMeter.
            </summary>
        </member>
        <member name="P:UnitsNet.ForcePerLength.MicronewtonsPerMeter">
            <summary>
                Get ForcePerLength in MicronewtonsPerMeter.
            </summary>
        </member>
        <member name="P:UnitsNet.ForcePerLength.MillinewtonsPerMeter">
            <summary>
                Get ForcePerLength in MillinewtonsPerMeter.
            </summary>
        </member>
        <member name="P:UnitsNet.ForcePerLength.NanonewtonsPerMeter">
            <summary>
                Get ForcePerLength in NanonewtonsPerMeter.
            </summary>
        </member>
        <member name="P:UnitsNet.ForcePerLength.NewtonsPerMeter">
            <summary>
                Get ForcePerLength in NewtonsPerMeter.
            </summary>
        </member>
        <member name="P:UnitsNet.ForcePerLength.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit NewtonPerMeter.
            </summary>
        </member>
        <member name="M:UnitsNet.ForcePerLength.FromCentinewtonsPerMeter(UnitsNet.QuantityValue)">
            <summary>
                Get ForcePerLength from CentinewtonsPerMeter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ForcePerLength.FromDecinewtonsPerMeter(UnitsNet.QuantityValue)">
            <summary>
                Get ForcePerLength from DecinewtonsPerMeter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ForcePerLength.FromKilogramsForcePerMeter(UnitsNet.QuantityValue)">
            <summary>
                Get ForcePerLength from KilogramsForcePerMeter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ForcePerLength.FromKilonewtonsPerMeter(UnitsNet.QuantityValue)">
            <summary>
                Get ForcePerLength from KilonewtonsPerMeter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ForcePerLength.FromMeganewtonsPerMeter(UnitsNet.QuantityValue)">
            <summary>
                Get ForcePerLength from MeganewtonsPerMeter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ForcePerLength.FromMicronewtonsPerMeter(UnitsNet.QuantityValue)">
            <summary>
                Get ForcePerLength from MicronewtonsPerMeter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ForcePerLength.FromMillinewtonsPerMeter(UnitsNet.QuantityValue)">
            <summary>
                Get ForcePerLength from MillinewtonsPerMeter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ForcePerLength.FromNanonewtonsPerMeter(UnitsNet.QuantityValue)">
            <summary>
                Get ForcePerLength from NanonewtonsPerMeter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ForcePerLength.FromNewtonsPerMeter(UnitsNet.QuantityValue)">
            <summary>
                Get ForcePerLength from NewtonsPerMeter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ForcePerLength.From(UnitsNet.QuantityValue,UnitsNet.Units.ForcePerLengthUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.ForcePerLengthUnit" /> to <see cref="T:UnitsNet.ForcePerLength" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>ForcePerLength unit value.</returns>
        </member>
        <member name="M:UnitsNet.ForcePerLength.GetAbbreviation(UnitsNet.Units.ForcePerLengthUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.ForcePerLength.Equals(UnitsNet.ForcePerLength,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another ForcePerLength within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.ForcePerLength.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current ForcePerLength.</returns>
        </member>
        <member name="M:UnitsNet.ForcePerLength.As(UnitsNet.Units.ForcePerLengthUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ForcePerLength.ToUnit(UnitsNet.Units.ForcePerLengthUnit)">
            <summary>
                Converts this ForcePerLength to another ForcePerLength with the unit representation <paramref name="unit" />.
            </summary>
            <returns>A ForcePerLength with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ForcePerLength.AsBaseUnit">
            <summary>
                Converts the current value + unit to the base unit.
                This is typically the first step in converting from one unit to another.
            </summary>
            <returns>The value in the base unit representation.</returns>
        </member>
        <member name="M:UnitsNet.ForcePerLength.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.ForcePerLength.TryParse(System.String,UnitsNet.ForcePerLength@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ForcePerLength.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ForcePerLength.ParseInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.ForcePerLength.TryParseInternal(System.String,System.IFormatProvider,UnitsNet.ForcePerLength@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ForcePerLength.ParseUnitInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ForcePerLength.TryParseUnitInternal(System.String,System.IFormatProvider,UnitsNet.Units.ForcePerLengthUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ForcePerLength.ToString">
            <summary>
                Get default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.ForcePerLength.ToString(UnitsNet.Units.ForcePerLengthUnit)">
            <summary>
                Get string representation of value and unit. Using current UI culture and two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <returns>String representation.</returns>
        </member>
        <member name="P:UnitsNet.ForcePerLength.MaxValue">
            <summary>
            Represents the largest possible value of ForcePerLength
            </summary>
        </member>
        <member name="P:UnitsNet.ForcePerLength.MinValue">
            <summary>
            Represents the smallest possible value of ForcePerLength
            </summary>
        </member>
        <member name="P:UnitsNet.ForcePerLength.Type">
            <summary>
                The <see cref="P:UnitsNet.ForcePerLength.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ForcePerLength.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.ForcePerLength.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="T:UnitsNet.HeatFlux">
            <summary>
                Heat flux is the flow of energy per unit of area per unit of time
            </summary>
            <summary>
                Heat flux is the flow of energy per unit of area per unit of time
            </summary>
        </member>
        <member name="P:UnitsNet.HeatFlux.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.HeatFlux.GetAbbreviation(UnitsNet.Units.HeatFluxUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.HeatFlux.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.HeatFlux.TryParse(System.String,System.IFormatProvider,UnitsNet.HeatFlux@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.HeatFlux.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.HeatFlux.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.HeatFluxUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.HeatFlux.ToString(UnitsNet.Units.HeatFluxUnit,System.IFormatProvider)">
            <summary>
                Get string representation of value and unit. Using two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.HeatFlux.ToString(UnitsNet.Units.HeatFluxUnit,System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.HeatFlux.ToString(UnitsNet.Units.HeatFluxUnit,System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">Unit representation to use.</param>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
        </member>
        <member name="F:UnitsNet.HeatFlux._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.HeatFlux._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.HeatFlux.Unit">
            <summary>
                The unit this quantity was constructed with -or- <see cref="P:UnitsNet.HeatFlux.BaseUnit" /> if default ctor was used.
            </summary>
        </member>
        <member name="M:UnitsNet.HeatFlux.#ctor(System.Double,UnitsNet.Units.HeatFluxUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="numericValue">The numeric value  to contruct this quantity with.</param>
            <param name="unit">The unit representation to contruct this quantity with.</param>
            <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="P:UnitsNet.HeatFlux.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.HeatFlux.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.HeatFlux.BaseUnit">
            <summary>
                The base unit of HeatFlux, which is WattPerSquareMeter. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.HeatFlux.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.HeatFlux.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.HeatFlux.Units">
            <summary>
                All units of measurement for the HeatFlux quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.HeatFlux.BtusPerHourSquareFoot">
            <summary>
                Get HeatFlux in BtusPerHourSquareFoot.
            </summary>
        </member>
        <member name="P:UnitsNet.HeatFlux.BtusPerMinuteSquareFoot">
            <summary>
                Get HeatFlux in BtusPerMinuteSquareFoot.
            </summary>
        </member>
        <member name="P:UnitsNet.HeatFlux.BtusPerSecondSquareFoot">
            <summary>
                Get HeatFlux in BtusPerSecondSquareFoot.
            </summary>
        </member>
        <member name="P:UnitsNet.HeatFlux.BtusPerSecondSquareInch">
            <summary>
                Get HeatFlux in BtusPerSecondSquareInch.
            </summary>
        </member>
        <member name="P:UnitsNet.HeatFlux.CaloriesPerSecondSquareCentimeter">
            <summary>
                Get HeatFlux in CaloriesPerSecondSquareCentimeter.
            </summary>
        </member>
        <member name="P:UnitsNet.HeatFlux.CentiwattsPerSquareMeter">
            <summary>
                Get HeatFlux in CentiwattsPerSquareMeter.
            </summary>
        </member>
        <member name="P:UnitsNet.HeatFlux.DeciwattsPerSquareMeter">
            <summary>
                Get HeatFlux in DeciwattsPerSquareMeter.
            </summary>
        </member>
        <member name="P:UnitsNet.HeatFlux.KilocaloriesPerHourSquareMeter">
            <summary>
                Get HeatFlux in KilocaloriesPerHourSquareMeter.
            </summary>
        </member>
        <member name="P:UnitsNet.HeatFlux.KilocaloriesPerSecondSquareCentimeter">
            <summary>
                Get HeatFlux in KilocaloriesPerSecondSquareCentimeter.
            </summary>
        </member>
        <member name="P:UnitsNet.HeatFlux.KilowattsPerSquareMeter">
            <summary>
                Get HeatFlux in KilowattsPerSquareMeter.
            </summary>
        </member>
        <member name="P:UnitsNet.HeatFlux.MicrowattsPerSquareMeter">
            <summary>
                Get HeatFlux in MicrowattsPerSquareMeter.
            </summary>
        </member>
        <member name="P:UnitsNet.HeatFlux.MilliwattsPerSquareMeter">
            <summary>
                Get HeatFlux in MilliwattsPerSquareMeter.
            </summary>
        </member>
        <member name="P:UnitsNet.HeatFlux.NanowattsPerSquareMeter">
            <summary>
                Get HeatFlux in NanowattsPerSquareMeter.
            </summary>
        </member>
        <member name="P:UnitsNet.HeatFlux.WattsPerSquareFoot">
            <summary>
                Get HeatFlux in WattsPerSquareFoot.
            </summary>
        </member>
        <member name="P:UnitsNet.HeatFlux.WattsPerSquareInch">
            <summary>
                Get HeatFlux in WattsPerSquareInch.
            </summary>
        </member>
        <member name="P:UnitsNet.HeatFlux.WattsPerSquareMeter">
            <summary>
                Get HeatFlux in WattsPerSquareMeter.
            </summary>
        </member>
        <member name="P:UnitsNet.HeatFlux.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit WattPerSquareMeter.
            </summary>
        </member>
        <member name="M:UnitsNet.HeatFlux.FromBtusPerHourSquareFoot(UnitsNet.QuantityValue)">
            <summary>
                Get HeatFlux from BtusPerHourSquareFoot.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.HeatFlux.FromBtusPerMinuteSquareFoot(UnitsNet.QuantityValue)">
            <summary>
                Get HeatFlux from BtusPerMinuteSquareFoot.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.HeatFlux.FromBtusPerSecondSquareFoot(UnitsNet.QuantityValue)">
            <summary>
                Get HeatFlux from BtusPerSecondSquareFoot.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.HeatFlux.FromBtusPerSecondSquareInch(UnitsNet.QuantityValue)">
            <summary>
                Get HeatFlux from BtusPerSecondSquareInch.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.HeatFlux.FromCaloriesPerSecondSquareCentimeter(UnitsNet.QuantityValue)">
            <summary>
                Get HeatFlux from CaloriesPerSecondSquareCentimeter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.HeatFlux.FromCentiwattsPerSquareMeter(UnitsNet.QuantityValue)">
            <summary>
                Get HeatFlux from CentiwattsPerSquareMeter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.HeatFlux.FromDeciwattsPerSquareMeter(UnitsNet.QuantityValue)">
            <summary>
                Get HeatFlux from DeciwattsPerSquareMeter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.HeatFlux.FromKilocaloriesPerHourSquareMeter(UnitsNet.QuantityValue)">
            <summary>
                Get HeatFlux from KilocaloriesPerHourSquareMeter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.HeatFlux.FromKilocaloriesPerSecondSquareCentimeter(UnitsNet.QuantityValue)">
            <summary>
                Get HeatFlux from KilocaloriesPerSecondSquareCentimeter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.HeatFlux.FromKilowattsPerSquareMeter(UnitsNet.QuantityValue)">
            <summary>
                Get HeatFlux from KilowattsPerSquareMeter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.HeatFlux.FromMicrowattsPerSquareMeter(UnitsNet.QuantityValue)">
            <summary>
                Get HeatFlux from MicrowattsPerSquareMeter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.HeatFlux.FromMilliwattsPerSquareMeter(UnitsNet.QuantityValue)">
            <summary>
                Get HeatFlux from MilliwattsPerSquareMeter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.HeatFlux.FromNanowattsPerSquareMeter(UnitsNet.QuantityValue)">
            <summary>
                Get HeatFlux from NanowattsPerSquareMeter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.HeatFlux.FromWattsPerSquareFoot(UnitsNet.QuantityValue)">
            <summary>
                Get HeatFlux from WattsPerSquareFoot.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.HeatFlux.FromWattsPerSquareInch(UnitsNet.QuantityValue)">
            <summary>
                Get HeatFlux from WattsPerSquareInch.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.HeatFlux.FromWattsPerSquareMeter(UnitsNet.QuantityValue)">
            <summary>
                Get HeatFlux from WattsPerSquareMeter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.HeatFlux.From(UnitsNet.QuantityValue,UnitsNet.Units.HeatFluxUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.HeatFluxUnit" /> to <see cref="T:UnitsNet.HeatFlux" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>HeatFlux unit value.</returns>
        </member>
        <member name="M:UnitsNet.HeatFlux.GetAbbreviation(UnitsNet.Units.HeatFluxUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.HeatFlux.Equals(UnitsNet.HeatFlux,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another HeatFlux within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.HeatFlux.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current HeatFlux.</returns>
        </member>
        <member name="M:UnitsNet.HeatFlux.As(UnitsNet.Units.HeatFluxUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.HeatFlux.ToUnit(UnitsNet.Units.HeatFluxUnit)">
            <summary>
                Converts this HeatFlux to another HeatFlux with the unit representation <paramref name="unit" />.
            </summary>
            <returns>A HeatFlux with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.HeatFlux.AsBaseUnit">
            <summary>
                Converts the current value + unit to the base unit.
                This is typically the first step in converting from one unit to another.
            </summary>
            <returns>The value in the base unit representation.</returns>
        </member>
        <member name="M:UnitsNet.HeatFlux.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.HeatFlux.TryParse(System.String,UnitsNet.HeatFlux@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.HeatFlux.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.HeatFlux.ParseInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.HeatFlux.TryParseInternal(System.String,System.IFormatProvider,UnitsNet.HeatFlux@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.HeatFlux.ParseUnitInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.HeatFlux.TryParseUnitInternal(System.String,System.IFormatProvider,UnitsNet.Units.HeatFluxUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.HeatFlux.ToString">
            <summary>
                Get default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.HeatFlux.ToString(UnitsNet.Units.HeatFluxUnit)">
            <summary>
                Get string representation of value and unit. Using current UI culture and two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <returns>String representation.</returns>
        </member>
        <member name="P:UnitsNet.HeatFlux.MaxValue">
            <summary>
            Represents the largest possible value of HeatFlux
            </summary>
        </member>
        <member name="P:UnitsNet.HeatFlux.MinValue">
            <summary>
            Represents the smallest possible value of HeatFlux
            </summary>
        </member>
        <member name="P:UnitsNet.HeatFlux.Type">
            <summary>
                The <see cref="P:UnitsNet.HeatFlux.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.HeatFlux.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.HeatFlux.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="T:UnitsNet.KinematicViscosity">
            <summary>
                The viscosity of a fluid is a measure of its resistance to gradual deformation by shear stress or tensile stress.
            </summary>
            <summary>
                The viscosity of a fluid is a measure of its resistance to gradual deformation by shear stress or tensile stress.
            </summary>
        </member>
        <member name="P:UnitsNet.KinematicViscosity.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.KinematicViscosity.GetAbbreviation(UnitsNet.Units.KinematicViscosityUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.KinematicViscosity.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.KinematicViscosity.TryParse(System.String,System.IFormatProvider,UnitsNet.KinematicViscosity@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.KinematicViscosity.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.KinematicViscosity.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.KinematicViscosityUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.KinematicViscosity.ToString(UnitsNet.Units.KinematicViscosityUnit,System.IFormatProvider)">
            <summary>
                Get string representation of value and unit. Using two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.KinematicViscosity.ToString(UnitsNet.Units.KinematicViscosityUnit,System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.KinematicViscosity.ToString(UnitsNet.Units.KinematicViscosityUnit,System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">Unit representation to use.</param>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
        </member>
        <member name="F:UnitsNet.KinematicViscosity._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.KinematicViscosity._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.KinematicViscosity.Unit">
            <summary>
                The unit this quantity was constructed with -or- <see cref="P:UnitsNet.KinematicViscosity.BaseUnit" /> if default ctor was used.
            </summary>
        </member>
        <member name="M:UnitsNet.KinematicViscosity.#ctor(System.Double,UnitsNet.Units.KinematicViscosityUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="numericValue">The numeric value  to contruct this quantity with.</param>
            <param name="unit">The unit representation to contruct this quantity with.</param>
            <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="P:UnitsNet.KinematicViscosity.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.KinematicViscosity.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.KinematicViscosity.BaseUnit">
            <summary>
                The base unit of KinematicViscosity, which is SquareMeterPerSecond. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.KinematicViscosity.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.KinematicViscosity.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.KinematicViscosity.Units">
            <summary>
                All units of measurement for the KinematicViscosity quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.KinematicViscosity.Centistokes">
            <summary>
                Get KinematicViscosity in Centistokes.
            </summary>
        </member>
        <member name="P:UnitsNet.KinematicViscosity.Decistokes">
            <summary>
                Get KinematicViscosity in Decistokes.
            </summary>
        </member>
        <member name="P:UnitsNet.KinematicViscosity.Kilostokes">
            <summary>
                Get KinematicViscosity in Kilostokes.
            </summary>
        </member>
        <member name="P:UnitsNet.KinematicViscosity.Microstokes">
            <summary>
                Get KinematicViscosity in Microstokes.
            </summary>
        </member>
        <member name="P:UnitsNet.KinematicViscosity.Millistokes">
            <summary>
                Get KinematicViscosity in Millistokes.
            </summary>
        </member>
        <member name="P:UnitsNet.KinematicViscosity.Nanostokes">
            <summary>
                Get KinematicViscosity in Nanostokes.
            </summary>
        </member>
        <member name="P:UnitsNet.KinematicViscosity.SquareMetersPerSecond">
            <summary>
                Get KinematicViscosity in SquareMetersPerSecond.
            </summary>
        </member>
        <member name="P:UnitsNet.KinematicViscosity.Stokes">
            <summary>
                Get KinematicViscosity in Stokes.
            </summary>
        </member>
        <member name="P:UnitsNet.KinematicViscosity.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit SquareMeterPerSecond.
            </summary>
        </member>
        <member name="M:UnitsNet.KinematicViscosity.FromCentistokes(UnitsNet.QuantityValue)">
            <summary>
                Get KinematicViscosity from Centistokes.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.KinematicViscosity.FromDecistokes(UnitsNet.QuantityValue)">
            <summary>
                Get KinematicViscosity from Decistokes.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.KinematicViscosity.FromKilostokes(UnitsNet.QuantityValue)">
            <summary>
                Get KinematicViscosity from Kilostokes.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.KinematicViscosity.FromMicrostokes(UnitsNet.QuantityValue)">
            <summary>
                Get KinematicViscosity from Microstokes.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.KinematicViscosity.FromMillistokes(UnitsNet.QuantityValue)">
            <summary>
                Get KinematicViscosity from Millistokes.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.KinematicViscosity.FromNanostokes(UnitsNet.QuantityValue)">
            <summary>
                Get KinematicViscosity from Nanostokes.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.KinematicViscosity.FromSquareMetersPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Get KinematicViscosity from SquareMetersPerSecond.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.KinematicViscosity.FromStokes(UnitsNet.QuantityValue)">
            <summary>
                Get KinematicViscosity from Stokes.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.KinematicViscosity.From(UnitsNet.QuantityValue,UnitsNet.Units.KinematicViscosityUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.KinematicViscosityUnit" /> to <see cref="T:UnitsNet.KinematicViscosity" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>KinematicViscosity unit value.</returns>
        </member>
        <member name="M:UnitsNet.KinematicViscosity.GetAbbreviation(UnitsNet.Units.KinematicViscosityUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.KinematicViscosity.Equals(UnitsNet.KinematicViscosity,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another KinematicViscosity within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.KinematicViscosity.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current KinematicViscosity.</returns>
        </member>
        <member name="M:UnitsNet.KinematicViscosity.As(UnitsNet.Units.KinematicViscosityUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.KinematicViscosity.ToUnit(UnitsNet.Units.KinematicViscosityUnit)">
            <summary>
                Converts this KinematicViscosity to another KinematicViscosity with the unit representation <paramref name="unit" />.
            </summary>
            <returns>A KinematicViscosity with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.KinematicViscosity.AsBaseUnit">
            <summary>
                Converts the current value + unit to the base unit.
                This is typically the first step in converting from one unit to another.
            </summary>
            <returns>The value in the base unit representation.</returns>
        </member>
        <member name="M:UnitsNet.KinematicViscosity.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.KinematicViscosity.TryParse(System.String,UnitsNet.KinematicViscosity@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.KinematicViscosity.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.KinematicViscosity.ParseInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.KinematicViscosity.TryParseInternal(System.String,System.IFormatProvider,UnitsNet.KinematicViscosity@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.KinematicViscosity.ParseUnitInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.KinematicViscosity.TryParseUnitInternal(System.String,System.IFormatProvider,UnitsNet.Units.KinematicViscosityUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.KinematicViscosity.ToString">
            <summary>
                Get default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.KinematicViscosity.ToString(UnitsNet.Units.KinematicViscosityUnit)">
            <summary>
                Get string representation of value and unit. Using current UI culture and two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <returns>String representation.</returns>
        </member>
        <member name="P:UnitsNet.KinematicViscosity.MaxValue">
            <summary>
            Represents the largest possible value of KinematicViscosity
            </summary>
        </member>
        <member name="P:UnitsNet.KinematicViscosity.MinValue">
            <summary>
            Represents the smallest possible value of KinematicViscosity
            </summary>
        </member>
        <member name="P:UnitsNet.KinematicViscosity.Type">
            <summary>
                The <see cref="P:UnitsNet.KinematicViscosity.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.KinematicViscosity.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.KinematicViscosity.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="T:UnitsNet.LapseRate">
            <summary>
                Lapse rate is the rate at which Earth's atmospheric temperature decreases with an increase in altitude, or increases with the decrease in altitude.
            </summary>
            <summary>
                Lapse rate is the rate at which Earth's atmospheric temperature decreases with an increase in altitude, or increases with the decrease in altitude.
            </summary>
        </member>
        <member name="P:UnitsNet.LapseRate.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.LapseRate.GetAbbreviation(UnitsNet.Units.LapseRateUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.LapseRate.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.LapseRate.TryParse(System.String,System.IFormatProvider,UnitsNet.LapseRate@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.LapseRate.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.LapseRate.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.LapseRateUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.LapseRate.ToString(UnitsNet.Units.LapseRateUnit,System.IFormatProvider)">
            <summary>
                Get string representation of value and unit. Using two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.LapseRate.ToString(UnitsNet.Units.LapseRateUnit,System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.LapseRate.ToString(UnitsNet.Units.LapseRateUnit,System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">Unit representation to use.</param>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
        </member>
        <member name="F:UnitsNet.LapseRate._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.LapseRate._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.LapseRate.Unit">
            <summary>
                The unit this quantity was constructed with -or- <see cref="P:UnitsNet.LapseRate.BaseUnit" /> if default ctor was used.
            </summary>
        </member>
        <member name="M:UnitsNet.LapseRate.#ctor(System.Double,UnitsNet.Units.LapseRateUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="numericValue">The numeric value  to contruct this quantity with.</param>
            <param name="unit">The unit representation to contruct this quantity with.</param>
            <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="P:UnitsNet.LapseRate.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.LapseRate.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.LapseRate.BaseUnit">
            <summary>
                The base unit of LapseRate, which is DegreeCelsiusPerKilometer. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.LapseRate.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.LapseRate.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.LapseRate.Units">
            <summary>
                All units of measurement for the LapseRate quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.LapseRate.DegreesCelciusPerKilometer">
            <summary>
                Get LapseRate in DegreesCelciusPerKilometer.
            </summary>
        </member>
        <member name="P:UnitsNet.LapseRate.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit DegreeCelsiusPerKilometer.
            </summary>
        </member>
        <member name="M:UnitsNet.LapseRate.FromDegreesCelciusPerKilometer(UnitsNet.QuantityValue)">
            <summary>
                Get LapseRate from DegreesCelciusPerKilometer.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.LapseRate.From(UnitsNet.QuantityValue,UnitsNet.Units.LapseRateUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.LapseRateUnit" /> to <see cref="T:UnitsNet.LapseRate" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>LapseRate unit value.</returns>
        </member>
        <member name="M:UnitsNet.LapseRate.GetAbbreviation(UnitsNet.Units.LapseRateUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.LapseRate.Equals(UnitsNet.LapseRate,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another LapseRate within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.LapseRate.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current LapseRate.</returns>
        </member>
        <member name="M:UnitsNet.LapseRate.As(UnitsNet.Units.LapseRateUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.LapseRate.ToUnit(UnitsNet.Units.LapseRateUnit)">
            <summary>
                Converts this LapseRate to another LapseRate with the unit representation <paramref name="unit" />.
            </summary>
            <returns>A LapseRate with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.LapseRate.AsBaseUnit">
            <summary>
                Converts the current value + unit to the base unit.
                This is typically the first step in converting from one unit to another.
            </summary>
            <returns>The value in the base unit representation.</returns>
        </member>
        <member name="M:UnitsNet.LapseRate.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.LapseRate.TryParse(System.String,UnitsNet.LapseRate@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.LapseRate.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.LapseRate.ParseInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.LapseRate.TryParseInternal(System.String,System.IFormatProvider,UnitsNet.LapseRate@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.LapseRate.ParseUnitInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.LapseRate.TryParseUnitInternal(System.String,System.IFormatProvider,UnitsNet.Units.LapseRateUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.LapseRate.ToString">
            <summary>
                Get default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.LapseRate.ToString(UnitsNet.Units.LapseRateUnit)">
            <summary>
                Get string representation of value and unit. Using current UI culture and two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <returns>String representation.</returns>
        </member>
        <member name="P:UnitsNet.LapseRate.MaxValue">
            <summary>
            Represents the largest possible value of LapseRate
            </summary>
        </member>
        <member name="P:UnitsNet.LapseRate.MinValue">
            <summary>
            Represents the smallest possible value of LapseRate
            </summary>
        </member>
        <member name="P:UnitsNet.LapseRate.Type">
            <summary>
                The <see cref="P:UnitsNet.LapseRate.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.LapseRate.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.LapseRate.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="T:UnitsNet.Length">
            <summary>
                Many different units of length have been used around the world. The main units in modern use are U.S. customary units in the United States and the Metric system elsewhere. British Imperial units are still used for some purposes in the United Kingdom and some other countries. The metric system is sub-divided into SI and non-SI units.
            </summary>
            <summary>
                Many different units of length have been used around the world. The main units in modern use are U.S. customary units in the United States and the Metric system elsewhere. British Imperial units are still used for some purposes in the United Kingdom and some other countries. The metric system is sub-divided into SI and non-SI units.
            </summary>
        </member>
        <member name="P:UnitsNet.Length.FeetInches">
            <summary>
                Converts the length to a customary feet/inches combination.
            </summary>
        </member>
        <member name="M:UnitsNet.Length.FromFeetInches(System.Double,System.Double)">
            <summary>
                Get length from combination of feet and inches.
            </summary>
        </member>
        <member name="P:UnitsNet.Length.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.Length.GetAbbreviation(UnitsNet.Units.LengthUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.Length.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Length.TryParse(System.String,System.IFormatProvider,UnitsNet.Length@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Length.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Length.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.LengthUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Length.ToString(UnitsNet.Units.LengthUnit,System.IFormatProvider)">
            <summary>
                Get string representation of value and unit. Using two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Length.ToString(UnitsNet.Units.LengthUnit,System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Length.ToString(UnitsNet.Units.LengthUnit,System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">Unit representation to use.</param>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
        </member>
        <member name="F:UnitsNet.Length._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.Length._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.Length.Unit">
            <summary>
                The unit this quantity was constructed with -or- <see cref="P:UnitsNet.Length.BaseUnit" /> if default ctor was used.
            </summary>
        </member>
        <member name="M:UnitsNet.Length.#ctor(System.Double,UnitsNet.Units.LengthUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="numericValue">The numeric value  to contruct this quantity with.</param>
            <param name="unit">The unit representation to contruct this quantity with.</param>
            <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="P:UnitsNet.Length.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.Length.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Length.BaseUnit">
            <summary>
                The base unit of Length, which is Meter. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.Length.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.Length.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Length.Units">
            <summary>
                All units of measurement for the Length quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Length.Centimeters">
            <summary>
                Get Length in Centimeters.
            </summary>
        </member>
        <member name="P:UnitsNet.Length.Decimeters">
            <summary>
                Get Length in Decimeters.
            </summary>
        </member>
        <member name="P:UnitsNet.Length.DtpPicas">
            <summary>
                Get Length in DtpPicas.
            </summary>
        </member>
        <member name="P:UnitsNet.Length.DtpPoints">
            <summary>
                Get Length in DtpPoints.
            </summary>
        </member>
        <member name="P:UnitsNet.Length.Fathoms">
            <summary>
                Get Length in Fathoms.
            </summary>
        </member>
        <member name="P:UnitsNet.Length.Feet">
            <summary>
                Get Length in Feet.
            </summary>
        </member>
        <member name="P:UnitsNet.Length.Inches">
            <summary>
                Get Length in Inches.
            </summary>
        </member>
        <member name="P:UnitsNet.Length.Kilometers">
            <summary>
                Get Length in Kilometers.
            </summary>
        </member>
        <member name="P:UnitsNet.Length.Meters">
            <summary>
                Get Length in Meters.
            </summary>
        </member>
        <member name="P:UnitsNet.Length.Microinches">
            <summary>
                Get Length in Microinches.
            </summary>
        </member>
        <member name="P:UnitsNet.Length.Micrometers">
            <summary>
                Get Length in Micrometers.
            </summary>
        </member>
        <member name="P:UnitsNet.Length.Mils">
            <summary>
                Get Length in Mils.
            </summary>
        </member>
        <member name="P:UnitsNet.Length.Miles">
            <summary>
                Get Length in Miles.
            </summary>
        </member>
        <member name="P:UnitsNet.Length.Millimeters">
            <summary>
                Get Length in Millimeters.
            </summary>
        </member>
        <member name="P:UnitsNet.Length.Nanometers">
            <summary>
                Get Length in Nanometers.
            </summary>
        </member>
        <member name="P:UnitsNet.Length.NauticalMiles">
            <summary>
                Get Length in NauticalMiles.
            </summary>
        </member>
        <member name="P:UnitsNet.Length.PrinterPicas">
            <summary>
                Get Length in PrinterPicas.
            </summary>
        </member>
        <member name="P:UnitsNet.Length.PrinterPoints">
            <summary>
                Get Length in PrinterPoints.
            </summary>
        </member>
        <member name="P:UnitsNet.Length.Shackles">
            <summary>
                Get Length in Shackles.
            </summary>
        </member>
        <member name="P:UnitsNet.Length.Twips">
            <summary>
                Get Length in Twips.
            </summary>
        </member>
        <member name="P:UnitsNet.Length.UsSurveyFeet">
            <summary>
                Get Length in UsSurveyFeet.
            </summary>
        </member>
        <member name="P:UnitsNet.Length.Yards">
            <summary>
                Get Length in Yards.
            </summary>
        </member>
        <member name="P:UnitsNet.Length.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit Meter.
            </summary>
        </member>
        <member name="M:UnitsNet.Length.FromCentimeters(UnitsNet.QuantityValue)">
            <summary>
                Get Length from Centimeters.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Length.FromDecimeters(UnitsNet.QuantityValue)">
            <summary>
                Get Length from Decimeters.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Length.FromDtpPicas(UnitsNet.QuantityValue)">
            <summary>
                Get Length from DtpPicas.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Length.FromDtpPoints(UnitsNet.QuantityValue)">
            <summary>
                Get Length from DtpPoints.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Length.FromFathoms(UnitsNet.QuantityValue)">
            <summary>
                Get Length from Fathoms.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Length.FromFeet(UnitsNet.QuantityValue)">
            <summary>
                Get Length from Feet.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Length.FromInches(UnitsNet.QuantityValue)">
            <summary>
                Get Length from Inches.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Length.FromKilometers(UnitsNet.QuantityValue)">
            <summary>
                Get Length from Kilometers.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Length.FromMeters(UnitsNet.QuantityValue)">
            <summary>
                Get Length from Meters.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Length.FromMicroinches(UnitsNet.QuantityValue)">
            <summary>
                Get Length from Microinches.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Length.FromMicrometers(UnitsNet.QuantityValue)">
            <summary>
                Get Length from Micrometers.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Length.FromMils(UnitsNet.QuantityValue)">
            <summary>
                Get Length from Mils.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Length.FromMiles(UnitsNet.QuantityValue)">
            <summary>
                Get Length from Miles.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Length.FromMillimeters(UnitsNet.QuantityValue)">
            <summary>
                Get Length from Millimeters.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Length.FromNanometers(UnitsNet.QuantityValue)">
            <summary>
                Get Length from Nanometers.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Length.FromNauticalMiles(UnitsNet.QuantityValue)">
            <summary>
                Get Length from NauticalMiles.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Length.FromPrinterPicas(UnitsNet.QuantityValue)">
            <summary>
                Get Length from PrinterPicas.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Length.FromPrinterPoints(UnitsNet.QuantityValue)">
            <summary>
                Get Length from PrinterPoints.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Length.FromShackles(UnitsNet.QuantityValue)">
            <summary>
                Get Length from Shackles.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Length.FromTwips(UnitsNet.QuantityValue)">
            <summary>
                Get Length from Twips.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Length.FromUsSurveyFeet(UnitsNet.QuantityValue)">
            <summary>
                Get Length from UsSurveyFeet.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Length.FromYards(UnitsNet.QuantityValue)">
            <summary>
                Get Length from Yards.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Length.From(UnitsNet.QuantityValue,UnitsNet.Units.LengthUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.LengthUnit" /> to <see cref="T:UnitsNet.Length" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>Length unit value.</returns>
        </member>
        <member name="M:UnitsNet.Length.GetAbbreviation(UnitsNet.Units.LengthUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.Length.Equals(UnitsNet.Length,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another Length within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.Length.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current Length.</returns>
        </member>
        <member name="M:UnitsNet.Length.As(UnitsNet.Units.LengthUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Length.ToUnit(UnitsNet.Units.LengthUnit)">
            <summary>
                Converts this Length to another Length with the unit representation <paramref name="unit" />.
            </summary>
            <returns>A Length with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Length.AsBaseUnit">
            <summary>
                Converts the current value + unit to the base unit.
                This is typically the first step in converting from one unit to another.
            </summary>
            <returns>The value in the base unit representation.</returns>
        </member>
        <member name="M:UnitsNet.Length.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Length.TryParse(System.String,UnitsNet.Length@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Length.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Length.ParseInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Length.TryParseInternal(System.String,System.IFormatProvider,UnitsNet.Length@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Length.ParseUnitInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Length.TryParseUnitInternal(System.String,System.IFormatProvider,UnitsNet.Units.LengthUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Length.ToString">
            <summary>
                Get default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Length.ToString(UnitsNet.Units.LengthUnit)">
            <summary>
                Get string representation of value and unit. Using current UI culture and two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <returns>String representation.</returns>
        </member>
        <member name="P:UnitsNet.Length.MaxValue">
            <summary>
            Represents the largest possible value of Length
            </summary>
        </member>
        <member name="P:UnitsNet.Length.MinValue">
            <summary>
            Represents the smallest possible value of Length
            </summary>
        </member>
        <member name="P:UnitsNet.Length.Type">
            <summary>
                The <see cref="P:UnitsNet.Length.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Length.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.Length.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="T:UnitsNet.Level">
            <summary>
                Level is the logarithm of the ratio of a quantity Q to a reference value of that quantity, Qâ‚€, expressed in dimensionless units.
            </summary>
            <summary>
                Level is the logarithm of the ratio of a quantity Q to a reference value of that quantity, Qâ‚€, expressed in dimensionless units.
            </summary>
        </member>
        <member name="M:UnitsNet.Level.#ctor(System.Double,System.Double)">
            <summary>
                Initializes a new instance of the logarithmic <see cref="T:UnitsNet.Level" /> struct which is the ratio of a quantity Q to a
                reference value of that quantity Q0.
            </summary>
            <param name="quantity">The quantity.</param>
            <param name="reference">The reference value that <paramref name="quantity" /> is compared to.</param>
        </member>
        <member name="P:UnitsNet.Level.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.Level.GetAbbreviation(UnitsNet.Units.LevelUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.Level.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Level.TryParse(System.String,System.IFormatProvider,UnitsNet.Level@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Level.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Level.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.LevelUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Level.ToString(UnitsNet.Units.LevelUnit,System.IFormatProvider)">
            <summary>
                Get string representation of value and unit. Using two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Level.ToString(UnitsNet.Units.LevelUnit,System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Level.ToString(UnitsNet.Units.LevelUnit,System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">Unit representation to use.</param>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
        </member>
        <member name="F:UnitsNet.Level._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.Level._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.Level.Unit">
            <summary>
                The unit this quantity was constructed with -or- <see cref="P:UnitsNet.Level.BaseUnit" /> if default ctor was used.
            </summary>
        </member>
        <member name="M:UnitsNet.Level.#ctor(System.Double,UnitsNet.Units.LevelUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="numericValue">The numeric value  to contruct this quantity with.</param>
            <param name="unit">The unit representation to contruct this quantity with.</param>
            <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="P:UnitsNet.Level.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.Level.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Level.BaseUnit">
            <summary>
                The base unit of Level, which is Decibel. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.Level.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.Level.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Level.Units">
            <summary>
                All units of measurement for the Level quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Level.Decibels">
            <summary>
                Get Level in Decibels.
            </summary>
        </member>
        <member name="P:UnitsNet.Level.Nepers">
            <summary>
                Get Level in Nepers.
            </summary>
        </member>
        <member name="P:UnitsNet.Level.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit Decibel.
            </summary>
        </member>
        <member name="M:UnitsNet.Level.FromDecibels(UnitsNet.QuantityValue)">
            <summary>
                Get Level from Decibels.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Level.FromNepers(UnitsNet.QuantityValue)">
            <summary>
                Get Level from Nepers.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Level.From(UnitsNet.QuantityValue,UnitsNet.Units.LevelUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.LevelUnit" /> to <see cref="T:UnitsNet.Level" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>Level unit value.</returns>
        </member>
        <member name="M:UnitsNet.Level.GetAbbreviation(UnitsNet.Units.LevelUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.Level.Equals(UnitsNet.Level,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another Level within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.Level.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current Level.</returns>
        </member>
        <member name="M:UnitsNet.Level.As(UnitsNet.Units.LevelUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Level.ToUnit(UnitsNet.Units.LevelUnit)">
            <summary>
                Converts this Level to another Level with the unit representation <paramref name="unit" />.
            </summary>
            <returns>A Level with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Level.AsBaseUnit">
            <summary>
                Converts the current value + unit to the base unit.
                This is typically the first step in converting from one unit to another.
            </summary>
            <returns>The value in the base unit representation.</returns>
        </member>
        <member name="M:UnitsNet.Level.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Level.TryParse(System.String,UnitsNet.Level@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Level.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Level.ParseInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Level.TryParseInternal(System.String,System.IFormatProvider,UnitsNet.Level@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Level.ParseUnitInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Level.TryParseUnitInternal(System.String,System.IFormatProvider,UnitsNet.Units.LevelUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Level.ToString">
            <summary>
                Get default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Level.ToString(UnitsNet.Units.LevelUnit)">
            <summary>
                Get string representation of value and unit. Using current UI culture and two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <returns>String representation.</returns>
        </member>
        <member name="P:UnitsNet.Level.MaxValue">
            <summary>
            Represents the largest possible value of Level
            </summary>
        </member>
        <member name="P:UnitsNet.Level.MinValue">
            <summary>
            Represents the smallest possible value of Level
            </summary>
        </member>
        <member name="P:UnitsNet.Level.Type">
            <summary>
                The <see cref="P:UnitsNet.Level.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Level.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.Level.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="T:UnitsNet.Mass">
            <summary>
                In physics, mass (from Greek Î¼á¾¶Î¶Î± "barley cake, lump [of dough]") is a property of a physical system or body, giving rise to the phenomena of the body's resistance to being accelerated by a force and the strength of its mutual gravitational attraction with other bodies. Instruments such as mass balances or scales use those phenomena to measure mass. The SI unit of mass is the kilogram (kg).
            </summary>
            <summary>
                In physics, mass (from Greek Î¼á¾¶Î¶Î± "barley cake, lump [of dough]") is a property of a physical system or body, giving rise to the phenomena of the body's resistance to being accelerated by a force and the strength of its mutual gravitational attraction with other bodies. Instruments such as mass balances or scales use those phenomena to measure mass. The SI unit of mass is the kilogram (kg).
            </summary>
        </member>
        <member name="F:UnitsNet.Mass.StoneToPounds">
            <summary>
                StonePounds related code makes it easier to work with Stone/Pound combination, which are customarily used in the UK
                to express body weight. For example, someone weighs 11 stone 4 pounds (about 72 kilograms).
            </summary>
        </member>
        <member name="P:UnitsNet.Mass.StonePounds">
            <summary>
                Converts the mass to a customary stone/pounds combination.
            </summary>
        </member>
        <member name="M:UnitsNet.Mass.FromStonePounds(System.Double,System.Double)">
            <summary>
                Get Mass from combination of stone and pounds.
            </summary>
        </member>
        <member name="P:UnitsNet.Mass.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.Mass.GetAbbreviation(UnitsNet.Units.MassUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.Mass.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Mass.TryParse(System.String,System.IFormatProvider,UnitsNet.Mass@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Mass.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Mass.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.MassUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Mass.ToString(UnitsNet.Units.MassUnit,System.IFormatProvider)">
            <summary>
                Get string representation of value and unit. Using two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Mass.ToString(UnitsNet.Units.MassUnit,System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Mass.ToString(UnitsNet.Units.MassUnit,System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">Unit representation to use.</param>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
        </member>
        <member name="F:UnitsNet.Mass._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.Mass._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.Mass.Unit">
            <summary>
                The unit this quantity was constructed with -or- <see cref="P:UnitsNet.Mass.BaseUnit" /> if default ctor was used.
            </summary>
        </member>
        <member name="M:UnitsNet.Mass.#ctor(System.Double,UnitsNet.Units.MassUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="numericValue">The numeric value  to contruct this quantity with.</param>
            <param name="unit">The unit representation to contruct this quantity with.</param>
            <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="P:UnitsNet.Mass.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.Mass.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Mass.BaseUnit">
            <summary>
                The base unit of Mass, which is Kilogram. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.Mass.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.Mass.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Mass.Units">
            <summary>
                All units of measurement for the Mass quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Mass.Centigrams">
            <summary>
                Get Mass in Centigrams.
            </summary>
        </member>
        <member name="P:UnitsNet.Mass.Decagrams">
            <summary>
                Get Mass in Decagrams.
            </summary>
        </member>
        <member name="P:UnitsNet.Mass.Decigrams">
            <summary>
                Get Mass in Decigrams.
            </summary>
        </member>
        <member name="P:UnitsNet.Mass.Grams">
            <summary>
                Get Mass in Grams.
            </summary>
        </member>
        <member name="P:UnitsNet.Mass.Hectograms">
            <summary>
                Get Mass in Hectograms.
            </summary>
        </member>
        <member name="P:UnitsNet.Mass.Kilograms">
            <summary>
                Get Mass in Kilograms.
            </summary>
        </member>
        <member name="P:UnitsNet.Mass.Kilopounds">
            <summary>
                Get Mass in Kilopounds.
            </summary>
        </member>
        <member name="P:UnitsNet.Mass.Kilotonnes">
            <summary>
                Get Mass in Kilotonnes.
            </summary>
        </member>
        <member name="P:UnitsNet.Mass.LongHundredweight">
            <summary>
                Get Mass in LongHundredweight.
            </summary>
        </member>
        <member name="P:UnitsNet.Mass.LongTons">
            <summary>
                Get Mass in LongTons.
            </summary>
        </member>
        <member name="P:UnitsNet.Mass.Megapounds">
            <summary>
                Get Mass in Megapounds.
            </summary>
        </member>
        <member name="P:UnitsNet.Mass.Megatonnes">
            <summary>
                Get Mass in Megatonnes.
            </summary>
        </member>
        <member name="P:UnitsNet.Mass.Micrograms">
            <summary>
                Get Mass in Micrograms.
            </summary>
        </member>
        <member name="P:UnitsNet.Mass.Milligrams">
            <summary>
                Get Mass in Milligrams.
            </summary>
        </member>
        <member name="P:UnitsNet.Mass.Nanograms">
            <summary>
                Get Mass in Nanograms.
            </summary>
        </member>
        <member name="P:UnitsNet.Mass.Ounces">
            <summary>
                Get Mass in Ounces.
            </summary>
        </member>
        <member name="P:UnitsNet.Mass.Pounds">
            <summary>
                Get Mass in Pounds.
            </summary>
        </member>
        <member name="P:UnitsNet.Mass.ShortHundredweight">
            <summary>
                Get Mass in ShortHundredweight.
            </summary>
        </member>
        <member name="P:UnitsNet.Mass.ShortTons">
            <summary>
                Get Mass in ShortTons.
            </summary>
        </member>
        <member name="P:UnitsNet.Mass.Slugs">
            <summary>
                Get Mass in Slugs.
            </summary>
        </member>
        <member name="P:UnitsNet.Mass.Stone">
            <summary>
                Get Mass in Stone.
            </summary>
        </member>
        <member name="P:UnitsNet.Mass.Tonnes">
            <summary>
                Get Mass in Tonnes.
            </summary>
        </member>
        <member name="P:UnitsNet.Mass.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit Kilogram.
            </summary>
        </member>
        <member name="M:UnitsNet.Mass.FromCentigrams(UnitsNet.QuantityValue)">
            <summary>
                Get Mass from Centigrams.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Mass.FromDecagrams(UnitsNet.QuantityValue)">
            <summary>
                Get Mass from Decagrams.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Mass.FromDecigrams(UnitsNet.QuantityValue)">
            <summary>
                Get Mass from Decigrams.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Mass.FromGrams(UnitsNet.QuantityValue)">
            <summary>
                Get Mass from Grams.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Mass.FromHectograms(UnitsNet.QuantityValue)">
            <summary>
                Get Mass from Hectograms.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Mass.FromKilograms(UnitsNet.QuantityValue)">
            <summary>
                Get Mass from Kilograms.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Mass.FromKilopounds(UnitsNet.QuantityValue)">
            <summary>
                Get Mass from Kilopounds.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Mass.FromKilotonnes(UnitsNet.QuantityValue)">
            <summary>
                Get Mass from Kilotonnes.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Mass.FromLongHundredweight(UnitsNet.QuantityValue)">
            <summary>
                Get Mass from LongHundredweight.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Mass.FromLongTons(UnitsNet.QuantityValue)">
            <summary>
                Get Mass from LongTons.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Mass.FromMegapounds(UnitsNet.QuantityValue)">
            <summary>
                Get Mass from Megapounds.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Mass.FromMegatonnes(UnitsNet.QuantityValue)">
            <summary>
                Get Mass from Megatonnes.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Mass.FromMicrograms(UnitsNet.QuantityValue)">
            <summary>
                Get Mass from Micrograms.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Mass.FromMilligrams(UnitsNet.QuantityValue)">
            <summary>
                Get Mass from Milligrams.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Mass.FromNanograms(UnitsNet.QuantityValue)">
            <summary>
                Get Mass from Nanograms.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Mass.FromOunces(UnitsNet.QuantityValue)">
            <summary>
                Get Mass from Ounces.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Mass.FromPounds(UnitsNet.QuantityValue)">
            <summary>
                Get Mass from Pounds.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Mass.FromShortHundredweight(UnitsNet.QuantityValue)">
            <summary>
                Get Mass from ShortHundredweight.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Mass.FromShortTons(UnitsNet.QuantityValue)">
            <summary>
                Get Mass from ShortTons.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Mass.FromSlugs(UnitsNet.QuantityValue)">
            <summary>
                Get Mass from Slugs.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Mass.FromStone(UnitsNet.QuantityValue)">
            <summary>
                Get Mass from Stone.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Mass.FromTonnes(UnitsNet.QuantityValue)">
            <summary>
                Get Mass from Tonnes.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Mass.From(UnitsNet.QuantityValue,UnitsNet.Units.MassUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.MassUnit" /> to <see cref="T:UnitsNet.Mass" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>Mass unit value.</returns>
        </member>
        <member name="M:UnitsNet.Mass.GetAbbreviation(UnitsNet.Units.MassUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.Mass.Equals(UnitsNet.Mass,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another Mass within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.Mass.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current Mass.</returns>
        </member>
        <member name="M:UnitsNet.Mass.As(UnitsNet.Units.MassUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Mass.ToUnit(UnitsNet.Units.MassUnit)">
            <summary>
                Converts this Mass to another Mass with the unit representation <paramref name="unit" />.
            </summary>
            <returns>A Mass with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Mass.AsBaseUnit">
            <summary>
                Converts the current value + unit to the base unit.
                This is typically the first step in converting from one unit to another.
            </summary>
            <returns>The value in the base unit representation.</returns>
        </member>
        <member name="M:UnitsNet.Mass.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Mass.TryParse(System.String,UnitsNet.Mass@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Mass.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Mass.ParseInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Mass.TryParseInternal(System.String,System.IFormatProvider,UnitsNet.Mass@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Mass.ParseUnitInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Mass.TryParseUnitInternal(System.String,System.IFormatProvider,UnitsNet.Units.MassUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Mass.ToString">
            <summary>
                Get default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Mass.ToString(UnitsNet.Units.MassUnit)">
            <summary>
                Get string representation of value and unit. Using current UI culture and two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <returns>String representation.</returns>
        </member>
        <member name="P:UnitsNet.Mass.MaxValue">
            <summary>
            Represents the largest possible value of Mass
            </summary>
        </member>
        <member name="P:UnitsNet.Mass.MinValue">
            <summary>
            Represents the smallest possible value of Mass
            </summary>
        </member>
        <member name="P:UnitsNet.Mass.Type">
            <summary>
                The <see cref="P:UnitsNet.Mass.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Mass.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.Mass.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="T:UnitsNet.MassFlow">
            <summary>
                Mass flow is the ratio of the mass change to the time during which the change occurred (value of mass changes per unit time).
            </summary>
            <summary>
                Mass flow is the ratio of the mass change to the time during which the change occurred (value of mass changes per unit time).
            </summary>
        </member>
        <member name="P:UnitsNet.MassFlow.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.MassFlow.GetAbbreviation(UnitsNet.Units.MassFlowUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.MassFlow.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.MassFlow.TryParse(System.String,System.IFormatProvider,UnitsNet.MassFlow@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.MassFlow.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.MassFlow.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.MassFlowUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.MassFlow.ToString(UnitsNet.Units.MassFlowUnit,System.IFormatProvider)">
            <summary>
                Get string representation of value and unit. Using two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.MassFlow.ToString(UnitsNet.Units.MassFlowUnit,System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.MassFlow.ToString(UnitsNet.Units.MassFlowUnit,System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">Unit representation to use.</param>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
        </member>
        <member name="F:UnitsNet.MassFlow._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.MassFlow._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.MassFlow.Unit">
            <summary>
                The unit this quantity was constructed with -or- <see cref="P:UnitsNet.MassFlow.BaseUnit" /> if default ctor was used.
            </summary>
        </member>
        <member name="M:UnitsNet.MassFlow.#ctor(System.Double,UnitsNet.Units.MassFlowUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="numericValue">The numeric value  to contruct this quantity with.</param>
            <param name="unit">The unit representation to contruct this quantity with.</param>
            <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="P:UnitsNet.MassFlow.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.MassFlow.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.MassFlow.BaseUnit">
            <summary>
                The base unit of MassFlow, which is GramPerSecond. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.MassFlow.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.MassFlow.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.MassFlow.Units">
            <summary>
                All units of measurement for the MassFlow quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.MassFlow.CentigramsPerSecond">
            <summary>
                Get MassFlow in CentigramsPerSecond.
            </summary>
        </member>
        <member name="P:UnitsNet.MassFlow.DecagramsPerSecond">
            <summary>
                Get MassFlow in DecagramsPerSecond.
            </summary>
        </member>
        <member name="P:UnitsNet.MassFlow.DecigramsPerSecond">
            <summary>
                Get MassFlow in DecigramsPerSecond.
            </summary>
        </member>
        <member name="P:UnitsNet.MassFlow.GramsPerSecond">
            <summary>
                Get MassFlow in GramsPerSecond.
            </summary>
        </member>
        <member name="P:UnitsNet.MassFlow.HectogramsPerSecond">
            <summary>
                Get MassFlow in HectogramsPerSecond.
            </summary>
        </member>
        <member name="P:UnitsNet.MassFlow.KilogramsPerHour">
            <summary>
                Get MassFlow in KilogramsPerHour.
            </summary>
        </member>
        <member name="P:UnitsNet.MassFlow.KilogramsPerSecond">
            <summary>
                Get MassFlow in KilogramsPerSecond.
            </summary>
        </member>
        <member name="P:UnitsNet.MassFlow.MegapoundsPerHour">
            <summary>
                Get MassFlow in MegapoundsPerHour.
            </summary>
        </member>
        <member name="P:UnitsNet.MassFlow.MicrogramsPerSecond">
            <summary>
                Get MassFlow in MicrogramsPerSecond.
            </summary>
        </member>
        <member name="P:UnitsNet.MassFlow.MilligramsPerSecond">
            <summary>
                Get MassFlow in MilligramsPerSecond.
            </summary>
        </member>
        <member name="P:UnitsNet.MassFlow.NanogramsPerSecond">
            <summary>
                Get MassFlow in NanogramsPerSecond.
            </summary>
        </member>
        <member name="P:UnitsNet.MassFlow.PoundsPerHour">
            <summary>
                Get MassFlow in PoundsPerHour.
            </summary>
        </member>
        <member name="P:UnitsNet.MassFlow.ShortTonsPerHour">
            <summary>
                Get MassFlow in ShortTonsPerHour.
            </summary>
        </member>
        <member name="P:UnitsNet.MassFlow.TonnesPerDay">
            <summary>
                Get MassFlow in TonnesPerDay.
            </summary>
        </member>
        <member name="P:UnitsNet.MassFlow.TonnesPerHour">
            <summary>
                Get MassFlow in TonnesPerHour.
            </summary>
        </member>
        <member name="P:UnitsNet.MassFlow.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit GramPerSecond.
            </summary>
        </member>
        <member name="M:UnitsNet.MassFlow.FromCentigramsPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Get MassFlow from CentigramsPerSecond.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassFlow.FromDecagramsPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Get MassFlow from DecagramsPerSecond.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassFlow.FromDecigramsPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Get MassFlow from DecigramsPerSecond.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassFlow.FromGramsPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Get MassFlow from GramsPerSecond.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassFlow.FromHectogramsPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Get MassFlow from HectogramsPerSecond.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassFlow.FromKilogramsPerHour(UnitsNet.QuantityValue)">
            <summary>
                Get MassFlow from KilogramsPerHour.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassFlow.FromKilogramsPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Get MassFlow from KilogramsPerSecond.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassFlow.FromMegapoundsPerHour(UnitsNet.QuantityValue)">
            <summary>
                Get MassFlow from MegapoundsPerHour.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassFlow.FromMicrogramsPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Get MassFlow from MicrogramsPerSecond.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassFlow.FromMilligramsPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Get MassFlow from MilligramsPerSecond.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassFlow.FromNanogramsPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Get MassFlow from NanogramsPerSecond.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassFlow.FromPoundsPerHour(UnitsNet.QuantityValue)">
            <summary>
                Get MassFlow from PoundsPerHour.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassFlow.FromShortTonsPerHour(UnitsNet.QuantityValue)">
            <summary>
                Get MassFlow from ShortTonsPerHour.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassFlow.FromTonnesPerDay(UnitsNet.QuantityValue)">
            <summary>
                Get MassFlow from TonnesPerDay.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassFlow.FromTonnesPerHour(UnitsNet.QuantityValue)">
            <summary>
                Get MassFlow from TonnesPerHour.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassFlow.From(UnitsNet.QuantityValue,UnitsNet.Units.MassFlowUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.MassFlowUnit" /> to <see cref="T:UnitsNet.MassFlow" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>MassFlow unit value.</returns>
        </member>
        <member name="M:UnitsNet.MassFlow.GetAbbreviation(UnitsNet.Units.MassFlowUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.MassFlow.Equals(UnitsNet.MassFlow,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another MassFlow within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.MassFlow.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current MassFlow.</returns>
        </member>
        <member name="M:UnitsNet.MassFlow.As(UnitsNet.Units.MassFlowUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.MassFlow.ToUnit(UnitsNet.Units.MassFlowUnit)">
            <summary>
                Converts this MassFlow to another MassFlow with the unit representation <paramref name="unit" />.
            </summary>
            <returns>A MassFlow with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.MassFlow.AsBaseUnit">
            <summary>
                Converts the current value + unit to the base unit.
                This is typically the first step in converting from one unit to another.
            </summary>
            <returns>The value in the base unit representation.</returns>
        </member>
        <member name="M:UnitsNet.MassFlow.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.MassFlow.TryParse(System.String,UnitsNet.MassFlow@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.MassFlow.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.MassFlow.ParseInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.MassFlow.TryParseInternal(System.String,System.IFormatProvider,UnitsNet.MassFlow@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.MassFlow.ParseUnitInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.MassFlow.TryParseUnitInternal(System.String,System.IFormatProvider,UnitsNet.Units.MassFlowUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.MassFlow.ToString">
            <summary>
                Get default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.MassFlow.ToString(UnitsNet.Units.MassFlowUnit)">
            <summary>
                Get string representation of value and unit. Using current UI culture and two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <returns>String representation.</returns>
        </member>
        <member name="P:UnitsNet.MassFlow.MaxValue">
            <summary>
            Represents the largest possible value of MassFlow
            </summary>
        </member>
        <member name="P:UnitsNet.MassFlow.MinValue">
            <summary>
            Represents the smallest possible value of MassFlow
            </summary>
        </member>
        <member name="P:UnitsNet.MassFlow.Type">
            <summary>
                The <see cref="P:UnitsNet.MassFlow.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.MassFlow.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.MassFlow.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="T:UnitsNet.MassFlux">
            <summary>
                Mass flux is the mass flow rate per unit area.
            </summary>
            <summary>
                Mass flux is the mass flow rate per unit area.
            </summary>
        </member>
        <member name="P:UnitsNet.MassFlux.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.MassFlux.GetAbbreviation(UnitsNet.Units.MassFluxUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.MassFlux.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.MassFlux.TryParse(System.String,System.IFormatProvider,UnitsNet.MassFlux@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.MassFlux.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.MassFlux.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.MassFluxUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.MassFlux.ToString(UnitsNet.Units.MassFluxUnit,System.IFormatProvider)">
            <summary>
                Get string representation of value and unit. Using two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.MassFlux.ToString(UnitsNet.Units.MassFluxUnit,System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.MassFlux.ToString(UnitsNet.Units.MassFluxUnit,System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">Unit representation to use.</param>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
        </member>
        <member name="F:UnitsNet.MassFlux._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.MassFlux._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.MassFlux.Unit">
            <summary>
                The unit this quantity was constructed with -or- <see cref="P:UnitsNet.MassFlux.BaseUnit" /> if default ctor was used.
            </summary>
        </member>
        <member name="M:UnitsNet.MassFlux.#ctor(System.Double,UnitsNet.Units.MassFluxUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="numericValue">The numeric value  to contruct this quantity with.</param>
            <param name="unit">The unit representation to contruct this quantity with.</param>
            <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="P:UnitsNet.MassFlux.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.MassFlux.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.MassFlux.BaseUnit">
            <summary>
                The base unit of MassFlux, which is KilogramPerSecondPerSquareMeter. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.MassFlux.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.MassFlux.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.MassFlux.Units">
            <summary>
                All units of measurement for the MassFlux quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.MassFlux.GramsPerSecondPerSquareMeter">
            <summary>
                Get MassFlux in GramsPerSecondPerSquareMeter.
            </summary>
        </member>
        <member name="P:UnitsNet.MassFlux.KilogramsPerSecondPerSquareMeter">
            <summary>
                Get MassFlux in KilogramsPerSecondPerSquareMeter.
            </summary>
        </member>
        <member name="P:UnitsNet.MassFlux.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit KilogramPerSecondPerSquareMeter.
            </summary>
        </member>
        <member name="M:UnitsNet.MassFlux.FromGramsPerSecondPerSquareMeter(UnitsNet.QuantityValue)">
            <summary>
                Get MassFlux from GramsPerSecondPerSquareMeter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassFlux.FromKilogramsPerSecondPerSquareMeter(UnitsNet.QuantityValue)">
            <summary>
                Get MassFlux from KilogramsPerSecondPerSquareMeter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassFlux.From(UnitsNet.QuantityValue,UnitsNet.Units.MassFluxUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.MassFluxUnit" /> to <see cref="T:UnitsNet.MassFlux" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>MassFlux unit value.</returns>
        </member>
        <member name="M:UnitsNet.MassFlux.GetAbbreviation(UnitsNet.Units.MassFluxUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.MassFlux.Equals(UnitsNet.MassFlux,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another MassFlux within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.MassFlux.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current MassFlux.</returns>
        </member>
        <member name="M:UnitsNet.MassFlux.As(UnitsNet.Units.MassFluxUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.MassFlux.ToUnit(UnitsNet.Units.MassFluxUnit)">
            <summary>
                Converts this MassFlux to another MassFlux with the unit representation <paramref name="unit" />.
            </summary>
            <returns>A MassFlux with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.MassFlux.AsBaseUnit">
            <summary>
                Converts the current value + unit to the base unit.
                This is typically the first step in converting from one unit to another.
            </summary>
            <returns>The value in the base unit representation.</returns>
        </member>
        <member name="M:UnitsNet.MassFlux.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.MassFlux.TryParse(System.String,UnitsNet.MassFlux@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.MassFlux.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.MassFlux.ParseInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.MassFlux.TryParseInternal(System.String,System.IFormatProvider,UnitsNet.MassFlux@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.MassFlux.ParseUnitInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.MassFlux.TryParseUnitInternal(System.String,System.IFormatProvider,UnitsNet.Units.MassFluxUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.MassFlux.ToString">
            <summary>
                Get default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.MassFlux.ToString(UnitsNet.Units.MassFluxUnit)">
            <summary>
                Get string representation of value and unit. Using current UI culture and two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <returns>String representation.</returns>
        </member>
        <member name="P:UnitsNet.MassFlux.MaxValue">
            <summary>
            Represents the largest possible value of MassFlux
            </summary>
        </member>
        <member name="P:UnitsNet.MassFlux.MinValue">
            <summary>
            Represents the smallest possible value of MassFlux
            </summary>
        </member>
        <member name="P:UnitsNet.MassFlux.Type">
            <summary>
                The <see cref="P:UnitsNet.MassFlux.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.MassFlux.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.MassFlux.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="T:UnitsNet.Molarity">
            <summary>
                Molar concentration, also called molarity, amount concentration or substance concentration, is a measure of the concentration of a solute in a solution, or of any chemical species, in terms of amount of substance in a given volume. 
            </summary>
            <summary>
                Molar concentration, also called molarity, amount concentration or substance concentration, is a measure of the concentration of a solute in a solution, or of any chemical species, in terms of amount of substance in a given volume. 
            </summary>
        </member>
        <member name="M:UnitsNet.Molarity.ToDensity(UnitsNet.Mass)">
            <summary>
                Get a <see cref="T:UnitsNet.Density"/> from this <see cref="T:UnitsNet.Molarity"/>.
            </summary>
            <param name="molecularWeight"></param>
        </member>
        <member name="M:UnitsNet.Molarity.FromDensity(UnitsNet.Density,UnitsNet.Mass)">
            <summary>
                Get <see cref="T:UnitsNet.Molarity"/> from <see cref="T:UnitsNet.Density"/>.
            </summary>
            <param name="density"></param>
            <param name="molecularWeight"></param>
        </member>
        <member name="P:UnitsNet.Molarity.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.Molarity.GetAbbreviation(UnitsNet.Units.MolarityUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.Molarity.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Molarity.TryParse(System.String,System.IFormatProvider,UnitsNet.Molarity@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Molarity.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Molarity.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.MolarityUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Molarity.ToString(UnitsNet.Units.MolarityUnit,System.IFormatProvider)">
            <summary>
                Get string representation of value and unit. Using two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Molarity.ToString(UnitsNet.Units.MolarityUnit,System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Molarity.ToString(UnitsNet.Units.MolarityUnit,System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">Unit representation to use.</param>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
        </member>
        <member name="F:UnitsNet.Molarity._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.Molarity._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.Molarity.Unit">
            <summary>
                The unit this quantity was constructed with -or- <see cref="P:UnitsNet.Molarity.BaseUnit" /> if default ctor was used.
            </summary>
        </member>
        <member name="M:UnitsNet.Molarity.#ctor(System.Double,UnitsNet.Units.MolarityUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="numericValue">The numeric value  to contruct this quantity with.</param>
            <param name="unit">The unit representation to contruct this quantity with.</param>
            <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="P:UnitsNet.Molarity.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.Molarity.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Molarity.BaseUnit">
            <summary>
                The base unit of Molarity, which is MolesPerCubicMeter. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.Molarity.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.Molarity.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Molarity.Units">
            <summary>
                All units of measurement for the Molarity quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Molarity.CentimolesPerLiter">
            <summary>
                Get Molarity in CentimolesPerLiter.
            </summary>
        </member>
        <member name="P:UnitsNet.Molarity.DecimolesPerLiter">
            <summary>
                Get Molarity in DecimolesPerLiter.
            </summary>
        </member>
        <member name="P:UnitsNet.Molarity.MicromolesPerLiter">
            <summary>
                Get Molarity in MicromolesPerLiter.
            </summary>
        </member>
        <member name="P:UnitsNet.Molarity.MillimolesPerLiter">
            <summary>
                Get Molarity in MillimolesPerLiter.
            </summary>
        </member>
        <member name="P:UnitsNet.Molarity.MolesPerCubicMeter">
            <summary>
                Get Molarity in MolesPerCubicMeter.
            </summary>
        </member>
        <member name="P:UnitsNet.Molarity.MolesPerLiter">
            <summary>
                Get Molarity in MolesPerLiter.
            </summary>
        </member>
        <member name="P:UnitsNet.Molarity.NanomolesPerLiter">
            <summary>
                Get Molarity in NanomolesPerLiter.
            </summary>
        </member>
        <member name="P:UnitsNet.Molarity.PicomolesPerLiter">
            <summary>
                Get Molarity in PicomolesPerLiter.
            </summary>
        </member>
        <member name="P:UnitsNet.Molarity.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit MolesPerCubicMeter.
            </summary>
        </member>
        <member name="M:UnitsNet.Molarity.FromCentimolesPerLiter(UnitsNet.QuantityValue)">
            <summary>
                Get Molarity from CentimolesPerLiter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Molarity.FromDecimolesPerLiter(UnitsNet.QuantityValue)">
            <summary>
                Get Molarity from DecimolesPerLiter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Molarity.FromMicromolesPerLiter(UnitsNet.QuantityValue)">
            <summary>
                Get Molarity from MicromolesPerLiter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Molarity.FromMillimolesPerLiter(UnitsNet.QuantityValue)">
            <summary>
                Get Molarity from MillimolesPerLiter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Molarity.FromMolesPerCubicMeter(UnitsNet.QuantityValue)">
            <summary>
                Get Molarity from MolesPerCubicMeter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Molarity.FromMolesPerLiter(UnitsNet.QuantityValue)">
            <summary>
                Get Molarity from MolesPerLiter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Molarity.FromNanomolesPerLiter(UnitsNet.QuantityValue)">
            <summary>
                Get Molarity from NanomolesPerLiter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Molarity.FromPicomolesPerLiter(UnitsNet.QuantityValue)">
            <summary>
                Get Molarity from PicomolesPerLiter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Molarity.From(UnitsNet.QuantityValue,UnitsNet.Units.MolarityUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.MolarityUnit" /> to <see cref="T:UnitsNet.Molarity" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>Molarity unit value.</returns>
        </member>
        <member name="M:UnitsNet.Molarity.GetAbbreviation(UnitsNet.Units.MolarityUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.Molarity.Equals(UnitsNet.Molarity,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another Molarity within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.Molarity.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current Molarity.</returns>
        </member>
        <member name="M:UnitsNet.Molarity.As(UnitsNet.Units.MolarityUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Molarity.ToUnit(UnitsNet.Units.MolarityUnit)">
            <summary>
                Converts this Molarity to another Molarity with the unit representation <paramref name="unit" />.
            </summary>
            <returns>A Molarity with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Molarity.AsBaseUnit">
            <summary>
                Converts the current value + unit to the base unit.
                This is typically the first step in converting from one unit to another.
            </summary>
            <returns>The value in the base unit representation.</returns>
        </member>
        <member name="M:UnitsNet.Molarity.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Molarity.TryParse(System.String,UnitsNet.Molarity@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Molarity.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Molarity.ParseInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Molarity.TryParseInternal(System.String,System.IFormatProvider,UnitsNet.Molarity@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Molarity.ParseUnitInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Molarity.TryParseUnitInternal(System.String,System.IFormatProvider,UnitsNet.Units.MolarityUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Molarity.ToString">
            <summary>
                Get default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Molarity.ToString(UnitsNet.Units.MolarityUnit)">
            <summary>
                Get string representation of value and unit. Using current UI culture and two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <returns>String representation.</returns>
        </member>
        <member name="P:UnitsNet.Molarity.MaxValue">
            <summary>
            Represents the largest possible value of Molarity
            </summary>
        </member>
        <member name="P:UnitsNet.Molarity.MinValue">
            <summary>
            Represents the smallest possible value of Molarity
            </summary>
        </member>
        <member name="P:UnitsNet.Molarity.Type">
            <summary>
                The <see cref="P:UnitsNet.Molarity.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Molarity.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.Molarity.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="T:UnitsNet.Power">
            <summary>
                In physics, power is the rate of doing work. It is equivalent to an amount of energy consumed per unit time.
            </summary>
            <summary>
                In physics, power is the rate of doing work. It is equivalent to an amount of energy consumed per unit time.
            </summary>
        </member>
        <member name="M:UnitsNet.Power.ToPowerRatio">
            <summary>
                Gets a <see cref="T:UnitsNet.PowerRatio" /> from this <see cref="T:UnitsNet.Power" /> relative to one watt.
            </summary>
            <remarks>
                Provides a nicer syntax for converting a power to a power ratio (relative to 1 watt).
                <example>
                    <c>var powerRatio = power.ToPowerRatio();</c>
                </example>
            </remarks>
        </member>
        <member name="P:UnitsNet.Power.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.Power.GetAbbreviation(UnitsNet.Units.PowerUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.Power.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Power.TryParse(System.String,System.IFormatProvider,UnitsNet.Power@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Power.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Power.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.PowerUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Power.ToString(UnitsNet.Units.PowerUnit,System.IFormatProvider)">
            <summary>
                Get string representation of value and unit. Using two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Power.ToString(UnitsNet.Units.PowerUnit,System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Power.ToString(UnitsNet.Units.PowerUnit,System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">Unit representation to use.</param>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
        </member>
        <member name="F:UnitsNet.Power._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.Power._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.Power.Unit">
            <summary>
                The unit this quantity was constructed with -or- <see cref="P:UnitsNet.Power.BaseUnit" /> if default ctor was used.
            </summary>
        </member>
        <member name="M:UnitsNet.Power.#ctor(System.Decimal,UnitsNet.Units.PowerUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="numericValue">The numeric value  to contruct this quantity with.</param>
            <param name="unit">The unit representation to contruct this quantity with.</param>
            <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="P:UnitsNet.Power.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.Power.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Power.BaseUnit">
            <summary>
                The base unit of Power, which is Watt. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.Power.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.Power.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Power.Units">
            <summary>
                All units of measurement for the Power quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Power.BoilerHorsepower">
            <summary>
                Get Power in BoilerHorsepower.
            </summary>
        </member>
        <member name="P:UnitsNet.Power.BritishThermalUnitsPerHour">
            <summary>
                Get Power in BritishThermalUnitsPerHour.
            </summary>
        </member>
        <member name="P:UnitsNet.Power.Decawatts">
            <summary>
                Get Power in Decawatts.
            </summary>
        </member>
        <member name="P:UnitsNet.Power.Deciwatts">
            <summary>
                Get Power in Deciwatts.
            </summary>
        </member>
        <member name="P:UnitsNet.Power.ElectricalHorsepower">
            <summary>
                Get Power in ElectricalHorsepower.
            </summary>
        </member>
        <member name="P:UnitsNet.Power.Femtowatts">
            <summary>
                Get Power in Femtowatts.
            </summary>
        </member>
        <member name="P:UnitsNet.Power.Gigawatts">
            <summary>
                Get Power in Gigawatts.
            </summary>
        </member>
        <member name="P:UnitsNet.Power.HydraulicHorsepower">
            <summary>
                Get Power in HydraulicHorsepower.
            </summary>
        </member>
        <member name="P:UnitsNet.Power.KilobritishThermalUnitsPerHour">
            <summary>
                Get Power in KilobritishThermalUnitsPerHour.
            </summary>
        </member>
        <member name="P:UnitsNet.Power.Kilowatts">
            <summary>
                Get Power in Kilowatts.
            </summary>
        </member>
        <member name="P:UnitsNet.Power.MechanicalHorsepower">
            <summary>
                Get Power in MechanicalHorsepower.
            </summary>
        </member>
        <member name="P:UnitsNet.Power.Megawatts">
            <summary>
                Get Power in Megawatts.
            </summary>
        </member>
        <member name="P:UnitsNet.Power.MetricHorsepower">
            <summary>
                Get Power in MetricHorsepower.
            </summary>
        </member>
        <member name="P:UnitsNet.Power.Microwatts">
            <summary>
                Get Power in Microwatts.
            </summary>
        </member>
        <member name="P:UnitsNet.Power.Milliwatts">
            <summary>
                Get Power in Milliwatts.
            </summary>
        </member>
        <member name="P:UnitsNet.Power.Nanowatts">
            <summary>
                Get Power in Nanowatts.
            </summary>
        </member>
        <member name="P:UnitsNet.Power.Petawatts">
            <summary>
                Get Power in Petawatts.
            </summary>
        </member>
        <member name="P:UnitsNet.Power.Picowatts">
            <summary>
                Get Power in Picowatts.
            </summary>
        </member>
        <member name="P:UnitsNet.Power.Terawatts">
            <summary>
                Get Power in Terawatts.
            </summary>
        </member>
        <member name="P:UnitsNet.Power.Watts">
            <summary>
                Get Power in Watts.
            </summary>
        </member>
        <member name="P:UnitsNet.Power.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit Watt.
            </summary>
        </member>
        <member name="M:UnitsNet.Power.FromBoilerHorsepower(UnitsNet.QuantityValue)">
            <summary>
                Get Power from BoilerHorsepower.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Power.FromBritishThermalUnitsPerHour(UnitsNet.QuantityValue)">
            <summary>
                Get Power from BritishThermalUnitsPerHour.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Power.FromDecawatts(UnitsNet.QuantityValue)">
            <summary>
                Get Power from Decawatts.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Power.FromDeciwatts(UnitsNet.QuantityValue)">
            <summary>
                Get Power from Deciwatts.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Power.FromElectricalHorsepower(UnitsNet.QuantityValue)">
            <summary>
                Get Power from ElectricalHorsepower.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Power.FromFemtowatts(UnitsNet.QuantityValue)">
            <summary>
                Get Power from Femtowatts.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Power.FromGigawatts(UnitsNet.QuantityValue)">
            <summary>
                Get Power from Gigawatts.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Power.FromHydraulicHorsepower(UnitsNet.QuantityValue)">
            <summary>
                Get Power from HydraulicHorsepower.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Power.FromKilobritishThermalUnitsPerHour(UnitsNet.QuantityValue)">
            <summary>
                Get Power from KilobritishThermalUnitsPerHour.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Power.FromKilowatts(UnitsNet.QuantityValue)">
            <summary>
                Get Power from Kilowatts.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Power.FromMechanicalHorsepower(UnitsNet.QuantityValue)">
            <summary>
                Get Power from MechanicalHorsepower.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Power.FromMegawatts(UnitsNet.QuantityValue)">
            <summary>
                Get Power from Megawatts.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Power.FromMetricHorsepower(UnitsNet.QuantityValue)">
            <summary>
                Get Power from MetricHorsepower.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Power.FromMicrowatts(UnitsNet.QuantityValue)">
            <summary>
                Get Power from Microwatts.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Power.FromMilliwatts(UnitsNet.QuantityValue)">
            <summary>
                Get Power from Milliwatts.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Power.FromNanowatts(UnitsNet.QuantityValue)">
            <summary>
                Get Power from Nanowatts.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Power.FromPetawatts(UnitsNet.QuantityValue)">
            <summary>
                Get Power from Petawatts.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Power.FromPicowatts(UnitsNet.QuantityValue)">
            <summary>
                Get Power from Picowatts.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Power.FromTerawatts(UnitsNet.QuantityValue)">
            <summary>
                Get Power from Terawatts.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Power.FromWatts(UnitsNet.QuantityValue)">
            <summary>
                Get Power from Watts.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Power.From(UnitsNet.QuantityValue,UnitsNet.Units.PowerUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.PowerUnit" /> to <see cref="T:UnitsNet.Power" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>Power unit value.</returns>
        </member>
        <member name="M:UnitsNet.Power.GetAbbreviation(UnitsNet.Units.PowerUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.Power.Equals(UnitsNet.Power,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another Power within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.Power.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current Power.</returns>
        </member>
        <member name="M:UnitsNet.Power.As(UnitsNet.Units.PowerUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Power.ToUnit(UnitsNet.Units.PowerUnit)">
            <summary>
                Converts this Power to another Power with the unit representation <paramref name="unit" />.
            </summary>
            <returns>A Power with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Power.AsBaseUnit">
            <summary>
                Converts the current value + unit to the base unit.
                This is typically the first step in converting from one unit to another.
            </summary>
            <returns>The value in the base unit representation.</returns>
        </member>
        <member name="M:UnitsNet.Power.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Power.TryParse(System.String,UnitsNet.Power@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Power.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Power.ParseInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Power.TryParseInternal(System.String,System.IFormatProvider,UnitsNet.Power@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Power.ParseUnitInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Power.TryParseUnitInternal(System.String,System.IFormatProvider,UnitsNet.Units.PowerUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Power.ToString">
            <summary>
                Get default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Power.ToString(UnitsNet.Units.PowerUnit)">
            <summary>
                Get string representation of value and unit. Using current UI culture and two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <returns>String representation.</returns>
        </member>
        <member name="P:UnitsNet.Power.MaxValue">
            <summary>
            Represents the largest possible value of Power
            </summary>
        </member>
        <member name="P:UnitsNet.Power.MinValue">
            <summary>
            Represents the smallest possible value of Power
            </summary>
        </member>
        <member name="P:UnitsNet.Power.Type">
            <summary>
                The <see cref="P:UnitsNet.Power.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Power.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.Power.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="T:UnitsNet.PowerRatio">
            <summary>
                The strength of a signal expressed in decibels (dB) relative to one watt.
            </summary>
            <summary>
                The strength of a signal expressed in decibels (dB) relative to one watt.
            </summary>
        </member>
        <member name="M:UnitsNet.PowerRatio.#ctor(UnitsNet.Power)">
            <summary>
                Initializes a new instance of the <see cref="T:UnitsNet.PowerRatio" /> struct from the specified power referenced to one watt.
            </summary>
            <param name="power">The power relative to one watt.</param>
        </member>
        <member name="M:UnitsNet.PowerRatio.ToPower">
            <summary>
                Gets a <see cref="T:UnitsNet.Power" /> from this <see cref="T:UnitsNet.PowerRatio" /> (which is a power level relative to one watt).
            </summary>
            <remarks>
                Provides a nicer syntax for converting a power ratio back to a power.
                <example>
                    <c>var power = powerRatio.ToPower();</c>
                </example>
            </remarks>
        </member>
        <member name="M:UnitsNet.PowerRatio.ToAmplitudeRatio(UnitsNet.ElectricResistance)">
            <summary>
                Gets a <see cref="T:UnitsNet.AmplitudeRatio" /> from this <see cref="T:UnitsNet.PowerRatio" />.
            </summary>
            <param name="impedance">The input impedance of the load. This is usually 50, 75 or 600 ohms.</param>
        </member>
        <member name="M:UnitsNet.PowerRatio.FromPower(UnitsNet.Power)">
            <summary>
                Gets a <see cref="T:UnitsNet.PowerRatio" /> from a <see cref="T:UnitsNet.Power" /> relative to one watt.
            </summary>
            <param name="power">The power relative to one watt.</param>
        </member>
        <member name="P:UnitsNet.PowerRatio.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.PowerRatio.GetAbbreviation(UnitsNet.Units.PowerRatioUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.PowerRatio.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.PowerRatio.TryParse(System.String,System.IFormatProvider,UnitsNet.PowerRatio@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.PowerRatio.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.PowerRatio.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.PowerRatioUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.PowerRatio.ToString(UnitsNet.Units.PowerRatioUnit,System.IFormatProvider)">
            <summary>
                Get string representation of value and unit. Using two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.PowerRatio.ToString(UnitsNet.Units.PowerRatioUnit,System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.PowerRatio.ToString(UnitsNet.Units.PowerRatioUnit,System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">Unit representation to use.</param>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
        </member>
        <member name="F:UnitsNet.PowerRatio._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.PowerRatio._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.PowerRatio.Unit">
            <summary>
                The unit this quantity was constructed with -or- <see cref="P:UnitsNet.PowerRatio.BaseUnit" /> if default ctor was used.
            </summary>
        </member>
        <member name="M:UnitsNet.PowerRatio.#ctor(System.Double,UnitsNet.Units.PowerRatioUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="numericValue">The numeric value  to contruct this quantity with.</param>
            <param name="unit">The unit representation to contruct this quantity with.</param>
            <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="P:UnitsNet.PowerRatio.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.PowerRatio.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.PowerRatio.BaseUnit">
            <summary>
                The base unit of PowerRatio, which is DecibelWatt. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.PowerRatio.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.PowerRatio.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.PowerRatio.Units">
            <summary>
                All units of measurement for the PowerRatio quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.PowerRatio.DecibelMilliwatts">
            <summary>
                Get PowerRatio in DecibelMilliwatts.
            </summary>
        </member>
        <member name="P:UnitsNet.PowerRatio.DecibelWatts">
            <summary>
                Get PowerRatio in DecibelWatts.
            </summary>
        </member>
        <member name="P:UnitsNet.PowerRatio.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit DecibelWatt.
            </summary>
        </member>
        <member name="M:UnitsNet.PowerRatio.FromDecibelMilliwatts(UnitsNet.QuantityValue)">
            <summary>
                Get PowerRatio from DecibelMilliwatts.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PowerRatio.FromDecibelWatts(UnitsNet.QuantityValue)">
            <summary>
                Get PowerRatio from DecibelWatts.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PowerRatio.From(UnitsNet.QuantityValue,UnitsNet.Units.PowerRatioUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.PowerRatioUnit" /> to <see cref="T:UnitsNet.PowerRatio" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>PowerRatio unit value.</returns>
        </member>
        <member name="M:UnitsNet.PowerRatio.GetAbbreviation(UnitsNet.Units.PowerRatioUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.PowerRatio.Equals(UnitsNet.PowerRatio,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another PowerRatio within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.PowerRatio.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current PowerRatio.</returns>
        </member>
        <member name="M:UnitsNet.PowerRatio.As(UnitsNet.Units.PowerRatioUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.PowerRatio.ToUnit(UnitsNet.Units.PowerRatioUnit)">
            <summary>
                Converts this PowerRatio to another PowerRatio with the unit representation <paramref name="unit" />.
            </summary>
            <returns>A PowerRatio with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.PowerRatio.AsBaseUnit">
            <summary>
                Converts the current value + unit to the base unit.
                This is typically the first step in converting from one unit to another.
            </summary>
            <returns>The value in the base unit representation.</returns>
        </member>
        <member name="M:UnitsNet.PowerRatio.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.PowerRatio.TryParse(System.String,UnitsNet.PowerRatio@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.PowerRatio.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.PowerRatio.ParseInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.PowerRatio.TryParseInternal(System.String,System.IFormatProvider,UnitsNet.PowerRatio@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.PowerRatio.ParseUnitInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.PowerRatio.TryParseUnitInternal(System.String,System.IFormatProvider,UnitsNet.Units.PowerRatioUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.PowerRatio.ToString">
            <summary>
                Get default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.PowerRatio.ToString(UnitsNet.Units.PowerRatioUnit)">
            <summary>
                Get string representation of value and unit. Using current UI culture and two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <returns>String representation.</returns>
        </member>
        <member name="P:UnitsNet.PowerRatio.MaxValue">
            <summary>
            Represents the largest possible value of PowerRatio
            </summary>
        </member>
        <member name="P:UnitsNet.PowerRatio.MinValue">
            <summary>
            Represents the smallest possible value of PowerRatio
            </summary>
        </member>
        <member name="P:UnitsNet.PowerRatio.Type">
            <summary>
                The <see cref="P:UnitsNet.PowerRatio.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.PowerRatio.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.PowerRatio.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="T:UnitsNet.Pressure">
            <summary>
                Pressure (symbol: P or p) is the ratio of force to the area over which that force is distributed. Pressure is force per unit area applied in a direction perpendicular to the surface of an object. Gauge pressure (also spelled gage pressure)[a] is the pressure relative to the local atmospheric or ambient pressure. Pressure is measured in any unit of force divided by any unit of area. The SI unit of pressure is the newton per square metre, which is called the pascal (Pa) after the seventeenth-century philosopher and scientist Blaise Pascal. A pressure of 1 Pa is small; it approximately equals the pressure exerted by a dollar bill resting flat on a table. Everyday pressures are often stated in kilopascals (1 kPa = 1000 Pa).
            </summary>
            <summary>
                Pressure (symbol: P or p) is the ratio of force to the area over which that force is distributed. Pressure is force per unit area applied in a direction perpendicular to the surface of an object. Gauge pressure (also spelled gage pressure)[a] is the pressure relative to the local atmospheric or ambient pressure. Pressure is measured in any unit of force divided by any unit of area. The SI unit of pressure is the newton per square metre, which is called the pascal (Pa) after the seventeenth-century philosopher and scientist Blaise Pascal. A pressure of 1 Pa is small; it approximately equals the pressure exerted by a dollar bill resting flat on a table. Everyday pressures are often stated in kilopascals (1 kPa = 1000 Pa).
            </summary>
        </member>
        <member name="P:UnitsNet.Pressure.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.Pressure.GetAbbreviation(UnitsNet.Units.PressureUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.Pressure.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Pressure.TryParse(System.String,System.IFormatProvider,UnitsNet.Pressure@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Pressure.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Pressure.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.PressureUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Pressure.ToString(UnitsNet.Units.PressureUnit,System.IFormatProvider)">
            <summary>
                Get string representation of value and unit. Using two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Pressure.ToString(UnitsNet.Units.PressureUnit,System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Pressure.ToString(UnitsNet.Units.PressureUnit,System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">Unit representation to use.</param>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
        </member>
        <member name="F:UnitsNet.Pressure._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.Pressure._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.Pressure.Unit">
            <summary>
                The unit this quantity was constructed with -or- <see cref="P:UnitsNet.Pressure.BaseUnit" /> if default ctor was used.
            </summary>
        </member>
        <member name="M:UnitsNet.Pressure.#ctor(System.Double,UnitsNet.Units.PressureUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="numericValue">The numeric value  to contruct this quantity with.</param>
            <param name="unit">The unit representation to contruct this quantity with.</param>
            <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="P:UnitsNet.Pressure.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.Pressure.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Pressure.BaseUnit">
            <summary>
                The base unit of Pressure, which is Pascal. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.Pressure.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.Pressure.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Pressure.Units">
            <summary>
                All units of measurement for the Pressure quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Pressure.Atmospheres">
            <summary>
                Get Pressure in Atmospheres.
            </summary>
        </member>
        <member name="P:UnitsNet.Pressure.Bars">
            <summary>
                Get Pressure in Bars.
            </summary>
        </member>
        <member name="P:UnitsNet.Pressure.Centibars">
            <summary>
                Get Pressure in Centibars.
            </summary>
        </member>
        <member name="P:UnitsNet.Pressure.Decapascals">
            <summary>
                Get Pressure in Decapascals.
            </summary>
        </member>
        <member name="P:UnitsNet.Pressure.Decibars">
            <summary>
                Get Pressure in Decibars.
            </summary>
        </member>
        <member name="P:UnitsNet.Pressure.FeetOfHead">
            <summary>
                Get Pressure in FeetOfHead.
            </summary>
        </member>
        <member name="P:UnitsNet.Pressure.Gigapascals">
            <summary>
                Get Pressure in Gigapascals.
            </summary>
        </member>
        <member name="P:UnitsNet.Pressure.Hectopascals">
            <summary>
                Get Pressure in Hectopascals.
            </summary>
        </member>
        <member name="P:UnitsNet.Pressure.InchesOfMercury">
            <summary>
                Get Pressure in InchesOfMercury.
            </summary>
        </member>
        <member name="P:UnitsNet.Pressure.Kilobars">
            <summary>
                Get Pressure in Kilobars.
            </summary>
        </member>
        <member name="P:UnitsNet.Pressure.KilogramsForcePerSquareCentimeter">
            <summary>
                Get Pressure in KilogramsForcePerSquareCentimeter.
            </summary>
        </member>
        <member name="P:UnitsNet.Pressure.KilogramsForcePerSquareMeter">
            <summary>
                Get Pressure in KilogramsForcePerSquareMeter.
            </summary>
        </member>
        <member name="P:UnitsNet.Pressure.KilogramsForcePerSquareMillimeter">
            <summary>
                Get Pressure in KilogramsForcePerSquareMillimeter.
            </summary>
        </member>
        <member name="P:UnitsNet.Pressure.KilonewtonsPerSquareCentimeter">
            <summary>
                Get Pressure in KilonewtonsPerSquareCentimeter.
            </summary>
        </member>
        <member name="P:UnitsNet.Pressure.KilonewtonsPerSquareMeter">
            <summary>
                Get Pressure in KilonewtonsPerSquareMeter.
            </summary>
        </member>
        <member name="P:UnitsNet.Pressure.KilonewtonsPerSquareMillimeter">
            <summary>
                Get Pressure in KilonewtonsPerSquareMillimeter.
            </summary>
        </member>
        <member name="P:UnitsNet.Pressure.Kilopascals">
            <summary>
                Get Pressure in Kilopascals.
            </summary>
        </member>
        <member name="P:UnitsNet.Pressure.KilopoundsForcePerSquareFoot">
            <summary>
                Get Pressure in KilopoundsForcePerSquareFoot.
            </summary>
        </member>
        <member name="P:UnitsNet.Pressure.KilopoundsForcePerSquareInch">
            <summary>
                Get Pressure in KilopoundsForcePerSquareInch.
            </summary>
        </member>
        <member name="P:UnitsNet.Pressure.Megabars">
            <summary>
                Get Pressure in Megabars.
            </summary>
        </member>
        <member name="P:UnitsNet.Pressure.MeganewtonsPerSquareMeter">
            <summary>
                Get Pressure in MeganewtonsPerSquareMeter.
            </summary>
        </member>
        <member name="P:UnitsNet.Pressure.Megapascals">
            <summary>
                Get Pressure in Megapascals.
            </summary>
        </member>
        <member name="P:UnitsNet.Pressure.MetersOfHead">
            <summary>
                Get Pressure in MetersOfHead.
            </summary>
        </member>
        <member name="P:UnitsNet.Pressure.Micropascals">
            <summary>
                Get Pressure in Micropascals.
            </summary>
        </member>
        <member name="P:UnitsNet.Pressure.Millibars">
            <summary>
                Get Pressure in Millibars.
            </summary>
        </member>
        <member name="P:UnitsNet.Pressure.MillimetersOfMercury">
            <summary>
                Get Pressure in MillimetersOfMercury.
            </summary>
        </member>
        <member name="P:UnitsNet.Pressure.NewtonsPerSquareCentimeter">
            <summary>
                Get Pressure in NewtonsPerSquareCentimeter.
            </summary>
        </member>
        <member name="P:UnitsNet.Pressure.NewtonsPerSquareMeter">
            <summary>
                Get Pressure in NewtonsPerSquareMeter.
            </summary>
        </member>
        <member name="P:UnitsNet.Pressure.NewtonsPerSquareMillimeter">
            <summary>
                Get Pressure in NewtonsPerSquareMillimeter.
            </summary>
        </member>
        <member name="P:UnitsNet.Pressure.Pascals">
            <summary>
                Get Pressure in Pascals.
            </summary>
        </member>
        <member name="P:UnitsNet.Pressure.PoundsForcePerSquareFoot">
            <summary>
                Get Pressure in PoundsForcePerSquareFoot.
            </summary>
        </member>
        <member name="P:UnitsNet.Pressure.PoundsForcePerSquareInch">
            <summary>
                Get Pressure in PoundsForcePerSquareInch.
            </summary>
        </member>
        <member name="P:UnitsNet.Pressure.TechnicalAtmospheres">
            <summary>
                Get Pressure in TechnicalAtmospheres.
            </summary>
        </member>
        <member name="P:UnitsNet.Pressure.TonnesForcePerSquareCentimeter">
            <summary>
                Get Pressure in TonnesForcePerSquareCentimeter.
            </summary>
        </member>
        <member name="P:UnitsNet.Pressure.TonnesForcePerSquareMeter">
            <summary>
                Get Pressure in TonnesForcePerSquareMeter.
            </summary>
        </member>
        <member name="P:UnitsNet.Pressure.TonnesForcePerSquareMillimeter">
            <summary>
                Get Pressure in TonnesForcePerSquareMillimeter.
            </summary>
        </member>
        <member name="P:UnitsNet.Pressure.Torrs">
            <summary>
                Get Pressure in Torrs.
            </summary>
        </member>
        <member name="P:UnitsNet.Pressure.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit Pascal.
            </summary>
        </member>
        <member name="M:UnitsNet.Pressure.FromAtmospheres(UnitsNet.QuantityValue)">
            <summary>
                Get Pressure from Atmospheres.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Pressure.FromBars(UnitsNet.QuantityValue)">
            <summary>
                Get Pressure from Bars.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Pressure.FromCentibars(UnitsNet.QuantityValue)">
            <summary>
                Get Pressure from Centibars.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Pressure.FromDecapascals(UnitsNet.QuantityValue)">
            <summary>
                Get Pressure from Decapascals.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Pressure.FromDecibars(UnitsNet.QuantityValue)">
            <summary>
                Get Pressure from Decibars.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Pressure.FromFeetOfHead(UnitsNet.QuantityValue)">
            <summary>
                Get Pressure from FeetOfHead.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Pressure.FromGigapascals(UnitsNet.QuantityValue)">
            <summary>
                Get Pressure from Gigapascals.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Pressure.FromHectopascals(UnitsNet.QuantityValue)">
            <summary>
                Get Pressure from Hectopascals.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Pressure.FromInchesOfMercury(UnitsNet.QuantityValue)">
            <summary>
                Get Pressure from InchesOfMercury.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Pressure.FromKilobars(UnitsNet.QuantityValue)">
            <summary>
                Get Pressure from Kilobars.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Pressure.FromKilogramsForcePerSquareCentimeter(UnitsNet.QuantityValue)">
            <summary>
                Get Pressure from KilogramsForcePerSquareCentimeter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Pressure.FromKilogramsForcePerSquareMeter(UnitsNet.QuantityValue)">
            <summary>
                Get Pressure from KilogramsForcePerSquareMeter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Pressure.FromKilogramsForcePerSquareMillimeter(UnitsNet.QuantityValue)">
            <summary>
                Get Pressure from KilogramsForcePerSquareMillimeter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Pressure.FromKilonewtonsPerSquareCentimeter(UnitsNet.QuantityValue)">
            <summary>
                Get Pressure from KilonewtonsPerSquareCentimeter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Pressure.FromKilonewtonsPerSquareMeter(UnitsNet.QuantityValue)">
            <summary>
                Get Pressure from KilonewtonsPerSquareMeter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Pressure.FromKilonewtonsPerSquareMillimeter(UnitsNet.QuantityValue)">
            <summary>
                Get Pressure from KilonewtonsPerSquareMillimeter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Pressure.FromKilopascals(UnitsNet.QuantityValue)">
            <summary>
                Get Pressure from Kilopascals.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Pressure.FromKilopoundsForcePerSquareFoot(UnitsNet.QuantityValue)">
            <summary>
                Get Pressure from KilopoundsForcePerSquareFoot.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Pressure.FromKilopoundsForcePerSquareInch(UnitsNet.QuantityValue)">
            <summary>
                Get Pressure from KilopoundsForcePerSquareInch.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Pressure.FromMegabars(UnitsNet.QuantityValue)">
            <summary>
                Get Pressure from Megabars.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Pressure.FromMeganewtonsPerSquareMeter(UnitsNet.QuantityValue)">
            <summary>
                Get Pressure from MeganewtonsPerSquareMeter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Pressure.FromMegapascals(UnitsNet.QuantityValue)">
            <summary>
                Get Pressure from Megapascals.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Pressure.FromMetersOfHead(UnitsNet.QuantityValue)">
            <summary>
                Get Pressure from MetersOfHead.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Pressure.FromMicropascals(UnitsNet.QuantityValue)">
            <summary>
                Get Pressure from Micropascals.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Pressure.FromMillibars(UnitsNet.QuantityValue)">
            <summary>
                Get Pressure from Millibars.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Pressure.FromMillimetersOfMercury(UnitsNet.QuantityValue)">
            <summary>
                Get Pressure from MillimetersOfMercury.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Pressure.FromNewtonsPerSquareCentimeter(UnitsNet.QuantityValue)">
            <summary>
                Get Pressure from NewtonsPerSquareCentimeter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Pressure.FromNewtonsPerSquareMeter(UnitsNet.QuantityValue)">
            <summary>
                Get Pressure from NewtonsPerSquareMeter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Pressure.FromNewtonsPerSquareMillimeter(UnitsNet.QuantityValue)">
            <summary>
                Get Pressure from NewtonsPerSquareMillimeter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Pressure.FromPascals(UnitsNet.QuantityValue)">
            <summary>
                Get Pressure from Pascals.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Pressure.FromPoundsForcePerSquareFoot(UnitsNet.QuantityValue)">
            <summary>
                Get Pressure from PoundsForcePerSquareFoot.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Pressure.FromPoundsForcePerSquareInch(UnitsNet.QuantityValue)">
            <summary>
                Get Pressure from PoundsForcePerSquareInch.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Pressure.FromTechnicalAtmospheres(UnitsNet.QuantityValue)">
            <summary>
                Get Pressure from TechnicalAtmospheres.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Pressure.FromTonnesForcePerSquareCentimeter(UnitsNet.QuantityValue)">
            <summary>
                Get Pressure from TonnesForcePerSquareCentimeter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Pressure.FromTonnesForcePerSquareMeter(UnitsNet.QuantityValue)">
            <summary>
                Get Pressure from TonnesForcePerSquareMeter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Pressure.FromTonnesForcePerSquareMillimeter(UnitsNet.QuantityValue)">
            <summary>
                Get Pressure from TonnesForcePerSquareMillimeter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Pressure.FromTorrs(UnitsNet.QuantityValue)">
            <summary>
                Get Pressure from Torrs.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Pressure.From(UnitsNet.QuantityValue,UnitsNet.Units.PressureUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.PressureUnit" /> to <see cref="T:UnitsNet.Pressure" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>Pressure unit value.</returns>
        </member>
        <member name="M:UnitsNet.Pressure.GetAbbreviation(UnitsNet.Units.PressureUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.Pressure.Equals(UnitsNet.Pressure,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another Pressure within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.Pressure.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current Pressure.</returns>
        </member>
        <member name="M:UnitsNet.Pressure.As(UnitsNet.Units.PressureUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Pressure.ToUnit(UnitsNet.Units.PressureUnit)">
            <summary>
                Converts this Pressure to another Pressure with the unit representation <paramref name="unit" />.
            </summary>
            <returns>A Pressure with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Pressure.AsBaseUnit">
            <summary>
                Converts the current value + unit to the base unit.
                This is typically the first step in converting from one unit to another.
            </summary>
            <returns>The value in the base unit representation.</returns>
        </member>
        <member name="M:UnitsNet.Pressure.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Pressure.TryParse(System.String,UnitsNet.Pressure@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Pressure.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Pressure.ParseInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Pressure.TryParseInternal(System.String,System.IFormatProvider,UnitsNet.Pressure@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Pressure.ParseUnitInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Pressure.TryParseUnitInternal(System.String,System.IFormatProvider,UnitsNet.Units.PressureUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Pressure.ToString">
            <summary>
                Get default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Pressure.ToString(UnitsNet.Units.PressureUnit)">
            <summary>
                Get string representation of value and unit. Using current UI culture and two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <returns>String representation.</returns>
        </member>
        <member name="P:UnitsNet.Pressure.MaxValue">
            <summary>
            Represents the largest possible value of Pressure
            </summary>
        </member>
        <member name="P:UnitsNet.Pressure.MinValue">
            <summary>
            Represents the smallest possible value of Pressure
            </summary>
        </member>
        <member name="P:UnitsNet.Pressure.Type">
            <summary>
                The <see cref="P:UnitsNet.Pressure.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Pressure.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.Pressure.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="T:UnitsNet.RotationalSpeed">
            <summary>
                Rotational speed (sometimes called speed of revolution) is the number of complete rotations, revolutions, cycles, or turns per time unit. Rotational speed is a cyclic frequency, measured in radians per second or in hertz in the SI System by scientists, or in revolutions per minute (rpm or min-1) or revolutions per second in everyday life. The symbol for rotational speed is Ï‰ (the Greek lowercase letter "omega").
            </summary>
            <summary>
                Rotational speed (sometimes called speed of revolution) is the number of complete rotations, revolutions, cycles, or turns per time unit. Rotational speed is a cyclic frequency, measured in radians per second or in hertz in the SI System by scientists, or in revolutions per minute (rpm or min-1) or revolutions per second in everyday life. The symbol for rotational speed is Ï‰ (the Greek lowercase letter "omega").
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalSpeed.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.RotationalSpeed.GetAbbreviation(UnitsNet.Units.RotationalSpeedUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.RotationalSpeed.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.RotationalSpeed.TryParse(System.String,System.IFormatProvider,UnitsNet.RotationalSpeed@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.RotationalSpeed.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.RotationalSpeed.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.RotationalSpeedUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.RotationalSpeed.ToString(UnitsNet.Units.RotationalSpeedUnit,System.IFormatProvider)">
            <summary>
                Get string representation of value and unit. Using two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.RotationalSpeed.ToString(UnitsNet.Units.RotationalSpeedUnit,System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.RotationalSpeed.ToString(UnitsNet.Units.RotationalSpeedUnit,System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">Unit representation to use.</param>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
        </member>
        <member name="F:UnitsNet.RotationalSpeed._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.RotationalSpeed._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalSpeed.Unit">
            <summary>
                The unit this quantity was constructed with -or- <see cref="P:UnitsNet.RotationalSpeed.BaseUnit" /> if default ctor was used.
            </summary>
        </member>
        <member name="M:UnitsNet.RotationalSpeed.#ctor(System.Double,UnitsNet.Units.RotationalSpeedUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="numericValue">The numeric value  to contruct this quantity with.</param>
            <param name="unit">The unit representation to contruct this quantity with.</param>
            <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="P:UnitsNet.RotationalSpeed.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.RotationalSpeed.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalSpeed.BaseUnit">
            <summary>
                The base unit of RotationalSpeed, which is RadianPerSecond. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalSpeed.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.RotationalSpeed.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalSpeed.Units">
            <summary>
                All units of measurement for the RotationalSpeed quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalSpeed.CentiradiansPerSecond">
            <summary>
                Get RotationalSpeed in CentiradiansPerSecond.
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalSpeed.DeciradiansPerSecond">
            <summary>
                Get RotationalSpeed in DeciradiansPerSecond.
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalSpeed.DegreesPerMinute">
            <summary>
                Get RotationalSpeed in DegreesPerMinute.
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalSpeed.DegreesPerSecond">
            <summary>
                Get RotationalSpeed in DegreesPerSecond.
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalSpeed.MicrodegreesPerSecond">
            <summary>
                Get RotationalSpeed in MicrodegreesPerSecond.
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalSpeed.MicroradiansPerSecond">
            <summary>
                Get RotationalSpeed in MicroradiansPerSecond.
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalSpeed.MillidegreesPerSecond">
            <summary>
                Get RotationalSpeed in MillidegreesPerSecond.
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalSpeed.MilliradiansPerSecond">
            <summary>
                Get RotationalSpeed in MilliradiansPerSecond.
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalSpeed.NanodegreesPerSecond">
            <summary>
                Get RotationalSpeed in NanodegreesPerSecond.
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalSpeed.NanoradiansPerSecond">
            <summary>
                Get RotationalSpeed in NanoradiansPerSecond.
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalSpeed.RadiansPerSecond">
            <summary>
                Get RotationalSpeed in RadiansPerSecond.
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalSpeed.RevolutionsPerMinute">
            <summary>
                Get RotationalSpeed in RevolutionsPerMinute.
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalSpeed.RevolutionsPerSecond">
            <summary>
                Get RotationalSpeed in RevolutionsPerSecond.
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalSpeed.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit RadianPerSecond.
            </summary>
        </member>
        <member name="M:UnitsNet.RotationalSpeed.FromCentiradiansPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Get RotationalSpeed from CentiradiansPerSecond.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.RotationalSpeed.FromDeciradiansPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Get RotationalSpeed from DeciradiansPerSecond.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.RotationalSpeed.FromDegreesPerMinute(UnitsNet.QuantityValue)">
            <summary>
                Get RotationalSpeed from DegreesPerMinute.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.RotationalSpeed.FromDegreesPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Get RotationalSpeed from DegreesPerSecond.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.RotationalSpeed.FromMicrodegreesPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Get RotationalSpeed from MicrodegreesPerSecond.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.RotationalSpeed.FromMicroradiansPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Get RotationalSpeed from MicroradiansPerSecond.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.RotationalSpeed.FromMillidegreesPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Get RotationalSpeed from MillidegreesPerSecond.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.RotationalSpeed.FromMilliradiansPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Get RotationalSpeed from MilliradiansPerSecond.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.RotationalSpeed.FromNanodegreesPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Get RotationalSpeed from NanodegreesPerSecond.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.RotationalSpeed.FromNanoradiansPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Get RotationalSpeed from NanoradiansPerSecond.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.RotationalSpeed.FromRadiansPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Get RotationalSpeed from RadiansPerSecond.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.RotationalSpeed.FromRevolutionsPerMinute(UnitsNet.QuantityValue)">
            <summary>
                Get RotationalSpeed from RevolutionsPerMinute.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.RotationalSpeed.FromRevolutionsPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Get RotationalSpeed from RevolutionsPerSecond.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.RotationalSpeed.From(UnitsNet.QuantityValue,UnitsNet.Units.RotationalSpeedUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.RotationalSpeedUnit" /> to <see cref="T:UnitsNet.RotationalSpeed" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>RotationalSpeed unit value.</returns>
        </member>
        <member name="M:UnitsNet.RotationalSpeed.GetAbbreviation(UnitsNet.Units.RotationalSpeedUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.RotationalSpeed.Equals(UnitsNet.RotationalSpeed,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another RotationalSpeed within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.RotationalSpeed.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current RotationalSpeed.</returns>
        </member>
        <member name="M:UnitsNet.RotationalSpeed.As(UnitsNet.Units.RotationalSpeedUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.RotationalSpeed.ToUnit(UnitsNet.Units.RotationalSpeedUnit)">
            <summary>
                Converts this RotationalSpeed to another RotationalSpeed with the unit representation <paramref name="unit" />.
            </summary>
            <returns>A RotationalSpeed with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.RotationalSpeed.AsBaseUnit">
            <summary>
                Converts the current value + unit to the base unit.
                This is typically the first step in converting from one unit to another.
            </summary>
            <returns>The value in the base unit representation.</returns>
        </member>
        <member name="M:UnitsNet.RotationalSpeed.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.RotationalSpeed.TryParse(System.String,UnitsNet.RotationalSpeed@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.RotationalSpeed.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.RotationalSpeed.ParseInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.RotationalSpeed.TryParseInternal(System.String,System.IFormatProvider,UnitsNet.RotationalSpeed@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.RotationalSpeed.ParseUnitInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.RotationalSpeed.TryParseUnitInternal(System.String,System.IFormatProvider,UnitsNet.Units.RotationalSpeedUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.RotationalSpeed.ToString">
            <summary>
                Get default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.RotationalSpeed.ToString(UnitsNet.Units.RotationalSpeedUnit)">
            <summary>
                Get string representation of value and unit. Using current UI culture and two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <returns>String representation.</returns>
        </member>
        <member name="P:UnitsNet.RotationalSpeed.MaxValue">
            <summary>
            Represents the largest possible value of RotationalSpeed
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalSpeed.MinValue">
            <summary>
            Represents the smallest possible value of RotationalSpeed
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalSpeed.Type">
            <summary>
                The <see cref="P:UnitsNet.RotationalSpeed.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalSpeed.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.RotationalSpeed.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="T:UnitsNet.RotationalStiffness">
            <summary>
                https://en.wikipedia.org/wiki/Stiffness#Rotational_stiffness
            </summary>
            <summary>
                https://en.wikipedia.org/wiki/Stiffness#Rotational_stiffness
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalStiffness.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.GetAbbreviation(UnitsNet.Units.RotationalStiffnessUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.TryParse(System.String,System.IFormatProvider,UnitsNet.RotationalStiffness@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.RotationalStiffnessUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.ToString(UnitsNet.Units.RotationalStiffnessUnit,System.IFormatProvider)">
            <summary>
                Get string representation of value and unit. Using two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.ToString(UnitsNet.Units.RotationalStiffnessUnit,System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.ToString(UnitsNet.Units.RotationalStiffnessUnit,System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">Unit representation to use.</param>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
        </member>
        <member name="F:UnitsNet.RotationalStiffness._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.RotationalStiffness._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalStiffness.Unit">
            <summary>
                The unit this quantity was constructed with -or- <see cref="P:UnitsNet.RotationalStiffness.BaseUnit" /> if default ctor was used.
            </summary>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.#ctor(System.Double,UnitsNet.Units.RotationalStiffnessUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="numericValue">The numeric value  to contruct this quantity with.</param>
            <param name="unit">The unit representation to contruct this quantity with.</param>
            <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="P:UnitsNet.RotationalStiffness.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.RotationalStiffness.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalStiffness.BaseUnit">
            <summary>
                The base unit of RotationalStiffness, which is NewtonMeterPerRadian. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalStiffness.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.RotationalStiffness.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalStiffness.Units">
            <summary>
                All units of measurement for the RotationalStiffness quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalStiffness.KilonewtonMetersPerRadian">
            <summary>
                Get RotationalStiffness in KilonewtonMetersPerRadian.
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalStiffness.MeganewtonMetersPerRadian">
            <summary>
                Get RotationalStiffness in MeganewtonMetersPerRadian.
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalStiffness.NewtonMetersPerRadian">
            <summary>
                Get RotationalStiffness in NewtonMetersPerRadian.
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalStiffness.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit NewtonMeterPerRadian.
            </summary>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.FromKilonewtonMetersPerRadian(UnitsNet.QuantityValue)">
            <summary>
                Get RotationalStiffness from KilonewtonMetersPerRadian.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.FromMeganewtonMetersPerRadian(UnitsNet.QuantityValue)">
            <summary>
                Get RotationalStiffness from MeganewtonMetersPerRadian.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.FromNewtonMetersPerRadian(UnitsNet.QuantityValue)">
            <summary>
                Get RotationalStiffness from NewtonMetersPerRadian.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.From(UnitsNet.QuantityValue,UnitsNet.Units.RotationalStiffnessUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.RotationalStiffnessUnit" /> to <see cref="T:UnitsNet.RotationalStiffness" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>RotationalStiffness unit value.</returns>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.GetAbbreviation(UnitsNet.Units.RotationalStiffnessUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.Equals(UnitsNet.RotationalStiffness,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another RotationalStiffness within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current RotationalStiffness.</returns>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.As(UnitsNet.Units.RotationalStiffnessUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.ToUnit(UnitsNet.Units.RotationalStiffnessUnit)">
            <summary>
                Converts this RotationalStiffness to another RotationalStiffness with the unit representation <paramref name="unit" />.
            </summary>
            <returns>A RotationalStiffness with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.AsBaseUnit">
            <summary>
                Converts the current value + unit to the base unit.
                This is typically the first step in converting from one unit to another.
            </summary>
            <returns>The value in the base unit representation.</returns>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.TryParse(System.String,UnitsNet.RotationalStiffness@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.ParseInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.TryParseInternal(System.String,System.IFormatProvider,UnitsNet.RotationalStiffness@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.ParseUnitInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.TryParseUnitInternal(System.String,System.IFormatProvider,UnitsNet.Units.RotationalStiffnessUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.ToString">
            <summary>
                Get default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.RotationalStiffness.ToString(UnitsNet.Units.RotationalStiffnessUnit)">
            <summary>
                Get string representation of value and unit. Using current UI culture and two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <returns>String representation.</returns>
        </member>
        <member name="P:UnitsNet.RotationalStiffness.MaxValue">
            <summary>
            Represents the largest possible value of RotationalStiffness
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalStiffness.MinValue">
            <summary>
            Represents the smallest possible value of RotationalStiffness
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalStiffness.Type">
            <summary>
                The <see cref="P:UnitsNet.RotationalStiffness.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalStiffness.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.RotationalStiffness.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="T:UnitsNet.RotationalStiffnessPerLength">
            <summary>
                https://en.wikipedia.org/wiki/Stiffness#Rotational_stiffness
            </summary>
            <summary>
                https://en.wikipedia.org/wiki/Stiffness#Rotational_stiffness
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalStiffnessPerLength.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.RotationalStiffnessPerLength.GetAbbreviation(UnitsNet.Units.RotationalStiffnessPerLengthUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.RotationalStiffnessPerLength.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.RotationalStiffnessPerLength.TryParse(System.String,System.IFormatProvider,UnitsNet.RotationalStiffnessPerLength@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.RotationalStiffnessPerLength.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.RotationalStiffnessPerLength.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.RotationalStiffnessPerLengthUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.RotationalStiffnessPerLength.ToString(UnitsNet.Units.RotationalStiffnessPerLengthUnit,System.IFormatProvider)">
            <summary>
                Get string representation of value and unit. Using two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.RotationalStiffnessPerLength.ToString(UnitsNet.Units.RotationalStiffnessPerLengthUnit,System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.RotationalStiffnessPerLength.ToString(UnitsNet.Units.RotationalStiffnessPerLengthUnit,System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">Unit representation to use.</param>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
        </member>
        <member name="F:UnitsNet.RotationalStiffnessPerLength._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.RotationalStiffnessPerLength._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalStiffnessPerLength.Unit">
            <summary>
                The unit this quantity was constructed with -or- <see cref="P:UnitsNet.RotationalStiffnessPerLength.BaseUnit" /> if default ctor was used.
            </summary>
        </member>
        <member name="M:UnitsNet.RotationalStiffnessPerLength.#ctor(System.Double,UnitsNet.Units.RotationalStiffnessPerLengthUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="numericValue">The numeric value  to contruct this quantity with.</param>
            <param name="unit">The unit representation to contruct this quantity with.</param>
            <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="P:UnitsNet.RotationalStiffnessPerLength.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.RotationalStiffnessPerLength.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalStiffnessPerLength.BaseUnit">
            <summary>
                The base unit of RotationalStiffnessPerLength, which is NewtonMeterPerRadianPerMeter. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalStiffnessPerLength.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.RotationalStiffnessPerLength.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalStiffnessPerLength.Units">
            <summary>
                All units of measurement for the RotationalStiffnessPerLength quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalStiffnessPerLength.KilonewtonMetersPerRadianPerMeter">
            <summary>
                Get RotationalStiffnessPerLength in KilonewtonMetersPerRadianPerMeter.
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalStiffnessPerLength.MeganewtonMetersPerRadianPerMeter">
            <summary>
                Get RotationalStiffnessPerLength in MeganewtonMetersPerRadianPerMeter.
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalStiffnessPerLength.NewtonMetersPerRadianPerMeter">
            <summary>
                Get RotationalStiffnessPerLength in NewtonMetersPerRadianPerMeter.
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalStiffnessPerLength.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit NewtonMeterPerRadianPerMeter.
            </summary>
        </member>
        <member name="M:UnitsNet.RotationalStiffnessPerLength.FromKilonewtonMetersPerRadianPerMeter(UnitsNet.QuantityValue)">
            <summary>
                Get RotationalStiffnessPerLength from KilonewtonMetersPerRadianPerMeter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.RotationalStiffnessPerLength.FromMeganewtonMetersPerRadianPerMeter(UnitsNet.QuantityValue)">
            <summary>
                Get RotationalStiffnessPerLength from MeganewtonMetersPerRadianPerMeter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.RotationalStiffnessPerLength.FromNewtonMetersPerRadianPerMeter(UnitsNet.QuantityValue)">
            <summary>
                Get RotationalStiffnessPerLength from NewtonMetersPerRadianPerMeter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.RotationalStiffnessPerLength.From(UnitsNet.QuantityValue,UnitsNet.Units.RotationalStiffnessPerLengthUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.RotationalStiffnessPerLengthUnit" /> to <see cref="T:UnitsNet.RotationalStiffnessPerLength" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>RotationalStiffnessPerLength unit value.</returns>
        </member>
        <member name="M:UnitsNet.RotationalStiffnessPerLength.GetAbbreviation(UnitsNet.Units.RotationalStiffnessPerLengthUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.RotationalStiffnessPerLength.Equals(UnitsNet.RotationalStiffnessPerLength,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another RotationalStiffnessPerLength within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.RotationalStiffnessPerLength.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current RotationalStiffnessPerLength.</returns>
        </member>
        <member name="M:UnitsNet.RotationalStiffnessPerLength.As(UnitsNet.Units.RotationalStiffnessPerLengthUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.RotationalStiffnessPerLength.ToUnit(UnitsNet.Units.RotationalStiffnessPerLengthUnit)">
            <summary>
                Converts this RotationalStiffnessPerLength to another RotationalStiffnessPerLength with the unit representation <paramref name="unit" />.
            </summary>
            <returns>A RotationalStiffnessPerLength with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.RotationalStiffnessPerLength.AsBaseUnit">
            <summary>
                Converts the current value + unit to the base unit.
                This is typically the first step in converting from one unit to another.
            </summary>
            <returns>The value in the base unit representation.</returns>
        </member>
        <member name="M:UnitsNet.RotationalStiffnessPerLength.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.RotationalStiffnessPerLength.TryParse(System.String,UnitsNet.RotationalStiffnessPerLength@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.RotationalStiffnessPerLength.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.RotationalStiffnessPerLength.ParseInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.RotationalStiffnessPerLength.TryParseInternal(System.String,System.IFormatProvider,UnitsNet.RotationalStiffnessPerLength@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.RotationalStiffnessPerLength.ParseUnitInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.RotationalStiffnessPerLength.TryParseUnitInternal(System.String,System.IFormatProvider,UnitsNet.Units.RotationalStiffnessPerLengthUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.RotationalStiffnessPerLength.ToString">
            <summary>
                Get default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.RotationalStiffnessPerLength.ToString(UnitsNet.Units.RotationalStiffnessPerLengthUnit)">
            <summary>
                Get string representation of value and unit. Using current UI culture and two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <returns>String representation.</returns>
        </member>
        <member name="P:UnitsNet.RotationalStiffnessPerLength.MaxValue">
            <summary>
            Represents the largest possible value of RotationalStiffnessPerLength
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalStiffnessPerLength.MinValue">
            <summary>
            Represents the smallest possible value of RotationalStiffnessPerLength
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalStiffnessPerLength.Type">
            <summary>
                The <see cref="P:UnitsNet.RotationalStiffnessPerLength.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalStiffnessPerLength.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.RotationalStiffnessPerLength.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="T:UnitsNet.SpecificEnergy">
            <summary>
                The SpecificEnergy
            </summary>
            <summary>
                The SpecificEnergy
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificEnergy.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.GetAbbreviation(UnitsNet.Units.SpecificEnergyUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.TryParse(System.String,System.IFormatProvider,UnitsNet.SpecificEnergy@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.SpecificEnergyUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.ToString(UnitsNet.Units.SpecificEnergyUnit,System.IFormatProvider)">
            <summary>
                Get string representation of value and unit. Using two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.ToString(UnitsNet.Units.SpecificEnergyUnit,System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.ToString(UnitsNet.Units.SpecificEnergyUnit,System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">Unit representation to use.</param>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
        </member>
        <member name="F:UnitsNet.SpecificEnergy._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.SpecificEnergy._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificEnergy.Unit">
            <summary>
                The unit this quantity was constructed with -or- <see cref="P:UnitsNet.SpecificEnergy.BaseUnit" /> if default ctor was used.
            </summary>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.#ctor(System.Double,UnitsNet.Units.SpecificEnergyUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="numericValue">The numeric value  to contruct this quantity with.</param>
            <param name="unit">The unit representation to contruct this quantity with.</param>
            <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="P:UnitsNet.SpecificEnergy.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.SpecificEnergy.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificEnergy.BaseUnit">
            <summary>
                The base unit of SpecificEnergy, which is JoulePerKilogram. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificEnergy.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.SpecificEnergy.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificEnergy.Units">
            <summary>
                All units of measurement for the SpecificEnergy quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificEnergy.CaloriesPerGram">
            <summary>
                Get SpecificEnergy in CaloriesPerGram.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificEnergy.JoulesPerKilogram">
            <summary>
                Get SpecificEnergy in JoulesPerKilogram.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificEnergy.KilocaloriesPerGram">
            <summary>
                Get SpecificEnergy in KilocaloriesPerGram.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificEnergy.KilojoulesPerKilogram">
            <summary>
                Get SpecificEnergy in KilojoulesPerKilogram.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificEnergy.KilowattHoursPerKilogram">
            <summary>
                Get SpecificEnergy in KilowattHoursPerKilogram.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificEnergy.MegajoulesPerKilogram">
            <summary>
                Get SpecificEnergy in MegajoulesPerKilogram.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificEnergy.MegawattHoursPerKilogram">
            <summary>
                Get SpecificEnergy in MegawattHoursPerKilogram.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificEnergy.WattHoursPerKilogram">
            <summary>
                Get SpecificEnergy in WattHoursPerKilogram.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificEnergy.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit JoulePerKilogram.
            </summary>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.FromCaloriesPerGram(UnitsNet.QuantityValue)">
            <summary>
                Get SpecificEnergy from CaloriesPerGram.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.FromJoulesPerKilogram(UnitsNet.QuantityValue)">
            <summary>
                Get SpecificEnergy from JoulesPerKilogram.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.FromKilocaloriesPerGram(UnitsNet.QuantityValue)">
            <summary>
                Get SpecificEnergy from KilocaloriesPerGram.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.FromKilojoulesPerKilogram(UnitsNet.QuantityValue)">
            <summary>
                Get SpecificEnergy from KilojoulesPerKilogram.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.FromKilowattHoursPerKilogram(UnitsNet.QuantityValue)">
            <summary>
                Get SpecificEnergy from KilowattHoursPerKilogram.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.FromMegajoulesPerKilogram(UnitsNet.QuantityValue)">
            <summary>
                Get SpecificEnergy from MegajoulesPerKilogram.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.FromMegawattHoursPerKilogram(UnitsNet.QuantityValue)">
            <summary>
                Get SpecificEnergy from MegawattHoursPerKilogram.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.FromWattHoursPerKilogram(UnitsNet.QuantityValue)">
            <summary>
                Get SpecificEnergy from WattHoursPerKilogram.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.From(UnitsNet.QuantityValue,UnitsNet.Units.SpecificEnergyUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.SpecificEnergyUnit" /> to <see cref="T:UnitsNet.SpecificEnergy" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>SpecificEnergy unit value.</returns>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.GetAbbreviation(UnitsNet.Units.SpecificEnergyUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.Equals(UnitsNet.SpecificEnergy,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another SpecificEnergy within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current SpecificEnergy.</returns>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.As(UnitsNet.Units.SpecificEnergyUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.ToUnit(UnitsNet.Units.SpecificEnergyUnit)">
            <summary>
                Converts this SpecificEnergy to another SpecificEnergy with the unit representation <paramref name="unit" />.
            </summary>
            <returns>A SpecificEnergy with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.AsBaseUnit">
            <summary>
                Converts the current value + unit to the base unit.
                This is typically the first step in converting from one unit to another.
            </summary>
            <returns>The value in the base unit representation.</returns>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.TryParse(System.String,UnitsNet.SpecificEnergy@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.ParseInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.TryParseInternal(System.String,System.IFormatProvider,UnitsNet.SpecificEnergy@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.ParseUnitInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.TryParseUnitInternal(System.String,System.IFormatProvider,UnitsNet.Units.SpecificEnergyUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.ToString">
            <summary>
                Get default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.SpecificEnergy.ToString(UnitsNet.Units.SpecificEnergyUnit)">
            <summary>
                Get string representation of value and unit. Using current UI culture and two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <returns>String representation.</returns>
        </member>
        <member name="P:UnitsNet.SpecificEnergy.MaxValue">
            <summary>
            Represents the largest possible value of SpecificEnergy
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificEnergy.MinValue">
            <summary>
            Represents the smallest possible value of SpecificEnergy
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificEnergy.Type">
            <summary>
                The <see cref="P:UnitsNet.SpecificEnergy.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificEnergy.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.SpecificEnergy.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="T:UnitsNet.SpecificVolume">
            <summary>
                In thermodynamics, the specific volume of a substance is the ratio of the substance's volume to its mass. It is the reciprocal of density and an intrinsic property of matter as well.
            </summary>
            <summary>
                In thermodynamics, the specific volume of a substance is the ratio of the substance's volume to its mass. It is the reciprocal of density and an intrinsic property of matter as well.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificVolume.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.SpecificVolume.GetAbbreviation(UnitsNet.Units.SpecificVolumeUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.SpecificVolume.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.SpecificVolume.TryParse(System.String,System.IFormatProvider,UnitsNet.SpecificVolume@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.SpecificVolume.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.SpecificVolume.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.SpecificVolumeUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.SpecificVolume.ToString(UnitsNet.Units.SpecificVolumeUnit,System.IFormatProvider)">
            <summary>
                Get string representation of value and unit. Using two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.SpecificVolume.ToString(UnitsNet.Units.SpecificVolumeUnit,System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.SpecificVolume.ToString(UnitsNet.Units.SpecificVolumeUnit,System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">Unit representation to use.</param>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
        </member>
        <member name="F:UnitsNet.SpecificVolume._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.SpecificVolume._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificVolume.Unit">
            <summary>
                The unit this quantity was constructed with -or- <see cref="P:UnitsNet.SpecificVolume.BaseUnit" /> if default ctor was used.
            </summary>
        </member>
        <member name="M:UnitsNet.SpecificVolume.#ctor(System.Double,UnitsNet.Units.SpecificVolumeUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="numericValue">The numeric value  to contruct this quantity with.</param>
            <param name="unit">The unit representation to contruct this quantity with.</param>
            <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="P:UnitsNet.SpecificVolume.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.SpecificVolume.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificVolume.BaseUnit">
            <summary>
                The base unit of SpecificVolume, which is CubicMeterPerKilogram. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificVolume.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.SpecificVolume.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificVolume.Units">
            <summary>
                All units of measurement for the SpecificVolume quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificVolume.CubicFeetPerPound">
            <summary>
                Get SpecificVolume in CubicFeetPerPound.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificVolume.CubicMetersPerKilogram">
            <summary>
                Get SpecificVolume in CubicMetersPerKilogram.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificVolume.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit CubicMeterPerKilogram.
            </summary>
        </member>
        <member name="M:UnitsNet.SpecificVolume.FromCubicFeetPerPound(UnitsNet.QuantityValue)">
            <summary>
                Get SpecificVolume from CubicFeetPerPound.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.SpecificVolume.FromCubicMetersPerKilogram(UnitsNet.QuantityValue)">
            <summary>
                Get SpecificVolume from CubicMetersPerKilogram.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.SpecificVolume.From(UnitsNet.QuantityValue,UnitsNet.Units.SpecificVolumeUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.SpecificVolumeUnit" /> to <see cref="T:UnitsNet.SpecificVolume" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>SpecificVolume unit value.</returns>
        </member>
        <member name="M:UnitsNet.SpecificVolume.GetAbbreviation(UnitsNet.Units.SpecificVolumeUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.SpecificVolume.Equals(UnitsNet.SpecificVolume,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another SpecificVolume within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.SpecificVolume.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current SpecificVolume.</returns>
        </member>
        <member name="M:UnitsNet.SpecificVolume.As(UnitsNet.Units.SpecificVolumeUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.SpecificVolume.ToUnit(UnitsNet.Units.SpecificVolumeUnit)">
            <summary>
                Converts this SpecificVolume to another SpecificVolume with the unit representation <paramref name="unit" />.
            </summary>
            <returns>A SpecificVolume with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.SpecificVolume.AsBaseUnit">
            <summary>
                Converts the current value + unit to the base unit.
                This is typically the first step in converting from one unit to another.
            </summary>
            <returns>The value in the base unit representation.</returns>
        </member>
        <member name="M:UnitsNet.SpecificVolume.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.SpecificVolume.TryParse(System.String,UnitsNet.SpecificVolume@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.SpecificVolume.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.SpecificVolume.ParseInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.SpecificVolume.TryParseInternal(System.String,System.IFormatProvider,UnitsNet.SpecificVolume@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.SpecificVolume.ParseUnitInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.SpecificVolume.TryParseUnitInternal(System.String,System.IFormatProvider,UnitsNet.Units.SpecificVolumeUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.SpecificVolume.ToString">
            <summary>
                Get default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.SpecificVolume.ToString(UnitsNet.Units.SpecificVolumeUnit)">
            <summary>
                Get string representation of value and unit. Using current UI culture and two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <returns>String representation.</returns>
        </member>
        <member name="P:UnitsNet.SpecificVolume.MaxValue">
            <summary>
            Represents the largest possible value of SpecificVolume
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificVolume.MinValue">
            <summary>
            Represents the smallest possible value of SpecificVolume
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificVolume.Type">
            <summary>
                The <see cref="P:UnitsNet.SpecificVolume.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificVolume.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.SpecificVolume.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="T:UnitsNet.SpecificWeight">
            <summary>
                The SpecificWeight, or more precisely, the volumetric weight density, of a substance is its weight per unit volume.
            </summary>
            <summary>
                The SpecificWeight, or more precisely, the volumetric weight density, of a substance is its weight per unit volume.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificWeight.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.SpecificWeight.GetAbbreviation(UnitsNet.Units.SpecificWeightUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.SpecificWeight.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.SpecificWeight.TryParse(System.String,System.IFormatProvider,UnitsNet.SpecificWeight@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.SpecificWeight.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.SpecificWeight.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.SpecificWeightUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.SpecificWeight.ToString(UnitsNet.Units.SpecificWeightUnit,System.IFormatProvider)">
            <summary>
                Get string representation of value and unit. Using two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.SpecificWeight.ToString(UnitsNet.Units.SpecificWeightUnit,System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.SpecificWeight.ToString(UnitsNet.Units.SpecificWeightUnit,System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">Unit representation to use.</param>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
        </member>
        <member name="F:UnitsNet.SpecificWeight._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.SpecificWeight._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificWeight.Unit">
            <summary>
                The unit this quantity was constructed with -or- <see cref="P:UnitsNet.SpecificWeight.BaseUnit" /> if default ctor was used.
            </summary>
        </member>
        <member name="M:UnitsNet.SpecificWeight.#ctor(System.Double,UnitsNet.Units.SpecificWeightUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="numericValue">The numeric value  to contruct this quantity with.</param>
            <param name="unit">The unit representation to contruct this quantity with.</param>
            <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="P:UnitsNet.SpecificWeight.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.SpecificWeight.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificWeight.BaseUnit">
            <summary>
                The base unit of SpecificWeight, which is NewtonPerCubicMeter. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificWeight.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.SpecificWeight.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificWeight.Units">
            <summary>
                All units of measurement for the SpecificWeight quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificWeight.KilogramsForcePerCubicCentimeter">
            <summary>
                Get SpecificWeight in KilogramsForcePerCubicCentimeter.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificWeight.KilogramsForcePerCubicMeter">
            <summary>
                Get SpecificWeight in KilogramsForcePerCubicMeter.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificWeight.KilogramsForcePerCubicMillimeter">
            <summary>
                Get SpecificWeight in KilogramsForcePerCubicMillimeter.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificWeight.KilonewtonsPerCubicCentimeter">
            <summary>
                Get SpecificWeight in KilonewtonsPerCubicCentimeter.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificWeight.KilonewtonsPerCubicMeter">
            <summary>
                Get SpecificWeight in KilonewtonsPerCubicMeter.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificWeight.KilonewtonsPerCubicMillimeter">
            <summary>
                Get SpecificWeight in KilonewtonsPerCubicMillimeter.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificWeight.KilopoundsForcePerCubicFoot">
            <summary>
                Get SpecificWeight in KilopoundsForcePerCubicFoot.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificWeight.KilopoundsForcePerCubicInch">
            <summary>
                Get SpecificWeight in KilopoundsForcePerCubicInch.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificWeight.MeganewtonsPerCubicMeter">
            <summary>
                Get SpecificWeight in MeganewtonsPerCubicMeter.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificWeight.NewtonsPerCubicCentimeter">
            <summary>
                Get SpecificWeight in NewtonsPerCubicCentimeter.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificWeight.NewtonsPerCubicMeter">
            <summary>
                Get SpecificWeight in NewtonsPerCubicMeter.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificWeight.NewtonsPerCubicMillimeter">
            <summary>
                Get SpecificWeight in NewtonsPerCubicMillimeter.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificWeight.PoundsForcePerCubicFoot">
            <summary>
                Get SpecificWeight in PoundsForcePerCubicFoot.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificWeight.PoundsForcePerCubicInch">
            <summary>
                Get SpecificWeight in PoundsForcePerCubicInch.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificWeight.TonnesForcePerCubicCentimeter">
            <summary>
                Get SpecificWeight in TonnesForcePerCubicCentimeter.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificWeight.TonnesForcePerCubicMeter">
            <summary>
                Get SpecificWeight in TonnesForcePerCubicMeter.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificWeight.TonnesForcePerCubicMillimeter">
            <summary>
                Get SpecificWeight in TonnesForcePerCubicMillimeter.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificWeight.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit NewtonPerCubicMeter.
            </summary>
        </member>
        <member name="M:UnitsNet.SpecificWeight.FromKilogramsForcePerCubicCentimeter(UnitsNet.QuantityValue)">
            <summary>
                Get SpecificWeight from KilogramsForcePerCubicCentimeter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.SpecificWeight.FromKilogramsForcePerCubicMeter(UnitsNet.QuantityValue)">
            <summary>
                Get SpecificWeight from KilogramsForcePerCubicMeter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.SpecificWeight.FromKilogramsForcePerCubicMillimeter(UnitsNet.QuantityValue)">
            <summary>
                Get SpecificWeight from KilogramsForcePerCubicMillimeter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.SpecificWeight.FromKilonewtonsPerCubicCentimeter(UnitsNet.QuantityValue)">
            <summary>
                Get SpecificWeight from KilonewtonsPerCubicCentimeter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.SpecificWeight.FromKilonewtonsPerCubicMeter(UnitsNet.QuantityValue)">
            <summary>
                Get SpecificWeight from KilonewtonsPerCubicMeter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.SpecificWeight.FromKilonewtonsPerCubicMillimeter(UnitsNet.QuantityValue)">
            <summary>
                Get SpecificWeight from KilonewtonsPerCubicMillimeter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.SpecificWeight.FromKilopoundsForcePerCubicFoot(UnitsNet.QuantityValue)">
            <summary>
                Get SpecificWeight from KilopoundsForcePerCubicFoot.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.SpecificWeight.FromKilopoundsForcePerCubicInch(UnitsNet.QuantityValue)">
            <summary>
                Get SpecificWeight from KilopoundsForcePerCubicInch.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.SpecificWeight.FromMeganewtonsPerCubicMeter(UnitsNet.QuantityValue)">
            <summary>
                Get SpecificWeight from MeganewtonsPerCubicMeter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.SpecificWeight.FromNewtonsPerCubicCentimeter(UnitsNet.QuantityValue)">
            <summary>
                Get SpecificWeight from NewtonsPerCubicCentimeter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.SpecificWeight.FromNewtonsPerCubicMeter(UnitsNet.QuantityValue)">
            <summary>
                Get SpecificWeight from NewtonsPerCubicMeter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.SpecificWeight.FromNewtonsPerCubicMillimeter(UnitsNet.QuantityValue)">
            <summary>
                Get SpecificWeight from NewtonsPerCubicMillimeter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.SpecificWeight.FromPoundsForcePerCubicFoot(UnitsNet.QuantityValue)">
            <summary>
                Get SpecificWeight from PoundsForcePerCubicFoot.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.SpecificWeight.FromPoundsForcePerCubicInch(UnitsNet.QuantityValue)">
            <summary>
                Get SpecificWeight from PoundsForcePerCubicInch.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.SpecificWeight.FromTonnesForcePerCubicCentimeter(UnitsNet.QuantityValue)">
            <summary>
                Get SpecificWeight from TonnesForcePerCubicCentimeter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.SpecificWeight.FromTonnesForcePerCubicMeter(UnitsNet.QuantityValue)">
            <summary>
                Get SpecificWeight from TonnesForcePerCubicMeter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.SpecificWeight.FromTonnesForcePerCubicMillimeter(UnitsNet.QuantityValue)">
            <summary>
                Get SpecificWeight from TonnesForcePerCubicMillimeter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.SpecificWeight.From(UnitsNet.QuantityValue,UnitsNet.Units.SpecificWeightUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.SpecificWeightUnit" /> to <see cref="T:UnitsNet.SpecificWeight" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>SpecificWeight unit value.</returns>
        </member>
        <member name="M:UnitsNet.SpecificWeight.GetAbbreviation(UnitsNet.Units.SpecificWeightUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.SpecificWeight.Equals(UnitsNet.SpecificWeight,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another SpecificWeight within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.SpecificWeight.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current SpecificWeight.</returns>
        </member>
        <member name="M:UnitsNet.SpecificWeight.As(UnitsNet.Units.SpecificWeightUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.SpecificWeight.ToUnit(UnitsNet.Units.SpecificWeightUnit)">
            <summary>
                Converts this SpecificWeight to another SpecificWeight with the unit representation <paramref name="unit" />.
            </summary>
            <returns>A SpecificWeight with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.SpecificWeight.AsBaseUnit">
            <summary>
                Converts the current value + unit to the base unit.
                This is typically the first step in converting from one unit to another.
            </summary>
            <returns>The value in the base unit representation.</returns>
        </member>
        <member name="M:UnitsNet.SpecificWeight.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.SpecificWeight.TryParse(System.String,UnitsNet.SpecificWeight@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.SpecificWeight.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.SpecificWeight.ParseInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.SpecificWeight.TryParseInternal(System.String,System.IFormatProvider,UnitsNet.SpecificWeight@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.SpecificWeight.ParseUnitInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.SpecificWeight.TryParseUnitInternal(System.String,System.IFormatProvider,UnitsNet.Units.SpecificWeightUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.SpecificWeight.ToString">
            <summary>
                Get default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.SpecificWeight.ToString(UnitsNet.Units.SpecificWeightUnit)">
            <summary>
                Get string representation of value and unit. Using current UI culture and two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <returns>String representation.</returns>
        </member>
        <member name="P:UnitsNet.SpecificWeight.MaxValue">
            <summary>
            Represents the largest possible value of SpecificWeight
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificWeight.MinValue">
            <summary>
            Represents the smallest possible value of SpecificWeight
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificWeight.Type">
            <summary>
                The <see cref="P:UnitsNet.SpecificWeight.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificWeight.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.SpecificWeight.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="T:UnitsNet.Speed">
            <summary>
                In everyday use and in kinematics, the speed of an object is the magnitude of its velocity (the rate of change of its position); it is thus a scalar quantity.[1] The average speed of an object in an interval of time is the distance travelled by the object divided by the duration of the interval;[2] the instantaneous speed is the limit of the average speed as the duration of the time interval approaches zero.
            </summary>
            <summary>
                In everyday use and in kinematics, the speed of an object is the magnitude of its velocity (the rate of change of its position); it is thus a scalar quantity.[1] The average speed of an object in an interval of time is the distance travelled by the object divided by the duration of the interval;[2] the instantaneous speed is the limit of the average speed as the duration of the time interval approaches zero.
            </summary>
        </member>
        <member name="P:UnitsNet.Speed.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.Speed.GetAbbreviation(UnitsNet.Units.SpeedUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.Speed.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Speed.TryParse(System.String,System.IFormatProvider,UnitsNet.Speed@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Speed.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Speed.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.SpeedUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Speed.ToString(UnitsNet.Units.SpeedUnit,System.IFormatProvider)">
            <summary>
                Get string representation of value and unit. Using two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Speed.ToString(UnitsNet.Units.SpeedUnit,System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Speed.ToString(UnitsNet.Units.SpeedUnit,System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">Unit representation to use.</param>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
        </member>
        <member name="F:UnitsNet.Speed._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.Speed._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.Speed.Unit">
            <summary>
                The unit this quantity was constructed with -or- <see cref="P:UnitsNet.Speed.BaseUnit" /> if default ctor was used.
            </summary>
        </member>
        <member name="M:UnitsNet.Speed.#ctor(System.Double,UnitsNet.Units.SpeedUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="numericValue">The numeric value  to contruct this quantity with.</param>
            <param name="unit">The unit representation to contruct this quantity with.</param>
            <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="P:UnitsNet.Speed.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.Speed.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Speed.BaseUnit">
            <summary>
                The base unit of Speed, which is MeterPerSecond. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.Speed.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.Speed.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Speed.Units">
            <summary>
                All units of measurement for the Speed quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Speed.CentimetersPerHour">
            <summary>
                Get Speed in CentimetersPerHour.
            </summary>
        </member>
        <member name="P:UnitsNet.Speed.CentimetersPerMinutes">
            <summary>
                Get Speed in CentimetersPerMinutes.
            </summary>
        </member>
        <member name="P:UnitsNet.Speed.CentimetersPerSecond">
            <summary>
                Get Speed in CentimetersPerSecond.
            </summary>
        </member>
        <member name="P:UnitsNet.Speed.DecimetersPerMinutes">
            <summary>
                Get Speed in DecimetersPerMinutes.
            </summary>
        </member>
        <member name="P:UnitsNet.Speed.DecimetersPerSecond">
            <summary>
                Get Speed in DecimetersPerSecond.
            </summary>
        </member>
        <member name="P:UnitsNet.Speed.FeetPerHour">
            <summary>
                Get Speed in FeetPerHour.
            </summary>
        </member>
        <member name="P:UnitsNet.Speed.FeetPerMinute">
            <summary>
                Get Speed in FeetPerMinute.
            </summary>
        </member>
        <member name="P:UnitsNet.Speed.FeetPerSecond">
            <summary>
                Get Speed in FeetPerSecond.
            </summary>
        </member>
        <member name="P:UnitsNet.Speed.InchesPerHour">
            <summary>
                Get Speed in InchesPerHour.
            </summary>
        </member>
        <member name="P:UnitsNet.Speed.InchesPerMinute">
            <summary>
                Get Speed in InchesPerMinute.
            </summary>
        </member>
        <member name="P:UnitsNet.Speed.InchesPerSecond">
            <summary>
                Get Speed in InchesPerSecond.
            </summary>
        </member>
        <member name="P:UnitsNet.Speed.KilometersPerHour">
            <summary>
                Get Speed in KilometersPerHour.
            </summary>
        </member>
        <member name="P:UnitsNet.Speed.KilometersPerMinutes">
            <summary>
                Get Speed in KilometersPerMinutes.
            </summary>
        </member>
        <member name="P:UnitsNet.Speed.KilometersPerSecond">
            <summary>
                Get Speed in KilometersPerSecond.
            </summary>
        </member>
        <member name="P:UnitsNet.Speed.Knots">
            <summary>
                Get Speed in Knots.
            </summary>
        </member>
        <member name="P:UnitsNet.Speed.MetersPerHour">
            <summary>
                Get Speed in MetersPerHour.
            </summary>
        </member>
        <member name="P:UnitsNet.Speed.MetersPerMinutes">
            <summary>
                Get Speed in MetersPerMinutes.
            </summary>
        </member>
        <member name="P:UnitsNet.Speed.MetersPerSecond">
            <summary>
                Get Speed in MetersPerSecond.
            </summary>
        </member>
        <member name="P:UnitsNet.Speed.MicrometersPerMinutes">
            <summary>
                Get Speed in MicrometersPerMinutes.
            </summary>
        </member>
        <member name="P:UnitsNet.Speed.MicrometersPerSecond">
            <summary>
                Get Speed in MicrometersPerSecond.
            </summary>
        </member>
        <member name="P:UnitsNet.Speed.MilesPerHour">
            <summary>
                Get Speed in MilesPerHour.
            </summary>
        </member>
        <member name="P:UnitsNet.Speed.MillimetersPerHour">
            <summary>
                Get Speed in MillimetersPerHour.
            </summary>
        </member>
        <member name="P:UnitsNet.Speed.MillimetersPerMinutes">
            <summary>
                Get Speed in MillimetersPerMinutes.
            </summary>
        </member>
        <member name="P:UnitsNet.Speed.MillimetersPerSecond">
            <summary>
                Get Speed in MillimetersPerSecond.
            </summary>
        </member>
        <member name="P:UnitsNet.Speed.NanometersPerMinutes">
            <summary>
                Get Speed in NanometersPerMinutes.
            </summary>
        </member>
        <member name="P:UnitsNet.Speed.NanometersPerSecond">
            <summary>
                Get Speed in NanometersPerSecond.
            </summary>
        </member>
        <member name="P:UnitsNet.Speed.UsSurveyFeetPerHour">
            <summary>
                Get Speed in UsSurveyFeetPerHour.
            </summary>
        </member>
        <member name="P:UnitsNet.Speed.UsSurveyFeetPerMinute">
            <summary>
                Get Speed in UsSurveyFeetPerMinute.
            </summary>
        </member>
        <member name="P:UnitsNet.Speed.UsSurveyFeetPerSecond">
            <summary>
                Get Speed in UsSurveyFeetPerSecond.
            </summary>
        </member>
        <member name="P:UnitsNet.Speed.YardsPerHour">
            <summary>
                Get Speed in YardsPerHour.
            </summary>
        </member>
        <member name="P:UnitsNet.Speed.YardsPerMinute">
            <summary>
                Get Speed in YardsPerMinute.
            </summary>
        </member>
        <member name="P:UnitsNet.Speed.YardsPerSecond">
            <summary>
                Get Speed in YardsPerSecond.
            </summary>
        </member>
        <member name="P:UnitsNet.Speed.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit MeterPerSecond.
            </summary>
        </member>
        <member name="M:UnitsNet.Speed.FromCentimetersPerHour(UnitsNet.QuantityValue)">
            <summary>
                Get Speed from CentimetersPerHour.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Speed.FromCentimetersPerMinutes(UnitsNet.QuantityValue)">
            <summary>
                Get Speed from CentimetersPerMinutes.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Speed.FromCentimetersPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Get Speed from CentimetersPerSecond.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Speed.FromDecimetersPerMinutes(UnitsNet.QuantityValue)">
            <summary>
                Get Speed from DecimetersPerMinutes.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Speed.FromDecimetersPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Get Speed from DecimetersPerSecond.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Speed.FromFeetPerHour(UnitsNet.QuantityValue)">
            <summary>
                Get Speed from FeetPerHour.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Speed.FromFeetPerMinute(UnitsNet.QuantityValue)">
            <summary>
                Get Speed from FeetPerMinute.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Speed.FromFeetPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Get Speed from FeetPerSecond.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Speed.FromInchesPerHour(UnitsNet.QuantityValue)">
            <summary>
                Get Speed from InchesPerHour.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Speed.FromInchesPerMinute(UnitsNet.QuantityValue)">
            <summary>
                Get Speed from InchesPerMinute.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Speed.FromInchesPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Get Speed from InchesPerSecond.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Speed.FromKilometersPerHour(UnitsNet.QuantityValue)">
            <summary>
                Get Speed from KilometersPerHour.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Speed.FromKilometersPerMinutes(UnitsNet.QuantityValue)">
            <summary>
                Get Speed from KilometersPerMinutes.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Speed.FromKilometersPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Get Speed from KilometersPerSecond.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Speed.FromKnots(UnitsNet.QuantityValue)">
            <summary>
                Get Speed from Knots.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Speed.FromMetersPerHour(UnitsNet.QuantityValue)">
            <summary>
                Get Speed from MetersPerHour.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Speed.FromMetersPerMinutes(UnitsNet.QuantityValue)">
            <summary>
                Get Speed from MetersPerMinutes.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Speed.FromMetersPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Get Speed from MetersPerSecond.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Speed.FromMicrometersPerMinutes(UnitsNet.QuantityValue)">
            <summary>
                Get Speed from MicrometersPerMinutes.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Speed.FromMicrometersPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Get Speed from MicrometersPerSecond.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Speed.FromMilesPerHour(UnitsNet.QuantityValue)">
            <summary>
                Get Speed from MilesPerHour.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Speed.FromMillimetersPerHour(UnitsNet.QuantityValue)">
            <summary>
                Get Speed from MillimetersPerHour.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Speed.FromMillimetersPerMinutes(UnitsNet.QuantityValue)">
            <summary>
                Get Speed from MillimetersPerMinutes.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Speed.FromMillimetersPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Get Speed from MillimetersPerSecond.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Speed.FromNanometersPerMinutes(UnitsNet.QuantityValue)">
            <summary>
                Get Speed from NanometersPerMinutes.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Speed.FromNanometersPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Get Speed from NanometersPerSecond.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Speed.FromUsSurveyFeetPerHour(UnitsNet.QuantityValue)">
            <summary>
                Get Speed from UsSurveyFeetPerHour.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Speed.FromUsSurveyFeetPerMinute(UnitsNet.QuantityValue)">
            <summary>
                Get Speed from UsSurveyFeetPerMinute.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Speed.FromUsSurveyFeetPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Get Speed from UsSurveyFeetPerSecond.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Speed.FromYardsPerHour(UnitsNet.QuantityValue)">
            <summary>
                Get Speed from YardsPerHour.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Speed.FromYardsPerMinute(UnitsNet.QuantityValue)">
            <summary>
                Get Speed from YardsPerMinute.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Speed.FromYardsPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Get Speed from YardsPerSecond.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Speed.From(UnitsNet.QuantityValue,UnitsNet.Units.SpeedUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.SpeedUnit" /> to <see cref="T:UnitsNet.Speed" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>Speed unit value.</returns>
        </member>
        <member name="M:UnitsNet.Speed.GetAbbreviation(UnitsNet.Units.SpeedUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.Speed.Equals(UnitsNet.Speed,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another Speed within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.Speed.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current Speed.</returns>
        </member>
        <member name="M:UnitsNet.Speed.As(UnitsNet.Units.SpeedUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Speed.ToUnit(UnitsNet.Units.SpeedUnit)">
            <summary>
                Converts this Speed to another Speed with the unit representation <paramref name="unit" />.
            </summary>
            <returns>A Speed with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Speed.AsBaseUnit">
            <summary>
                Converts the current value + unit to the base unit.
                This is typically the first step in converting from one unit to another.
            </summary>
            <returns>The value in the base unit representation.</returns>
        </member>
        <member name="M:UnitsNet.Speed.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Speed.TryParse(System.String,UnitsNet.Speed@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Speed.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Speed.ParseInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Speed.TryParseInternal(System.String,System.IFormatProvider,UnitsNet.Speed@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Speed.ParseUnitInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Speed.TryParseUnitInternal(System.String,System.IFormatProvider,UnitsNet.Units.SpeedUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Speed.ToString">
            <summary>
                Get default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Speed.ToString(UnitsNet.Units.SpeedUnit)">
            <summary>
                Get string representation of value and unit. Using current UI culture and two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <returns>String representation.</returns>
        </member>
        <member name="P:UnitsNet.Speed.MaxValue">
            <summary>
            Represents the largest possible value of Speed
            </summary>
        </member>
        <member name="P:UnitsNet.Speed.MinValue">
            <summary>
            Represents the smallest possible value of Speed
            </summary>
        </member>
        <member name="P:UnitsNet.Speed.Type">
            <summary>
                The <see cref="P:UnitsNet.Speed.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Speed.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.Speed.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="T:UnitsNet.Temperature">
            <summary>
                A temperature is a numerical measure of hot or cold. Its measurement is by detection of heat radiation or particle velocity or kinetic energy, or by the bulk behavior of a thermometric material. It may be calibrated in any of various temperature scales, Celsius, Fahrenheit, Kelvin, etc. The fundamental physical definition of temperature is provided by thermodynamics.
            </summary>
            <summary>
                A temperature is a numerical measure of hot or cold. Its measurement is by detection of heat radiation or particle velocity or kinetic energy, or by the bulk behavior of a thermometric material. It may be calibrated in any of various temperature scales, Celsius, Fahrenheit, Kelvin, etc. The fundamental physical definition of temperature is provided by thermodynamics.
            </summary>
        </member>
        <member name="M:UnitsNet.Temperature.op_Addition(UnitsNet.Temperature,UnitsNet.TemperatureDelta)">
            <summary>
                Add a <see cref="T:UnitsNet.Temperature" /> and a <see cref="T:UnitsNet.TemperatureDelta" />.
            </summary>
            <remarks>Due to temperature units having different scales, the arithmetic must be performed on the same scale.</remarks>
            <returns>The new temperature.</returns>
        </member>
        <member name="M:UnitsNet.Temperature.op_Addition(UnitsNet.TemperatureDelta,UnitsNet.Temperature)">
            <summary>
                Add a <see cref="T:UnitsNet.TemperatureDelta" /> and a <see cref="T:UnitsNet.Temperature" />.
            </summary>
            <remarks>Due to temperature units having different scales, the arithmetic must be performed on the same scale.</remarks>
            <returns>The new temperature.</returns>
        </member>
        <member name="M:UnitsNet.Temperature.op_Subtraction(UnitsNet.Temperature,UnitsNet.TemperatureDelta)">
            <summary>
                Subtract a <see cref="T:UnitsNet.Temperature" /> by a <see cref="T:UnitsNet.TemperatureDelta" />.
            </summary>
            <remarks>Due to temperature units having different scales, the arithmetic must be performed on the same scale.</remarks>
            <returns>The new temperature.</returns>
        </member>
        <member name="M:UnitsNet.Temperature.op_Subtraction(UnitsNet.Temperature,UnitsNet.Temperature)">
            <summary>
                Subtract a <see cref="T:UnitsNet.Temperature" /> by a <see cref="T:UnitsNet.TemperatureDelta" />.
            </summary>
            <remarks>Due to temperature units having different scales, the arithmetic must be performed on the same scale.</remarks>
            <returns>The delta temperature (difference).</returns>
        </member>
        <member name="M:UnitsNet.Temperature.Multiply(System.Double,UnitsNet.Units.TemperatureUnit)">
            <summary>
                Multiply temperature with a <paramref name="factor" /> in a given <paramref name="unit" />.
            </summary>
            <remarks>
                Due to different temperature units having different zero points, we cannot simply
                multiply or divide a temperature by a factor. We must first convert to the desired unit, then perform the
                calculation.
            </remarks>
            <param name="factor">Factor to multiply by.</param>
            <param name="unit">Unit to perform multiplication in.</param>
            <returns>The resulting <see cref="T:UnitsNet.Temperature" />.</returns>
        </member>
        <member name="M:UnitsNet.Temperature.Divide(System.Double,UnitsNet.Units.TemperatureUnit)">
            <summary>
                Divide temperature by a <paramref name="divisor" /> in a given <paramref name="unit" />.
            </summary>
            <remarks>
                Due to different temperature units having different zero points, we cannot simply
                multiply or divide a temperature by a factor. We must first convert to the desired unit, then perform the
                calculation.
            </remarks>
            <param name="divisor">Factor to multiply by.</param>
            <param name="unit">Unit to perform multiplication in.</param>
            <returns>The resulting <see cref="T:UnitsNet.Temperature" />.</returns>
        </member>
        <member name="P:UnitsNet.Temperature.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.Temperature.GetAbbreviation(UnitsNet.Units.TemperatureUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.Temperature.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Temperature.TryParse(System.String,System.IFormatProvider,UnitsNet.Temperature@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Temperature.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Temperature.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.TemperatureUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Temperature.ToString(UnitsNet.Units.TemperatureUnit,System.IFormatProvider)">
            <summary>
                Get string representation of value and unit. Using two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Temperature.ToString(UnitsNet.Units.TemperatureUnit,System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Temperature.ToString(UnitsNet.Units.TemperatureUnit,System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">Unit representation to use.</param>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
        </member>
        <member name="F:UnitsNet.Temperature._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.Temperature._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.Temperature.Unit">
            <summary>
                The unit this quantity was constructed with -or- <see cref="P:UnitsNet.Temperature.BaseUnit" /> if default ctor was used.
            </summary>
        </member>
        <member name="M:UnitsNet.Temperature.#ctor(System.Double,UnitsNet.Units.TemperatureUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="numericValue">The numeric value  to contruct this quantity with.</param>
            <param name="unit">The unit representation to contruct this quantity with.</param>
            <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="P:UnitsNet.Temperature.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.Temperature.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Temperature.BaseUnit">
            <summary>
                The base unit of Temperature, which is Kelvin. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.Temperature.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.Temperature.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Temperature.Units">
            <summary>
                All units of measurement for the Temperature quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Temperature.DegreesCelsius">
            <summary>
                Get Temperature in DegreesCelsius.
            </summary>
        </member>
        <member name="P:UnitsNet.Temperature.DegreesDelisle">
            <summary>
                Get Temperature in DegreesDelisle.
            </summary>
        </member>
        <member name="P:UnitsNet.Temperature.DegreesFahrenheit">
            <summary>
                Get Temperature in DegreesFahrenheit.
            </summary>
        </member>
        <member name="P:UnitsNet.Temperature.DegreesNewton">
            <summary>
                Get Temperature in DegreesNewton.
            </summary>
        </member>
        <member name="P:UnitsNet.Temperature.DegreesRankine">
            <summary>
                Get Temperature in DegreesRankine.
            </summary>
        </member>
        <member name="P:UnitsNet.Temperature.DegreesReaumur">
            <summary>
                Get Temperature in DegreesReaumur.
            </summary>
        </member>
        <member name="P:UnitsNet.Temperature.DegreesRoemer">
            <summary>
                Get Temperature in DegreesRoemer.
            </summary>
        </member>
        <member name="P:UnitsNet.Temperature.Kelvins">
            <summary>
                Get Temperature in Kelvins.
            </summary>
        </member>
        <member name="P:UnitsNet.Temperature.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit Kelvin.
            </summary>
        </member>
        <member name="M:UnitsNet.Temperature.FromDegreesCelsius(UnitsNet.QuantityValue)">
            <summary>
                Get Temperature from DegreesCelsius.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Temperature.FromDegreesDelisle(UnitsNet.QuantityValue)">
            <summary>
                Get Temperature from DegreesDelisle.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Temperature.FromDegreesFahrenheit(UnitsNet.QuantityValue)">
            <summary>
                Get Temperature from DegreesFahrenheit.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Temperature.FromDegreesNewton(UnitsNet.QuantityValue)">
            <summary>
                Get Temperature from DegreesNewton.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Temperature.FromDegreesRankine(UnitsNet.QuantityValue)">
            <summary>
                Get Temperature from DegreesRankine.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Temperature.FromDegreesReaumur(UnitsNet.QuantityValue)">
            <summary>
                Get Temperature from DegreesReaumur.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Temperature.FromDegreesRoemer(UnitsNet.QuantityValue)">
            <summary>
                Get Temperature from DegreesRoemer.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Temperature.FromKelvins(UnitsNet.QuantityValue)">
            <summary>
                Get Temperature from Kelvins.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Temperature.From(UnitsNet.QuantityValue,UnitsNet.Units.TemperatureUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.TemperatureUnit" /> to <see cref="T:UnitsNet.Temperature" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>Temperature unit value.</returns>
        </member>
        <member name="M:UnitsNet.Temperature.GetAbbreviation(UnitsNet.Units.TemperatureUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.Temperature.Equals(UnitsNet.Temperature,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another Temperature within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.Temperature.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current Temperature.</returns>
        </member>
        <member name="M:UnitsNet.Temperature.As(UnitsNet.Units.TemperatureUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Temperature.ToUnit(UnitsNet.Units.TemperatureUnit)">
            <summary>
                Converts this Temperature to another Temperature with the unit representation <paramref name="unit" />.
            </summary>
            <returns>A Temperature with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Temperature.AsBaseUnit">
            <summary>
                Converts the current value + unit to the base unit.
                This is typically the first step in converting from one unit to another.
            </summary>
            <returns>The value in the base unit representation.</returns>
        </member>
        <member name="M:UnitsNet.Temperature.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Temperature.TryParse(System.String,UnitsNet.Temperature@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Temperature.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Temperature.ParseInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Temperature.TryParseInternal(System.String,System.IFormatProvider,UnitsNet.Temperature@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Temperature.ParseUnitInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Temperature.TryParseUnitInternal(System.String,System.IFormatProvider,UnitsNet.Units.TemperatureUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Temperature.ToString">
            <summary>
                Get default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Temperature.ToString(UnitsNet.Units.TemperatureUnit)">
            <summary>
                Get string representation of value and unit. Using current UI culture and two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <returns>String representation.</returns>
        </member>
        <member name="P:UnitsNet.Temperature.MaxValue">
            <summary>
            Represents the largest possible value of Temperature
            </summary>
        </member>
        <member name="P:UnitsNet.Temperature.MinValue">
            <summary>
            Represents the smallest possible value of Temperature
            </summary>
        </member>
        <member name="P:UnitsNet.Temperature.Type">
            <summary>
                The <see cref="P:UnitsNet.Temperature.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Temperature.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.Temperature.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="T:UnitsNet.TemperatureDelta">
            <summary>
                Difference between two temperatures. The conversions are different than for Temperature.
            </summary>
            <summary>
                Difference between two temperatures. The conversions are different than for Temperature.
            </summary>
        </member>
        <member name="P:UnitsNet.TemperatureDelta.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.TemperatureDelta.GetAbbreviation(UnitsNet.Units.TemperatureDeltaUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.TemperatureDelta.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.TemperatureDelta.TryParse(System.String,System.IFormatProvider,UnitsNet.TemperatureDelta@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.TemperatureDelta.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.TemperatureDelta.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.TemperatureDeltaUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.TemperatureDelta.ToString(UnitsNet.Units.TemperatureDeltaUnit,System.IFormatProvider)">
            <summary>
                Get string representation of value and unit. Using two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.TemperatureDelta.ToString(UnitsNet.Units.TemperatureDeltaUnit,System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.TemperatureDelta.ToString(UnitsNet.Units.TemperatureDeltaUnit,System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">Unit representation to use.</param>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
        </member>
        <member name="F:UnitsNet.TemperatureDelta._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.TemperatureDelta._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.TemperatureDelta.Unit">
            <summary>
                The unit this quantity was constructed with -or- <see cref="P:UnitsNet.TemperatureDelta.BaseUnit" /> if default ctor was used.
            </summary>
        </member>
        <member name="M:UnitsNet.TemperatureDelta.#ctor(System.Double,UnitsNet.Units.TemperatureDeltaUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="numericValue">The numeric value  to contruct this quantity with.</param>
            <param name="unit">The unit representation to contruct this quantity with.</param>
            <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="P:UnitsNet.TemperatureDelta.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.TemperatureDelta.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.TemperatureDelta.BaseUnit">
            <summary>
                The base unit of TemperatureDelta, which is Kelvin. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.TemperatureDelta.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.TemperatureDelta.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.TemperatureDelta.Units">
            <summary>
                All units of measurement for the TemperatureDelta quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.TemperatureDelta.DegreesCelsius">
            <summary>
                Get TemperatureDelta in DegreesCelsius.
            </summary>
        </member>
        <member name="P:UnitsNet.TemperatureDelta.DegreesDelisle">
            <summary>
                Get TemperatureDelta in DegreesDelisle.
            </summary>
        </member>
        <member name="P:UnitsNet.TemperatureDelta.DegreesFahrenheit">
            <summary>
                Get TemperatureDelta in DegreesFahrenheit.
            </summary>
        </member>
        <member name="P:UnitsNet.TemperatureDelta.DegreesNewton">
            <summary>
                Get TemperatureDelta in DegreesNewton.
            </summary>
        </member>
        <member name="P:UnitsNet.TemperatureDelta.DegreesRankine">
            <summary>
                Get TemperatureDelta in DegreesRankine.
            </summary>
        </member>
        <member name="P:UnitsNet.TemperatureDelta.DegreesReaumur">
            <summary>
                Get TemperatureDelta in DegreesReaumur.
            </summary>
        </member>
        <member name="P:UnitsNet.TemperatureDelta.DegreesRoemer">
            <summary>
                Get TemperatureDelta in DegreesRoemer.
            </summary>
        </member>
        <member name="P:UnitsNet.TemperatureDelta.Kelvins">
            <summary>
                Get TemperatureDelta in Kelvins.
            </summary>
        </member>
        <member name="P:UnitsNet.TemperatureDelta.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit Kelvin.
            </summary>
        </member>
        <member name="M:UnitsNet.TemperatureDelta.FromDegreesCelsius(UnitsNet.QuantityValue)">
            <summary>
                Get TemperatureDelta from DegreesCelsius.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.TemperatureDelta.FromDegreesDelisle(UnitsNet.QuantityValue)">
            <summary>
                Get TemperatureDelta from DegreesDelisle.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.TemperatureDelta.FromDegreesFahrenheit(UnitsNet.QuantityValue)">
            <summary>
                Get TemperatureDelta from DegreesFahrenheit.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.TemperatureDelta.FromDegreesNewton(UnitsNet.QuantityValue)">
            <summary>
                Get TemperatureDelta from DegreesNewton.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.TemperatureDelta.FromDegreesRankine(UnitsNet.QuantityValue)">
            <summary>
                Get TemperatureDelta from DegreesRankine.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.TemperatureDelta.FromDegreesReaumur(UnitsNet.QuantityValue)">
            <summary>
                Get TemperatureDelta from DegreesReaumur.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.TemperatureDelta.FromDegreesRoemer(UnitsNet.QuantityValue)">
            <summary>
                Get TemperatureDelta from DegreesRoemer.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.TemperatureDelta.FromKelvins(UnitsNet.QuantityValue)">
            <summary>
                Get TemperatureDelta from Kelvins.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.TemperatureDelta.From(UnitsNet.QuantityValue,UnitsNet.Units.TemperatureDeltaUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.TemperatureDeltaUnit" /> to <see cref="T:UnitsNet.TemperatureDelta" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>TemperatureDelta unit value.</returns>
        </member>
        <member name="M:UnitsNet.TemperatureDelta.GetAbbreviation(UnitsNet.Units.TemperatureDeltaUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.TemperatureDelta.Equals(UnitsNet.TemperatureDelta,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another TemperatureDelta within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.TemperatureDelta.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current TemperatureDelta.</returns>
        </member>
        <member name="M:UnitsNet.TemperatureDelta.As(UnitsNet.Units.TemperatureDeltaUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.TemperatureDelta.ToUnit(UnitsNet.Units.TemperatureDeltaUnit)">
            <summary>
                Converts this TemperatureDelta to another TemperatureDelta with the unit representation <paramref name="unit" />.
            </summary>
            <returns>A TemperatureDelta with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.TemperatureDelta.AsBaseUnit">
            <summary>
                Converts the current value + unit to the base unit.
                This is typically the first step in converting from one unit to another.
            </summary>
            <returns>The value in the base unit representation.</returns>
        </member>
        <member name="M:UnitsNet.TemperatureDelta.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.TemperatureDelta.TryParse(System.String,UnitsNet.TemperatureDelta@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.TemperatureDelta.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.TemperatureDelta.ParseInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.TemperatureDelta.TryParseInternal(System.String,System.IFormatProvider,UnitsNet.TemperatureDelta@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.TemperatureDelta.ParseUnitInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.TemperatureDelta.TryParseUnitInternal(System.String,System.IFormatProvider,UnitsNet.Units.TemperatureDeltaUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.TemperatureDelta.ToString">
            <summary>
                Get default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.TemperatureDelta.ToString(UnitsNet.Units.TemperatureDeltaUnit)">
            <summary>
                Get string representation of value and unit. Using current UI culture and two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <returns>String representation.</returns>
        </member>
        <member name="P:UnitsNet.TemperatureDelta.MaxValue">
            <summary>
            Represents the largest possible value of TemperatureDelta
            </summary>
        </member>
        <member name="P:UnitsNet.TemperatureDelta.MinValue">
            <summary>
            Represents the smallest possible value of TemperatureDelta
            </summary>
        </member>
        <member name="P:UnitsNet.TemperatureDelta.Type">
            <summary>
                The <see cref="P:UnitsNet.TemperatureDelta.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.TemperatureDelta.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.TemperatureDelta.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="T:UnitsNet.Torque">
            <summary>
                Torque, moment or moment of force (see the terminology below), is the tendency of a force to rotate an object about an axis,[1] fulcrum, or pivot. Just as a force is a push or a pull, a torque can be thought of as a twist to an object. Mathematically, torque is defined as the cross product of the lever-arm distance and force, which tends to produce rotation. Loosely speaking, torque is a measure of the turning force on an object such as a bolt or a flywheel. For example, pushing or pulling the handle of a wrench connected to a nut or bolt produces a torque (turning force) that loosens or tightens the nut or bolt.
            </summary>
            <summary>
                Torque, moment or moment of force (see the terminology below), is the tendency of a force to rotate an object about an axis,[1] fulcrum, or pivot. Just as a force is a push or a pull, a torque can be thought of as a twist to an object. Mathematically, torque is defined as the cross product of the lever-arm distance and force, which tends to produce rotation. Loosely speaking, torque is a measure of the turning force on an object such as a bolt or a flywheel. For example, pushing or pulling the handle of a wrench connected to a nut or bolt produces a torque (turning force) that loosens or tightens the nut or bolt.
            </summary>
        </member>
        <member name="P:UnitsNet.Torque.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.Torque.GetAbbreviation(UnitsNet.Units.TorqueUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.Torque.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Torque.TryParse(System.String,System.IFormatProvider,UnitsNet.Torque@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Torque.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Torque.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.TorqueUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Torque.ToString(UnitsNet.Units.TorqueUnit,System.IFormatProvider)">
            <summary>
                Get string representation of value and unit. Using two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Torque.ToString(UnitsNet.Units.TorqueUnit,System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Torque.ToString(UnitsNet.Units.TorqueUnit,System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">Unit representation to use.</param>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
        </member>
        <member name="F:UnitsNet.Torque._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.Torque._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.Torque.Unit">
            <summary>
                The unit this quantity was constructed with -or- <see cref="P:UnitsNet.Torque.BaseUnit" /> if default ctor was used.
            </summary>
        </member>
        <member name="M:UnitsNet.Torque.#ctor(System.Double,UnitsNet.Units.TorqueUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="numericValue">The numeric value  to contruct this quantity with.</param>
            <param name="unit">The unit representation to contruct this quantity with.</param>
            <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="P:UnitsNet.Torque.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.Torque.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Torque.BaseUnit">
            <summary>
                The base unit of Torque, which is NewtonMeter. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.Torque.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.Torque.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Torque.Units">
            <summary>
                All units of measurement for the Torque quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Torque.KilogramForceCentimeters">
            <summary>
                Get Torque in KilogramForceCentimeters.
            </summary>
        </member>
        <member name="P:UnitsNet.Torque.KilogramForceMeters">
            <summary>
                Get Torque in KilogramForceMeters.
            </summary>
        </member>
        <member name="P:UnitsNet.Torque.KilogramForceMillimeters">
            <summary>
                Get Torque in KilogramForceMillimeters.
            </summary>
        </member>
        <member name="P:UnitsNet.Torque.KilonewtonCentimeters">
            <summary>
                Get Torque in KilonewtonCentimeters.
            </summary>
        </member>
        <member name="P:UnitsNet.Torque.KilonewtonMeters">
            <summary>
                Get Torque in KilonewtonMeters.
            </summary>
        </member>
        <member name="P:UnitsNet.Torque.KilonewtonMillimeters">
            <summary>
                Get Torque in KilonewtonMillimeters.
            </summary>
        </member>
        <member name="P:UnitsNet.Torque.KilopoundForceFeet">
            <summary>
                Get Torque in KilopoundForceFeet.
            </summary>
        </member>
        <member name="P:UnitsNet.Torque.KilopoundForceInches">
            <summary>
                Get Torque in KilopoundForceInches.
            </summary>
        </member>
        <member name="P:UnitsNet.Torque.MeganewtonCentimeters">
            <summary>
                Get Torque in MeganewtonCentimeters.
            </summary>
        </member>
        <member name="P:UnitsNet.Torque.MeganewtonMeters">
            <summary>
                Get Torque in MeganewtonMeters.
            </summary>
        </member>
        <member name="P:UnitsNet.Torque.MeganewtonMillimeters">
            <summary>
                Get Torque in MeganewtonMillimeters.
            </summary>
        </member>
        <member name="P:UnitsNet.Torque.MegapoundForceFeet">
            <summary>
                Get Torque in MegapoundForceFeet.
            </summary>
        </member>
        <member name="P:UnitsNet.Torque.MegapoundForceInches">
            <summary>
                Get Torque in MegapoundForceInches.
            </summary>
        </member>
        <member name="P:UnitsNet.Torque.NewtonCentimeters">
            <summary>
                Get Torque in NewtonCentimeters.
            </summary>
        </member>
        <member name="P:UnitsNet.Torque.NewtonMeters">
            <summary>
                Get Torque in NewtonMeters.
            </summary>
        </member>
        <member name="P:UnitsNet.Torque.NewtonMillimeters">
            <summary>
                Get Torque in NewtonMillimeters.
            </summary>
        </member>
        <member name="P:UnitsNet.Torque.PoundForceFeet">
            <summary>
                Get Torque in PoundForceFeet.
            </summary>
        </member>
        <member name="P:UnitsNet.Torque.PoundForceInches">
            <summary>
                Get Torque in PoundForceInches.
            </summary>
        </member>
        <member name="P:UnitsNet.Torque.TonneForceCentimeters">
            <summary>
                Get Torque in TonneForceCentimeters.
            </summary>
        </member>
        <member name="P:UnitsNet.Torque.TonneForceMeters">
            <summary>
                Get Torque in TonneForceMeters.
            </summary>
        </member>
        <member name="P:UnitsNet.Torque.TonneForceMillimeters">
            <summary>
                Get Torque in TonneForceMillimeters.
            </summary>
        </member>
        <member name="P:UnitsNet.Torque.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit NewtonMeter.
            </summary>
        </member>
        <member name="M:UnitsNet.Torque.FromKilogramForceCentimeters(UnitsNet.QuantityValue)">
            <summary>
                Get Torque from KilogramForceCentimeters.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Torque.FromKilogramForceMeters(UnitsNet.QuantityValue)">
            <summary>
                Get Torque from KilogramForceMeters.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Torque.FromKilogramForceMillimeters(UnitsNet.QuantityValue)">
            <summary>
                Get Torque from KilogramForceMillimeters.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Torque.FromKilonewtonCentimeters(UnitsNet.QuantityValue)">
            <summary>
                Get Torque from KilonewtonCentimeters.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Torque.FromKilonewtonMeters(UnitsNet.QuantityValue)">
            <summary>
                Get Torque from KilonewtonMeters.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Torque.FromKilonewtonMillimeters(UnitsNet.QuantityValue)">
            <summary>
                Get Torque from KilonewtonMillimeters.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Torque.FromKilopoundForceFeet(UnitsNet.QuantityValue)">
            <summary>
                Get Torque from KilopoundForceFeet.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Torque.FromKilopoundForceInches(UnitsNet.QuantityValue)">
            <summary>
                Get Torque from KilopoundForceInches.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Torque.FromMeganewtonCentimeters(UnitsNet.QuantityValue)">
            <summary>
                Get Torque from MeganewtonCentimeters.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Torque.FromMeganewtonMeters(UnitsNet.QuantityValue)">
            <summary>
                Get Torque from MeganewtonMeters.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Torque.FromMeganewtonMillimeters(UnitsNet.QuantityValue)">
            <summary>
                Get Torque from MeganewtonMillimeters.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Torque.FromMegapoundForceFeet(UnitsNet.QuantityValue)">
            <summary>
                Get Torque from MegapoundForceFeet.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Torque.FromMegapoundForceInches(UnitsNet.QuantityValue)">
            <summary>
                Get Torque from MegapoundForceInches.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Torque.FromNewtonCentimeters(UnitsNet.QuantityValue)">
            <summary>
                Get Torque from NewtonCentimeters.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Torque.FromNewtonMeters(UnitsNet.QuantityValue)">
            <summary>
                Get Torque from NewtonMeters.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Torque.FromNewtonMillimeters(UnitsNet.QuantityValue)">
            <summary>
                Get Torque from NewtonMillimeters.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Torque.FromPoundForceFeet(UnitsNet.QuantityValue)">
            <summary>
                Get Torque from PoundForceFeet.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Torque.FromPoundForceInches(UnitsNet.QuantityValue)">
            <summary>
                Get Torque from PoundForceInches.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Torque.FromTonneForceCentimeters(UnitsNet.QuantityValue)">
            <summary>
                Get Torque from TonneForceCentimeters.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Torque.FromTonneForceMeters(UnitsNet.QuantityValue)">
            <summary>
                Get Torque from TonneForceMeters.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Torque.FromTonneForceMillimeters(UnitsNet.QuantityValue)">
            <summary>
                Get Torque from TonneForceMillimeters.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Torque.From(UnitsNet.QuantityValue,UnitsNet.Units.TorqueUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.TorqueUnit" /> to <see cref="T:UnitsNet.Torque" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>Torque unit value.</returns>
        </member>
        <member name="M:UnitsNet.Torque.GetAbbreviation(UnitsNet.Units.TorqueUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.Torque.Equals(UnitsNet.Torque,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another Torque within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.Torque.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current Torque.</returns>
        </member>
        <member name="M:UnitsNet.Torque.As(UnitsNet.Units.TorqueUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Torque.ToUnit(UnitsNet.Units.TorqueUnit)">
            <summary>
                Converts this Torque to another Torque with the unit representation <paramref name="unit" />.
            </summary>
            <returns>A Torque with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Torque.AsBaseUnit">
            <summary>
                Converts the current value + unit to the base unit.
                This is typically the first step in converting from one unit to another.
            </summary>
            <returns>The value in the base unit representation.</returns>
        </member>
        <member name="M:UnitsNet.Torque.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Torque.TryParse(System.String,UnitsNet.Torque@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Torque.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Torque.ParseInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Torque.TryParseInternal(System.String,System.IFormatProvider,UnitsNet.Torque@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Torque.ParseUnitInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Torque.TryParseUnitInternal(System.String,System.IFormatProvider,UnitsNet.Units.TorqueUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Torque.ToString">
            <summary>
                Get default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Torque.ToString(UnitsNet.Units.TorqueUnit)">
            <summary>
                Get string representation of value and unit. Using current UI culture and two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <returns>String representation.</returns>
        </member>
        <member name="P:UnitsNet.Torque.MaxValue">
            <summary>
            Represents the largest possible value of Torque
            </summary>
        </member>
        <member name="P:UnitsNet.Torque.MinValue">
            <summary>
            Represents the smallest possible value of Torque
            </summary>
        </member>
        <member name="P:UnitsNet.Torque.Type">
            <summary>
                The <see cref="P:UnitsNet.Torque.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Torque.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.Torque.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="T:UnitsNet.Volume">
            <summary>
                Volume is the quantity of three-dimensional space enclosed by some closed boundary, for example, the space that a substance (solid, liquid, gas, or plasma) or shape occupies or contains.[1] Volume is often quantified numerically using the SI derived unit, the cubic metre. The volume of a container is generally understood to be the capacity of the container, i. e. the amount of fluid (gas or liquid) that the container could hold, rather than the amount of space the container itself displaces.
            </summary>
            <summary>
                Volume is the quantity of three-dimensional space enclosed by some closed boundary, for example, the space that a substance (solid, liquid, gas, or plasma) or shape occupies or contains.[1] Volume is often quantified numerically using the SI derived unit, the cubic metre. The volume of a container is generally understood to be the capacity of the container, i. e. the amount of fluid (gas or liquid) that the container could hold, rather than the amount of space the container itself displaces.
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.Volume.GetAbbreviation(UnitsNet.Units.VolumeUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.Volume.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Volume.TryParse(System.String,System.IFormatProvider,UnitsNet.Volume@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Volume.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Volume.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.VolumeUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Volume.ToString(UnitsNet.Units.VolumeUnit,System.IFormatProvider)">
            <summary>
                Get string representation of value and unit. Using two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Volume.ToString(UnitsNet.Units.VolumeUnit,System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Volume.ToString(UnitsNet.Units.VolumeUnit,System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">Unit representation to use.</param>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
        </member>
        <member name="F:UnitsNet.Volume._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.Volume._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.Unit">
            <summary>
                The unit this quantity was constructed with -or- <see cref="P:UnitsNet.Volume.BaseUnit" /> if default ctor was used.
            </summary>
        </member>
        <member name="M:UnitsNet.Volume.#ctor(System.Double,UnitsNet.Units.VolumeUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="numericValue">The numeric value  to contruct this quantity with.</param>
            <param name="unit">The unit representation to contruct this quantity with.</param>
            <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="P:UnitsNet.Volume.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.Volume.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.BaseUnit">
            <summary>
                The base unit of Volume, which is CubicMeter. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.Volume.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.Units">
            <summary>
                All units of measurement for the Volume quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.AuTablespoons">
            <summary>
                Get Volume in AuTablespoons.
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.Centiliters">
            <summary>
                Get Volume in Centiliters.
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.CubicCentimeters">
            <summary>
                Get Volume in CubicCentimeters.
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.CubicDecimeters">
            <summary>
                Get Volume in CubicDecimeters.
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.CubicFeet">
            <summary>
                Get Volume in CubicFeet.
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.CubicInches">
            <summary>
                Get Volume in CubicInches.
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.CubicKilometers">
            <summary>
                Get Volume in CubicKilometers.
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.CubicMeters">
            <summary>
                Get Volume in CubicMeters.
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.CubicMicrometers">
            <summary>
                Get Volume in CubicMicrometers.
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.CubicMiles">
            <summary>
                Get Volume in CubicMiles.
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.CubicMillimeters">
            <summary>
                Get Volume in CubicMillimeters.
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.CubicYards">
            <summary>
                Get Volume in CubicYards.
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.Deciliters">
            <summary>
                Get Volume in Deciliters.
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.HectocubicFeet">
            <summary>
                Get Volume in HectocubicFeet.
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.HectocubicMeters">
            <summary>
                Get Volume in HectocubicMeters.
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.Hectoliters">
            <summary>
                Get Volume in Hectoliters.
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.ImperialBeerBarrels">
            <summary>
                Get Volume in ImperialBeerBarrels.
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.ImperialGallons">
            <summary>
                Get Volume in ImperialGallons.
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.ImperialOunces">
            <summary>
                Get Volume in ImperialOunces.
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.KilocubicFeet">
            <summary>
                Get Volume in KilocubicFeet.
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.KilocubicMeters">
            <summary>
                Get Volume in KilocubicMeters.
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.KiloimperialGallons">
            <summary>
                Get Volume in KiloimperialGallons.
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.KilousGallons">
            <summary>
                Get Volume in KilousGallons.
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.Liters">
            <summary>
                Get Volume in Liters.
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.MegacubicFeet">
            <summary>
                Get Volume in MegacubicFeet.
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.MegaimperialGallons">
            <summary>
                Get Volume in MegaimperialGallons.
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.MegausGallons">
            <summary>
                Get Volume in MegausGallons.
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.MetricCups">
            <summary>
                Get Volume in MetricCups.
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.MetricTeaspoons">
            <summary>
                Get Volume in MetricTeaspoons.
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.Microliters">
            <summary>
                Get Volume in Microliters.
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.Milliliters">
            <summary>
                Get Volume in Milliliters.
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.OilBarrels">
            <summary>
                Get Volume in OilBarrels.
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.UkTablespoons">
            <summary>
                Get Volume in UkTablespoons.
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.UsBeerBarrels">
            <summary>
                Get Volume in UsBeerBarrels.
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.UsCustomaryCups">
            <summary>
                Get Volume in UsCustomaryCups.
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.UsGallons">
            <summary>
                Get Volume in UsGallons.
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.UsLegalCups">
            <summary>
                Get Volume in UsLegalCups.
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.UsOunces">
            <summary>
                Get Volume in UsOunces.
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.UsPints">
            <summary>
                Get Volume in UsPints.
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.UsQuarts">
            <summary>
                Get Volume in UsQuarts.
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.UsTablespoons">
            <summary>
                Get Volume in UsTablespoons.
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.UsTeaspoons">
            <summary>
                Get Volume in UsTeaspoons.
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit CubicMeter.
            </summary>
        </member>
        <member name="M:UnitsNet.Volume.FromAuTablespoons(UnitsNet.QuantityValue)">
            <summary>
                Get Volume from AuTablespoons.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Volume.FromCentiliters(UnitsNet.QuantityValue)">
            <summary>
                Get Volume from Centiliters.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Volume.FromCubicCentimeters(UnitsNet.QuantityValue)">
            <summary>
                Get Volume from CubicCentimeters.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Volume.FromCubicDecimeters(UnitsNet.QuantityValue)">
            <summary>
                Get Volume from CubicDecimeters.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Volume.FromCubicFeet(UnitsNet.QuantityValue)">
            <summary>
                Get Volume from CubicFeet.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Volume.FromCubicInches(UnitsNet.QuantityValue)">
            <summary>
                Get Volume from CubicInches.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Volume.FromCubicKilometers(UnitsNet.QuantityValue)">
            <summary>
                Get Volume from CubicKilometers.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Volume.FromCubicMeters(UnitsNet.QuantityValue)">
            <summary>
                Get Volume from CubicMeters.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Volume.FromCubicMicrometers(UnitsNet.QuantityValue)">
            <summary>
                Get Volume from CubicMicrometers.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Volume.FromCubicMiles(UnitsNet.QuantityValue)">
            <summary>
                Get Volume from CubicMiles.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Volume.FromCubicMillimeters(UnitsNet.QuantityValue)">
            <summary>
                Get Volume from CubicMillimeters.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Volume.FromCubicYards(UnitsNet.QuantityValue)">
            <summary>
                Get Volume from CubicYards.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Volume.FromDeciliters(UnitsNet.QuantityValue)">
            <summary>
                Get Volume from Deciliters.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Volume.FromHectocubicFeet(UnitsNet.QuantityValue)">
            <summary>
                Get Volume from HectocubicFeet.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Volume.FromHectocubicMeters(UnitsNet.QuantityValue)">
            <summary>
                Get Volume from HectocubicMeters.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Volume.FromHectoliters(UnitsNet.QuantityValue)">
            <summary>
                Get Volume from Hectoliters.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Volume.FromImperialBeerBarrels(UnitsNet.QuantityValue)">
            <summary>
                Get Volume from ImperialBeerBarrels.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Volume.FromImperialGallons(UnitsNet.QuantityValue)">
            <summary>
                Get Volume from ImperialGallons.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Volume.FromImperialOunces(UnitsNet.QuantityValue)">
            <summary>
                Get Volume from ImperialOunces.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Volume.FromKilocubicFeet(UnitsNet.QuantityValue)">
            <summary>
                Get Volume from KilocubicFeet.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Volume.FromKilocubicMeters(UnitsNet.QuantityValue)">
            <summary>
                Get Volume from KilocubicMeters.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Volume.FromKiloimperialGallons(UnitsNet.QuantityValue)">
            <summary>
                Get Volume from KiloimperialGallons.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Volume.FromKilousGallons(UnitsNet.QuantityValue)">
            <summary>
                Get Volume from KilousGallons.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Volume.FromLiters(UnitsNet.QuantityValue)">
            <summary>
                Get Volume from Liters.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Volume.FromMegacubicFeet(UnitsNet.QuantityValue)">
            <summary>
                Get Volume from MegacubicFeet.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Volume.FromMegaimperialGallons(UnitsNet.QuantityValue)">
            <summary>
                Get Volume from MegaimperialGallons.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Volume.FromMegausGallons(UnitsNet.QuantityValue)">
            <summary>
                Get Volume from MegausGallons.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Volume.FromMetricCups(UnitsNet.QuantityValue)">
            <summary>
                Get Volume from MetricCups.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Volume.FromMetricTeaspoons(UnitsNet.QuantityValue)">
            <summary>
                Get Volume from MetricTeaspoons.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Volume.FromMicroliters(UnitsNet.QuantityValue)">
            <summary>
                Get Volume from Microliters.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Volume.FromMilliliters(UnitsNet.QuantityValue)">
            <summary>
                Get Volume from Milliliters.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Volume.FromOilBarrels(UnitsNet.QuantityValue)">
            <summary>
                Get Volume from OilBarrels.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Volume.FromUkTablespoons(UnitsNet.QuantityValue)">
            <summary>
                Get Volume from UkTablespoons.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Volume.FromUsBeerBarrels(UnitsNet.QuantityValue)">
            <summary>
                Get Volume from UsBeerBarrels.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Volume.FromUsCustomaryCups(UnitsNet.QuantityValue)">
            <summary>
                Get Volume from UsCustomaryCups.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Volume.FromUsGallons(UnitsNet.QuantityValue)">
            <summary>
                Get Volume from UsGallons.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Volume.FromUsLegalCups(UnitsNet.QuantityValue)">
            <summary>
                Get Volume from UsLegalCups.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Volume.FromUsOunces(UnitsNet.QuantityValue)">
            <summary>
                Get Volume from UsOunces.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Volume.FromUsPints(UnitsNet.QuantityValue)">
            <summary>
                Get Volume from UsPints.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Volume.FromUsQuarts(UnitsNet.QuantityValue)">
            <summary>
                Get Volume from UsQuarts.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Volume.FromUsTablespoons(UnitsNet.QuantityValue)">
            <summary>
                Get Volume from UsTablespoons.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Volume.FromUsTeaspoons(UnitsNet.QuantityValue)">
            <summary>
                Get Volume from UsTeaspoons.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Volume.From(UnitsNet.QuantityValue,UnitsNet.Units.VolumeUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.VolumeUnit" /> to <see cref="T:UnitsNet.Volume" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>Volume unit value.</returns>
        </member>
        <member name="M:UnitsNet.Volume.GetAbbreviation(UnitsNet.Units.VolumeUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.Volume.Equals(UnitsNet.Volume,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another Volume within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.Volume.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current Volume.</returns>
        </member>
        <member name="M:UnitsNet.Volume.As(UnitsNet.Units.VolumeUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Volume.ToUnit(UnitsNet.Units.VolumeUnit)">
            <summary>
                Converts this Volume to another Volume with the unit representation <paramref name="unit" />.
            </summary>
            <returns>A Volume with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Volume.AsBaseUnit">
            <summary>
                Converts the current value + unit to the base unit.
                This is typically the first step in converting from one unit to another.
            </summary>
            <returns>The value in the base unit representation.</returns>
        </member>
        <member name="M:UnitsNet.Volume.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Volume.TryParse(System.String,UnitsNet.Volume@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Volume.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Volume.ParseInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Volume.TryParseInternal(System.String,System.IFormatProvider,UnitsNet.Volume@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Volume.ParseUnitInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Volume.TryParseUnitInternal(System.String,System.IFormatProvider,UnitsNet.Units.VolumeUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Volume.ToString">
            <summary>
                Get default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Volume.ToString(UnitsNet.Units.VolumeUnit)">
            <summary>
                Get string representation of value and unit. Using current UI culture and two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <returns>String representation.</returns>
        </member>
        <member name="P:UnitsNet.Volume.MaxValue">
            <summary>
            Represents the largest possible value of Volume
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.MinValue">
            <summary>
            Represents the smallest possible value of Volume
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.Type">
            <summary>
                The <see cref="P:UnitsNet.Volume.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Volume.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.Volume.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="T:UnitsNet.VolumeFlow">
            <summary>
                In physics and engineering, in particular fluid dynamics and hydrometry, the volumetric flow rate, (also known as volume flow rate, rate of fluid flow or volume velocity) is the volume of fluid which passes through a given surface per unit time. The SI unit is mÂ³/s (cubic meters per second). In US Customary Units and British Imperial Units, volumetric flow rate is often expressed as ftÂ³/s (cubic feet per second). It is usually represented by the symbol Q.
            </summary>
            <summary>
                In physics and engineering, in particular fluid dynamics and hydrometry, the volumetric flow rate, (also known as volume flow rate, rate of fluid flow or volume velocity) is the volume of fluid which passes through a given surface per unit time. The SI unit is mÂ³/s (cubic meters per second). In US Customary Units and British Imperial Units, volumetric flow rate is often expressed as ftÂ³/s (cubic feet per second). It is usually represented by the symbol Q.
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.VolumeFlow.GetAbbreviation(UnitsNet.Units.VolumeFlowUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.VolumeFlow.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.VolumeFlow.TryParse(System.String,System.IFormatProvider,UnitsNet.VolumeFlow@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.VolumeFlow.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.VolumeFlow.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.VolumeFlowUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.VolumeFlow.ToString(UnitsNet.Units.VolumeFlowUnit,System.IFormatProvider)">
            <summary>
                Get string representation of value and unit. Using two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.VolumeFlow.ToString(UnitsNet.Units.VolumeFlowUnit,System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.VolumeFlow.ToString(UnitsNet.Units.VolumeFlowUnit,System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">Unit representation to use.</param>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
        </member>
        <member name="F:UnitsNet.VolumeFlow._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.VolumeFlow._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.Unit">
            <summary>
                The unit this quantity was constructed with -or- <see cref="P:UnitsNet.VolumeFlow.BaseUnit" /> if default ctor was used.
            </summary>
        </member>
        <member name="M:UnitsNet.VolumeFlow.#ctor(System.Double,UnitsNet.Units.VolumeFlowUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="numericValue">The numeric value  to contruct this quantity with.</param>
            <param name="unit">The unit representation to contruct this quantity with.</param>
            <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="P:UnitsNet.VolumeFlow.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.VolumeFlow.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.BaseUnit">
            <summary>
                The base unit of VolumeFlow, which is CubicMeterPerSecond. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.VolumeFlow.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.Units">
            <summary>
                All units of measurement for the VolumeFlow quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.CentilitersPerMinute">
            <summary>
                Get VolumeFlow in CentilitersPerMinute.
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.CubicDecimetersPerMinute">
            <summary>
                Get VolumeFlow in CubicDecimetersPerMinute.
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.CubicFeetPerHour">
            <summary>
                Get VolumeFlow in CubicFeetPerHour.
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.CubicFeetPerMinute">
            <summary>
                Get VolumeFlow in CubicFeetPerMinute.
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.CubicFeetPerSecond">
            <summary>
                Get VolumeFlow in CubicFeetPerSecond.
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.CubicMetersPerHour">
            <summary>
                Get VolumeFlow in CubicMetersPerHour.
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.CubicMetersPerMinute">
            <summary>
                Get VolumeFlow in CubicMetersPerMinute.
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.CubicMetersPerSecond">
            <summary>
                Get VolumeFlow in CubicMetersPerSecond.
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.CubicYardsPerHour">
            <summary>
                Get VolumeFlow in CubicYardsPerHour.
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.CubicYardsPerMinute">
            <summary>
                Get VolumeFlow in CubicYardsPerMinute.
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.CubicYardsPerSecond">
            <summary>
                Get VolumeFlow in CubicYardsPerSecond.
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.DecilitersPerMinute">
            <summary>
                Get VolumeFlow in DecilitersPerMinute.
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.KilolitersPerMinute">
            <summary>
                Get VolumeFlow in KilolitersPerMinute.
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.LitersPerHour">
            <summary>
                Get VolumeFlow in LitersPerHour.
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.LitersPerMinute">
            <summary>
                Get VolumeFlow in LitersPerMinute.
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.LitersPerSecond">
            <summary>
                Get VolumeFlow in LitersPerSecond.
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.MicrolitersPerMinute">
            <summary>
                Get VolumeFlow in MicrolitersPerMinute.
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.MillilitersPerMinute">
            <summary>
                Get VolumeFlow in MillilitersPerMinute.
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.MillionUsGallonsPerDay">
            <summary>
                Get VolumeFlow in MillionUsGallonsPerDay.
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.NanolitersPerMinute">
            <summary>
                Get VolumeFlow in NanolitersPerMinute.
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.OilBarrelsPerDay">
            <summary>
                Get VolumeFlow in OilBarrelsPerDay.
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.OilBarrelsPerHour">
            <summary>
                Get VolumeFlow in OilBarrelsPerHour.
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.OilBarrelsPerMinute">
            <summary>
                Get VolumeFlow in OilBarrelsPerMinute.
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.UsGallonsPerHour">
            <summary>
                Get VolumeFlow in UsGallonsPerHour.
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.UsGallonsPerMinute">
            <summary>
                Get VolumeFlow in UsGallonsPerMinute.
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.UsGallonsPerSecond">
            <summary>
                Get VolumeFlow in UsGallonsPerSecond.
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit CubicMeterPerSecond.
            </summary>
        </member>
        <member name="M:UnitsNet.VolumeFlow.FromCentilitersPerMinute(UnitsNet.QuantityValue)">
            <summary>
                Get VolumeFlow from CentilitersPerMinute.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeFlow.FromCubicDecimetersPerMinute(UnitsNet.QuantityValue)">
            <summary>
                Get VolumeFlow from CubicDecimetersPerMinute.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeFlow.FromCubicFeetPerHour(UnitsNet.QuantityValue)">
            <summary>
                Get VolumeFlow from CubicFeetPerHour.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeFlow.FromCubicFeetPerMinute(UnitsNet.QuantityValue)">
            <summary>
                Get VolumeFlow from CubicFeetPerMinute.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeFlow.FromCubicFeetPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Get VolumeFlow from CubicFeetPerSecond.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeFlow.FromCubicMetersPerHour(UnitsNet.QuantityValue)">
            <summary>
                Get VolumeFlow from CubicMetersPerHour.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeFlow.FromCubicMetersPerMinute(UnitsNet.QuantityValue)">
            <summary>
                Get VolumeFlow from CubicMetersPerMinute.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeFlow.FromCubicMetersPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Get VolumeFlow from CubicMetersPerSecond.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeFlow.FromCubicYardsPerHour(UnitsNet.QuantityValue)">
            <summary>
                Get VolumeFlow from CubicYardsPerHour.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeFlow.FromCubicYardsPerMinute(UnitsNet.QuantityValue)">
            <summary>
                Get VolumeFlow from CubicYardsPerMinute.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeFlow.FromCubicYardsPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Get VolumeFlow from CubicYardsPerSecond.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeFlow.FromDecilitersPerMinute(UnitsNet.QuantityValue)">
            <summary>
                Get VolumeFlow from DecilitersPerMinute.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeFlow.FromKilolitersPerMinute(UnitsNet.QuantityValue)">
            <summary>
                Get VolumeFlow from KilolitersPerMinute.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeFlow.FromLitersPerHour(UnitsNet.QuantityValue)">
            <summary>
                Get VolumeFlow from LitersPerHour.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeFlow.FromLitersPerMinute(UnitsNet.QuantityValue)">
            <summary>
                Get VolumeFlow from LitersPerMinute.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeFlow.FromLitersPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Get VolumeFlow from LitersPerSecond.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeFlow.FromMicrolitersPerMinute(UnitsNet.QuantityValue)">
            <summary>
                Get VolumeFlow from MicrolitersPerMinute.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeFlow.FromMillilitersPerMinute(UnitsNet.QuantityValue)">
            <summary>
                Get VolumeFlow from MillilitersPerMinute.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeFlow.FromMillionUsGallonsPerDay(UnitsNet.QuantityValue)">
            <summary>
                Get VolumeFlow from MillionUsGallonsPerDay.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeFlow.FromNanolitersPerMinute(UnitsNet.QuantityValue)">
            <summary>
                Get VolumeFlow from NanolitersPerMinute.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeFlow.FromOilBarrelsPerDay(UnitsNet.QuantityValue)">
            <summary>
                Get VolumeFlow from OilBarrelsPerDay.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeFlow.FromOilBarrelsPerHour(UnitsNet.QuantityValue)">
            <summary>
                Get VolumeFlow from OilBarrelsPerHour.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeFlow.FromOilBarrelsPerMinute(UnitsNet.QuantityValue)">
            <summary>
                Get VolumeFlow from OilBarrelsPerMinute.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeFlow.FromUsGallonsPerHour(UnitsNet.QuantityValue)">
            <summary>
                Get VolumeFlow from UsGallonsPerHour.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeFlow.FromUsGallonsPerMinute(UnitsNet.QuantityValue)">
            <summary>
                Get VolumeFlow from UsGallonsPerMinute.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeFlow.FromUsGallonsPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Get VolumeFlow from UsGallonsPerSecond.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VolumeFlow.From(UnitsNet.QuantityValue,UnitsNet.Units.VolumeFlowUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.VolumeFlowUnit" /> to <see cref="T:UnitsNet.VolumeFlow" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>VolumeFlow unit value.</returns>
        </member>
        <member name="M:UnitsNet.VolumeFlow.GetAbbreviation(UnitsNet.Units.VolumeFlowUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.VolumeFlow.Equals(UnitsNet.VolumeFlow,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another VolumeFlow within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.VolumeFlow.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current VolumeFlow.</returns>
        </member>
        <member name="M:UnitsNet.VolumeFlow.As(UnitsNet.Units.VolumeFlowUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.VolumeFlow.ToUnit(UnitsNet.Units.VolumeFlowUnit)">
            <summary>
                Converts this VolumeFlow to another VolumeFlow with the unit representation <paramref name="unit" />.
            </summary>
            <returns>A VolumeFlow with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.VolumeFlow.AsBaseUnit">
            <summary>
                Converts the current value + unit to the base unit.
                This is typically the first step in converting from one unit to another.
            </summary>
            <returns>The value in the base unit representation.</returns>
        </member>
        <member name="M:UnitsNet.VolumeFlow.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.VolumeFlow.TryParse(System.String,UnitsNet.VolumeFlow@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.VolumeFlow.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.VolumeFlow.ParseInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.VolumeFlow.TryParseInternal(System.String,System.IFormatProvider,UnitsNet.VolumeFlow@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.VolumeFlow.ParseUnitInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.VolumeFlow.TryParseUnitInternal(System.String,System.IFormatProvider,UnitsNet.Units.VolumeFlowUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.VolumeFlow.ToString">
            <summary>
                Get default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.VolumeFlow.ToString(UnitsNet.Units.VolumeFlowUnit)">
            <summary>
                Get string representation of value and unit. Using current UI culture and two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <returns>String representation.</returns>
        </member>
        <member name="P:UnitsNet.VolumeFlow.MaxValue">
            <summary>
            Represents the largest possible value of VolumeFlow
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.MinValue">
            <summary>
            Represents the smallest possible value of VolumeFlow
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.Type">
            <summary>
                The <see cref="P:UnitsNet.VolumeFlow.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.VolumeFlow.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.VolumeFlow.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="M:UnitsNet.QuantityParser.ParseWithRegex``2(System.String,System.String,UnitsNet.ParseUnitDelegate{``1},UnitsNet.QuantityFromDelegate{``0,``1},System.IFormatProvider)">
            <summary>
                Parse a string given a particular regular expression.
            </summary>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.QuantityParser.TryParseWithRegex``2(System.String,System.String,UnitsNet.TryParseUnitDelegate{``1},UnitsNet.QuantityFromDelegate{``0,``1},System.IFormatProvider,System.Collections.Generic.List{``0}@)">
            <summary>
                Parse a string given a particular regular expression.
            </summary>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="F:UnitsNet.UnitAbbreviationsCache.FallbackCulture">
            <summary>
                Fallback culture used by <see cref="M:UnitsNet.UnitAbbreviationsCache.GetAllAbbreviations``1(``0,System.IFormatProvider)" /> and <see cref="M:UnitsNet.UnitAbbreviationsCache.GetDefaultAbbreviation``1(``0,System.IFormatProvider)" />
                if no abbreviations are found with a given culture.
            </summary>
            <example>
                User wants to call <see cref="M:UnitsNet.UnitParser.Parse``1(System.String,System.IFormatProvider)" /> or <see cref="M:UnitsNet.Length.ToString" /> with Russian
                culture, but no translation is defined, so we return the US English definition as a last resort. If it's not
                defined there either, an exception is thrown.
            </example>
        </member>
        <member name="M:UnitsNet.UnitAbbreviationsCache.MapUnitToAbbreviation``1(``0,System.String[])">
            <summary>
            Adds one or more unit abbreviation for the given unit enum value.
            This is used to dynamically add abbreviations for existing unit enums such as <see cref="T:UnitsNet.Units.LengthUnit"/> or to extend with third-party unit enums
            in order to <see cref="M:UnitsNet.UnitParser.Parse``1(System.String,System.IFormatProvider)"/> or <see cref="M:UnitsNet.UnitAbbreviationsCache.GetDefaultAbbreviation``1(``0,System.IFormatProvider)"/> on them later.
            </summary>
            <param name="unit">The unit enum value.</param>
            <param name="abbreviations">Unit abbreviations to add.</param>
            <typeparam name="TUnitType">The type of unit enum.</typeparam>
        </member>
        <member name="M:UnitsNet.UnitAbbreviationsCache.MapUnitToAbbreviation``1(``0,System.IFormatProvider,System.String[])">
            <summary>
            Adds one or more unit abbreviation for the given unit enum value.
            This is used to dynamically add abbreviations for existing unit enums such as <see cref="T:UnitsNet.Units.LengthUnit"/> or to extend with third-party unit enums
            in order to <see cref="M:UnitsNet.UnitParser.Parse``1(System.String,System.IFormatProvider)"/> or <see cref="M:UnitsNet.UnitAbbreviationsCache.GetDefaultAbbreviation``1(``0,System.IFormatProvider)"/> on them later.
            </summary>
            <param name="unit">The unit enum value.</param>
            <param name="formatProvider">The format provider to use for lookup. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="abbreviations">Unit abbreviations to add.</param>
            <typeparam name="TUnitType">The type of unit enum.</typeparam>
        </member>
        <member name="M:UnitsNet.UnitAbbreviationsCache.MapUnitToAbbreviation(System.Type,System.Int32,System.IFormatProvider,System.String[])">
            <summary>
            Adds one or more unit abbreviation for the given unit enum value.
            This is used to dynamically add abbreviations for existing unit enums such as <see cref="T:UnitsNet.Units.LengthUnit"/> or to extend with third-party unit enums
            in order to <see cref="M:UnitsNet.UnitParser.Parse``1(System.String,System.IFormatProvider)"/> or <see cref="M:UnitsNet.UnitAbbreviationsCache.GetDefaultAbbreviation``1(``0,System.IFormatProvider)"/> on them later.
            </summary>
            <param name="unitType">The unit enum type.</param>
            <param name="unitValue">The unit enum value.</param>
            <param name="formatProvider">The format provider to use for lookup. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="abbreviations">Unit abbreviations to add.</param>
        </member>
        <member name="M:UnitsNet.UnitAbbreviationsCache.GetDefaultAbbreviation``1(``0,System.IFormatProvider)">
            <summary>
            Gets the default abbreviation for a given unit. If a unit has more than one abbreviation defined, then it returns the first one.
            Example: GetDefaultAbbreviation&lt;LengthUnit&gt;(LengthUnit.Kilometer) => "km"
            </summary>
            <param name="unit">The unit enum value.</param>
            <param name="formatProvider">The format provider to use for lookup. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <typeparam name="TUnitType">The type of unit enum.</typeparam>
            <returns>The default unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.UnitAbbreviationsCache.GetDefaultAbbreviation(System.Type,System.Int32,System.IFormatProvider)">
            <summary>
            Gets the default abbreviation for a given unit type and its numeric enum value.
            If a unit has more than one abbreviation defined, then it returns the first one.
            Example: GetDefaultAbbreviation&lt;LengthUnit&gt;(typeof(LengthUnit), 1) => "cm"
            </summary>
            <param name="unitType">The unit enum type.</param>
            <param name="unitValue">The unit enum value.</param>
            <param name="formatProvider">The format provider to use for lookup. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>The default unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.UnitAbbreviationsCache.GetAllAbbreviations``1(``0,System.IFormatProvider)">
            <summary>
                Get all abbreviations for unit.
            </summary>
            <typeparam name="TUnitType">Enum type for units.</typeparam>
            <param name="unit">Enum value for unit.</param>
            <param name="formatProvider">The format provider to use for lookup. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>Unit abbreviations associated with unit.</returns>
        </member>
        <member name="M:UnitsNet.UnitAbbreviationsCache.GetAllAbbreviations(System.Type,System.Int32,System.IFormatProvider)">
            <summary>
                Get all abbreviations for unit.
            </summary>
            <param name="unitType">Enum type for unit.</param>
            <param name="unitValue">Enum value for unit.</param>
            <param name="formatProvider">The format provider to use for lookup. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>Unit abbreviations associated with unit.</returns>
        </member>
        <member name="M:UnitsNet.UnitAbbreviationsCache.GetAllAbbreviations(System.Type,System.IFormatProvider)">
            <summary>
                Get all abbreviations for unit.
            </summary>
            <param name="unitType">Enum type for unit.</param>
            <param name="formatProvider">The format provider to use for lookup. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>Unit abbreviations associated with unit.</returns>
        </member>
        <member name="M:UnitsNet.UnitParser.Parse``1(System.String,System.IFormatProvider)">
            <summary>
            Parses a unit abbreviation for a given unit enumeration type.
            Example: Parse&lt;LengthUnit&gt;("km") => LengthUnit.Kilometer
            </summary>
            <param name="unitAbbreviation"></param>
            <param name="formatProvider">The format provider to use for lookup. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <typeparam name="TUnitType"></typeparam>
            <returns></returns>
        </member>
        <member name="M:UnitsNet.UnitParser.Parse(System.String,System.Type,System.IFormatProvider)">
            <summary>
                Parse a unit abbreviation, such as "kg" or "m", to the unit enum value of the enum type
                <paramref name="unitType" />.
            </summary>
            <param name="unitAbbreviation">
                Unit abbreviation, such as "kg" or "m" for <see cref="F:UnitsNet.Units.MassUnit.Kilogram" /> and
                <see cref="F:UnitsNet.Units.LengthUnit.Meter" /> respectively.
            </param>
            <param name="unitType">Unit enum type, such as <see cref="T:UnitsNet.Units.MassUnit" /> and <see cref="T:UnitsNet.Units.LengthUnit" />.</param>
            <param name="formatProvider">The format provider to use for lookup. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>Unit enum value, such as <see cref="F:UnitsNet.Units.MassUnit.Kilogram" />.</returns>
            <exception cref="T:UnitsNet.UnitNotFoundException">No units match the abbreviation.</exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">More than one unit matches the abbrevation.</exception>
        </member>
        <member name="M:UnitsNet.UnitParser.TryParse``1(System.String,``0@)">
            <summary>
            Try to parse a unit abbreviation.
            </summary>
            <param name="unitAbbreviation">The string value.</param>
            <param name="unit">The unit enum value as out result.</param>
            <typeparam name="TUnitType">Type of unit enum.</typeparam>
            <returns>True if successful.</returns>
        </member>
        <member name="M:UnitsNet.UnitParser.TryParse``1(System.String,System.IFormatProvider,``0@)">
            <summary>
            Try to parse a unit abbreviation.
            </summary>
            <param name="unitAbbreviation">The string value.</param>
            <param name="formatProvider">The format provider to use for lookup. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">The unit enum value as out result.</param>
            <typeparam name="TUnitType">Type of unit enum.</typeparam>
            <returns>True if successful.</returns>
        </member>
        <member name="M:UnitsNet.UnitParser.TryParse(System.String,System.Type,System.Object@)">
            <summary>
            Try to parse a unit abbreviation.
            </summary>
            <param name="unitAbbreviation">The string value.</param>
            <param name="unitType">Type of unit enum.</param>
            <param name="unit">The unit enum value as out result.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:UnitsNet.UnitParser.TryParse(System.String,System.Type,System.IFormatProvider,System.Object@)">
            <summary>
            Try to parse a unit abbreviation.
            </summary>
            <param name="unitAbbreviation">The string value.</param>
            <param name="unitType">Type of unit enum.</param>
            <param name="formatProvider">The format provider to use for lookup. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">The unit enum value as out result.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:UnitsNet.UnitParser.GetDefault(System.Type)">
            <summary>
                Get default(Type) of
                <param name="type"></param>
                .
                Null for reference types, 0 for numeric types and default constructor for the rest.
            </summary>
        </member>
        <member name="T:UnitsNet.AmountOfSubstance">
            <summary>
                Mole is the amount of substance containing Avagadro's Number (6.02 x 10 ^ 23) of real particles such as molecules,atoms, ions or radicals.
            </summary>
            <summary>
                Mole is the amount of substance containing Avagadro's Number (6.02 x 10 ^ 23) of real particles such as molecules,atoms, ions or radicals.
            </summary>
        </member>
        <member name="P:UnitsNet.AmountOfSubstance.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.GetAbbreviation(UnitsNet.Units.AmountOfSubstanceUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.TryParse(System.String,System.IFormatProvider,UnitsNet.AmountOfSubstance@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.AmountOfSubstanceUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.ToString(UnitsNet.Units.AmountOfSubstanceUnit,System.IFormatProvider)">
            <summary>
                Get string representation of value and unit. Using two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.ToString(UnitsNet.Units.AmountOfSubstanceUnit,System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.ToString(UnitsNet.Units.AmountOfSubstanceUnit,System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">Unit representation to use.</param>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
        </member>
        <member name="F:UnitsNet.AmountOfSubstance._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.AmountOfSubstance._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.AmountOfSubstance.Unit">
            <summary>
                The unit this quantity was constructed with -or- <see cref="P:UnitsNet.AmountOfSubstance.BaseUnit" /> if default ctor was used.
            </summary>
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.#ctor(System.Double,UnitsNet.Units.AmountOfSubstanceUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="numericValue">The numeric value  to contruct this quantity with.</param>
            <param name="unit">The unit representation to contruct this quantity with.</param>
            <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="P:UnitsNet.AmountOfSubstance.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.AmountOfSubstance.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.AmountOfSubstance.BaseUnit">
            <summary>
                The base unit of AmountOfSubstance, which is Mole. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.AmountOfSubstance.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.AmountOfSubstance.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.AmountOfSubstance.Units">
            <summary>
                All units of measurement for the AmountOfSubstance quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.AmountOfSubstance.Centimoles">
            <summary>
                Get AmountOfSubstance in Centimoles.
            </summary>
        </member>
        <member name="P:UnitsNet.AmountOfSubstance.CentipoundMoles">
            <summary>
                Get AmountOfSubstance in CentipoundMoles.
            </summary>
        </member>
        <member name="P:UnitsNet.AmountOfSubstance.Decimoles">
            <summary>
                Get AmountOfSubstance in Decimoles.
            </summary>
        </member>
        <member name="P:UnitsNet.AmountOfSubstance.DecipoundMoles">
            <summary>
                Get AmountOfSubstance in DecipoundMoles.
            </summary>
        </member>
        <member name="P:UnitsNet.AmountOfSubstance.Kilomoles">
            <summary>
                Get AmountOfSubstance in Kilomoles.
            </summary>
        </member>
        <member name="P:UnitsNet.AmountOfSubstance.KilopoundMoles">
            <summary>
                Get AmountOfSubstance in KilopoundMoles.
            </summary>
        </member>
        <member name="P:UnitsNet.AmountOfSubstance.Micromoles">
            <summary>
                Get AmountOfSubstance in Micromoles.
            </summary>
        </member>
        <member name="P:UnitsNet.AmountOfSubstance.MicropoundMoles">
            <summary>
                Get AmountOfSubstance in MicropoundMoles.
            </summary>
        </member>
        <member name="P:UnitsNet.AmountOfSubstance.Millimoles">
            <summary>
                Get AmountOfSubstance in Millimoles.
            </summary>
        </member>
        <member name="P:UnitsNet.AmountOfSubstance.MillipoundMoles">
            <summary>
                Get AmountOfSubstance in MillipoundMoles.
            </summary>
        </member>
        <member name="P:UnitsNet.AmountOfSubstance.Moles">
            <summary>
                Get AmountOfSubstance in Moles.
            </summary>
        </member>
        <member name="P:UnitsNet.AmountOfSubstance.Nanomoles">
            <summary>
                Get AmountOfSubstance in Nanomoles.
            </summary>
        </member>
        <member name="P:UnitsNet.AmountOfSubstance.NanopoundMoles">
            <summary>
                Get AmountOfSubstance in NanopoundMoles.
            </summary>
        </member>
        <member name="P:UnitsNet.AmountOfSubstance.PoundMoles">
            <summary>
                Get AmountOfSubstance in PoundMoles.
            </summary>
        </member>
        <member name="P:UnitsNet.AmountOfSubstance.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit Mole.
            </summary>
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.FromCentimoles(UnitsNet.QuantityValue)">
            <summary>
                Get AmountOfSubstance from Centimoles.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.FromCentipoundMoles(UnitsNet.QuantityValue)">
            <summary>
                Get AmountOfSubstance from CentipoundMoles.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.FromDecimoles(UnitsNet.QuantityValue)">
            <summary>
                Get AmountOfSubstance from Decimoles.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.FromDecipoundMoles(UnitsNet.QuantityValue)">
            <summary>
                Get AmountOfSubstance from DecipoundMoles.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.FromKilomoles(UnitsNet.QuantityValue)">
            <summary>
                Get AmountOfSubstance from Kilomoles.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.FromKilopoundMoles(UnitsNet.QuantityValue)">
            <summary>
                Get AmountOfSubstance from KilopoundMoles.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.FromMicromoles(UnitsNet.QuantityValue)">
            <summary>
                Get AmountOfSubstance from Micromoles.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.FromMicropoundMoles(UnitsNet.QuantityValue)">
            <summary>
                Get AmountOfSubstance from MicropoundMoles.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.FromMillimoles(UnitsNet.QuantityValue)">
            <summary>
                Get AmountOfSubstance from Millimoles.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.FromMillipoundMoles(UnitsNet.QuantityValue)">
            <summary>
                Get AmountOfSubstance from MillipoundMoles.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.FromMoles(UnitsNet.QuantityValue)">
            <summary>
                Get AmountOfSubstance from Moles.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.FromNanomoles(UnitsNet.QuantityValue)">
            <summary>
                Get AmountOfSubstance from Nanomoles.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.FromNanopoundMoles(UnitsNet.QuantityValue)">
            <summary>
                Get AmountOfSubstance from NanopoundMoles.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.FromPoundMoles(UnitsNet.QuantityValue)">
            <summary>
                Get AmountOfSubstance from PoundMoles.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.From(UnitsNet.QuantityValue,UnitsNet.Units.AmountOfSubstanceUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.AmountOfSubstanceUnit" /> to <see cref="T:UnitsNet.AmountOfSubstance" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>AmountOfSubstance unit value.</returns>
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.GetAbbreviation(UnitsNet.Units.AmountOfSubstanceUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.Equals(UnitsNet.AmountOfSubstance,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another AmountOfSubstance within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current AmountOfSubstance.</returns>
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.As(UnitsNet.Units.AmountOfSubstanceUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.ToUnit(UnitsNet.Units.AmountOfSubstanceUnit)">
            <summary>
                Converts this AmountOfSubstance to another AmountOfSubstance with the unit representation <paramref name="unit" />.
            </summary>
            <returns>A AmountOfSubstance with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.AsBaseUnit">
            <summary>
                Converts the current value + unit to the base unit.
                This is typically the first step in converting from one unit to another.
            </summary>
            <returns>The value in the base unit representation.</returns>
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.TryParse(System.String,UnitsNet.AmountOfSubstance@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.ParseInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.TryParseInternal(System.String,System.IFormatProvider,UnitsNet.AmountOfSubstance@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.ParseUnitInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.TryParseUnitInternal(System.String,System.IFormatProvider,UnitsNet.Units.AmountOfSubstanceUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.ToString">
            <summary>
                Get default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.AmountOfSubstance.ToString(UnitsNet.Units.AmountOfSubstanceUnit)">
            <summary>
                Get string representation of value and unit. Using current UI culture and two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <returns>String representation.</returns>
        </member>
        <member name="P:UnitsNet.AmountOfSubstance.MaxValue">
            <summary>
            Represents the largest possible value of AmountOfSubstance
            </summary>
        </member>
        <member name="P:UnitsNet.AmountOfSubstance.MinValue">
            <summary>
            Represents the smallest possible value of AmountOfSubstance
            </summary>
        </member>
        <member name="P:UnitsNet.AmountOfSubstance.Type">
            <summary>
                The <see cref="P:UnitsNet.AmountOfSubstance.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.AmountOfSubstance.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.AmountOfSubstance.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="T:UnitsNet.ApparentEnergy">
            <summary>
                A unit for expressing the integral of apparent power over time, equal to the product of 1 volt-ampere and 1 hour, or to 3600 joules.
            </summary>
            <summary>
                A unit for expressing the integral of apparent power over time, equal to the product of 1 volt-ampere and 1 hour, or to 3600 joules.
            </summary>
        </member>
        <member name="P:UnitsNet.ApparentEnergy.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.ApparentEnergy.GetAbbreviation(UnitsNet.Units.ApparentEnergyUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.ApparentEnergy.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.ApparentEnergy.TryParse(System.String,System.IFormatProvider,UnitsNet.ApparentEnergy@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ApparentEnergy.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ApparentEnergy.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.ApparentEnergyUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ApparentEnergy.ToString(UnitsNet.Units.ApparentEnergyUnit,System.IFormatProvider)">
            <summary>
                Get string representation of value and unit. Using two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.ApparentEnergy.ToString(UnitsNet.Units.ApparentEnergyUnit,System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.ApparentEnergy.ToString(UnitsNet.Units.ApparentEnergyUnit,System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">Unit representation to use.</param>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
        </member>
        <member name="F:UnitsNet.ApparentEnergy._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.ApparentEnergy._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.ApparentEnergy.Unit">
            <summary>
                The unit this quantity was constructed with -or- <see cref="P:UnitsNet.ApparentEnergy.BaseUnit" /> if default ctor was used.
            </summary>
        </member>
        <member name="M:UnitsNet.ApparentEnergy.#ctor(System.Double,UnitsNet.Units.ApparentEnergyUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="numericValue">The numeric value  to contruct this quantity with.</param>
            <param name="unit">The unit representation to contruct this quantity with.</param>
            <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="P:UnitsNet.ApparentEnergy.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.ApparentEnergy.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ApparentEnergy.BaseUnit">
            <summary>
                The base unit of ApparentEnergy, which is VoltampereHour. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.ApparentEnergy.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.ApparentEnergy.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ApparentEnergy.Units">
            <summary>
                All units of measurement for the ApparentEnergy quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ApparentEnergy.KilovoltampereHours">
            <summary>
                Get ApparentEnergy in KilovoltampereHours.
            </summary>
        </member>
        <member name="P:UnitsNet.ApparentEnergy.MegavoltampereHours">
            <summary>
                Get ApparentEnergy in MegavoltampereHours.
            </summary>
        </member>
        <member name="P:UnitsNet.ApparentEnergy.VoltampereHours">
            <summary>
                Get ApparentEnergy in VoltampereHours.
            </summary>
        </member>
        <member name="P:UnitsNet.ApparentEnergy.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit VoltampereHour.
            </summary>
        </member>
        <member name="M:UnitsNet.ApparentEnergy.FromKilovoltampereHours(UnitsNet.QuantityValue)">
            <summary>
                Get ApparentEnergy from KilovoltampereHours.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ApparentEnergy.FromMegavoltampereHours(UnitsNet.QuantityValue)">
            <summary>
                Get ApparentEnergy from MegavoltampereHours.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ApparentEnergy.FromVoltampereHours(UnitsNet.QuantityValue)">
            <summary>
                Get ApparentEnergy from VoltampereHours.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ApparentEnergy.From(UnitsNet.QuantityValue,UnitsNet.Units.ApparentEnergyUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.ApparentEnergyUnit" /> to <see cref="T:UnitsNet.ApparentEnergy" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>ApparentEnergy unit value.</returns>
        </member>
        <member name="M:UnitsNet.ApparentEnergy.GetAbbreviation(UnitsNet.Units.ApparentEnergyUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.ApparentEnergy.Equals(UnitsNet.ApparentEnergy,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another ApparentEnergy within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.ApparentEnergy.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current ApparentEnergy.</returns>
        </member>
        <member name="M:UnitsNet.ApparentEnergy.As(UnitsNet.Units.ApparentEnergyUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ApparentEnergy.ToUnit(UnitsNet.Units.ApparentEnergyUnit)">
            <summary>
                Converts this ApparentEnergy to another ApparentEnergy with the unit representation <paramref name="unit" />.
            </summary>
            <returns>A ApparentEnergy with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ApparentEnergy.AsBaseUnit">
            <summary>
                Converts the current value + unit to the base unit.
                This is typically the first step in converting from one unit to another.
            </summary>
            <returns>The value in the base unit representation.</returns>
        </member>
        <member name="M:UnitsNet.ApparentEnergy.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.ApparentEnergy.TryParse(System.String,UnitsNet.ApparentEnergy@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ApparentEnergy.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ApparentEnergy.ParseInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.ApparentEnergy.TryParseInternal(System.String,System.IFormatProvider,UnitsNet.ApparentEnergy@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ApparentEnergy.ParseUnitInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ApparentEnergy.TryParseUnitInternal(System.String,System.IFormatProvider,UnitsNet.Units.ApparentEnergyUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ApparentEnergy.ToString">
            <summary>
                Get default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.ApparentEnergy.ToString(UnitsNet.Units.ApparentEnergyUnit)">
            <summary>
                Get string representation of value and unit. Using current UI culture and two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <returns>String representation.</returns>
        </member>
        <member name="P:UnitsNet.ApparentEnergy.MaxValue">
            <summary>
            Represents the largest possible value of ApparentEnergy
            </summary>
        </member>
        <member name="P:UnitsNet.ApparentEnergy.MinValue">
            <summary>
            Represents the smallest possible value of ApparentEnergy
            </summary>
        </member>
        <member name="P:UnitsNet.ApparentEnergy.Type">
            <summary>
                The <see cref="P:UnitsNet.ApparentEnergy.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ApparentEnergy.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.ApparentEnergy.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="T:UnitsNet.ApparentPower">
            <summary>
                Power engineers measure apparent power as the magnitude of the vector sum of active and reactive power. Apparent power is the product of the root-mean-square of voltage and current.
            </summary>
            <summary>
                Power engineers measure apparent power as the magnitude of the vector sum of active and reactive power. Apparent power is the product of the root-mean-square of voltage and current.
            </summary>
        </member>
        <member name="P:UnitsNet.ApparentPower.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.ApparentPower.GetAbbreviation(UnitsNet.Units.ApparentPowerUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.ApparentPower.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.ApparentPower.TryParse(System.String,System.IFormatProvider,UnitsNet.ApparentPower@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ApparentPower.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ApparentPower.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.ApparentPowerUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ApparentPower.ToString(UnitsNet.Units.ApparentPowerUnit,System.IFormatProvider)">
            <summary>
                Get string representation of value and unit. Using two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.ApparentPower.ToString(UnitsNet.Units.ApparentPowerUnit,System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.ApparentPower.ToString(UnitsNet.Units.ApparentPowerUnit,System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">Unit representation to use.</param>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
        </member>
        <member name="F:UnitsNet.ApparentPower._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.ApparentPower._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.ApparentPower.Unit">
            <summary>
                The unit this quantity was constructed with -or- <see cref="P:UnitsNet.ApparentPower.BaseUnit" /> if default ctor was used.
            </summary>
        </member>
        <member name="M:UnitsNet.ApparentPower.#ctor(System.Double,UnitsNet.Units.ApparentPowerUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="numericValue">The numeric value  to contruct this quantity with.</param>
            <param name="unit">The unit representation to contruct this quantity with.</param>
            <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="P:UnitsNet.ApparentPower.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.ApparentPower.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ApparentPower.BaseUnit">
            <summary>
                The base unit of ApparentPower, which is Voltampere. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.ApparentPower.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.ApparentPower.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ApparentPower.Units">
            <summary>
                All units of measurement for the ApparentPower quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ApparentPower.Gigavoltamperes">
            <summary>
                Get ApparentPower in Gigavoltamperes.
            </summary>
        </member>
        <member name="P:UnitsNet.ApparentPower.Kilovoltamperes">
            <summary>
                Get ApparentPower in Kilovoltamperes.
            </summary>
        </member>
        <member name="P:UnitsNet.ApparentPower.Megavoltamperes">
            <summary>
                Get ApparentPower in Megavoltamperes.
            </summary>
        </member>
        <member name="P:UnitsNet.ApparentPower.Voltamperes">
            <summary>
                Get ApparentPower in Voltamperes.
            </summary>
        </member>
        <member name="P:UnitsNet.ApparentPower.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit Voltampere.
            </summary>
        </member>
        <member name="M:UnitsNet.ApparentPower.FromGigavoltamperes(UnitsNet.QuantityValue)">
            <summary>
                Get ApparentPower from Gigavoltamperes.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ApparentPower.FromKilovoltamperes(UnitsNet.QuantityValue)">
            <summary>
                Get ApparentPower from Kilovoltamperes.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ApparentPower.FromMegavoltamperes(UnitsNet.QuantityValue)">
            <summary>
                Get ApparentPower from Megavoltamperes.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ApparentPower.FromVoltamperes(UnitsNet.QuantityValue)">
            <summary>
                Get ApparentPower from Voltamperes.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ApparentPower.From(UnitsNet.QuantityValue,UnitsNet.Units.ApparentPowerUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.ApparentPowerUnit" /> to <see cref="T:UnitsNet.ApparentPower" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>ApparentPower unit value.</returns>
        </member>
        <member name="M:UnitsNet.ApparentPower.GetAbbreviation(UnitsNet.Units.ApparentPowerUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.ApparentPower.Equals(UnitsNet.ApparentPower,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another ApparentPower within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.ApparentPower.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current ApparentPower.</returns>
        </member>
        <member name="M:UnitsNet.ApparentPower.As(UnitsNet.Units.ApparentPowerUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ApparentPower.ToUnit(UnitsNet.Units.ApparentPowerUnit)">
            <summary>
                Converts this ApparentPower to another ApparentPower with the unit representation <paramref name="unit" />.
            </summary>
            <returns>A ApparentPower with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ApparentPower.AsBaseUnit">
            <summary>
                Converts the current value + unit to the base unit.
                This is typically the first step in converting from one unit to another.
            </summary>
            <returns>The value in the base unit representation.</returns>
        </member>
        <member name="M:UnitsNet.ApparentPower.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.ApparentPower.TryParse(System.String,UnitsNet.ApparentPower@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ApparentPower.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ApparentPower.ParseInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.ApparentPower.TryParseInternal(System.String,System.IFormatProvider,UnitsNet.ApparentPower@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ApparentPower.ParseUnitInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ApparentPower.TryParseUnitInternal(System.String,System.IFormatProvider,UnitsNet.Units.ApparentPowerUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ApparentPower.ToString">
            <summary>
                Get default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.ApparentPower.ToString(UnitsNet.Units.ApparentPowerUnit)">
            <summary>
                Get string representation of value and unit. Using current UI culture and two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <returns>String representation.</returns>
        </member>
        <member name="P:UnitsNet.ApparentPower.MaxValue">
            <summary>
            Represents the largest possible value of ApparentPower
            </summary>
        </member>
        <member name="P:UnitsNet.ApparentPower.MinValue">
            <summary>
            Represents the smallest possible value of ApparentPower
            </summary>
        </member>
        <member name="P:UnitsNet.ApparentPower.Type">
            <summary>
                The <see cref="P:UnitsNet.ApparentPower.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ApparentPower.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.ApparentPower.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="T:UnitsNet.AreaDensity">
            <summary>
                The area density of a two-dimensional object is calculated as the mass per unit area.
            </summary>
            <summary>
                The area density of a two-dimensional object is calculated as the mass per unit area.
            </summary>
        </member>
        <member name="P:UnitsNet.AreaDensity.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.AreaDensity.GetAbbreviation(UnitsNet.Units.AreaDensityUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.AreaDensity.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.AreaDensity.TryParse(System.String,System.IFormatProvider,UnitsNet.AreaDensity@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.AreaDensity.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.AreaDensity.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.AreaDensityUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.AreaDensity.ToString(UnitsNet.Units.AreaDensityUnit,System.IFormatProvider)">
            <summary>
                Get string representation of value and unit. Using two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.AreaDensity.ToString(UnitsNet.Units.AreaDensityUnit,System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.AreaDensity.ToString(UnitsNet.Units.AreaDensityUnit,System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">Unit representation to use.</param>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
        </member>
        <member name="F:UnitsNet.AreaDensity._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.AreaDensity._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.AreaDensity.Unit">
            <summary>
                The unit this quantity was constructed with -or- <see cref="P:UnitsNet.AreaDensity.BaseUnit" /> if default ctor was used.
            </summary>
        </member>
        <member name="M:UnitsNet.AreaDensity.#ctor(System.Double,UnitsNet.Units.AreaDensityUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="numericValue">The numeric value  to contruct this quantity with.</param>
            <param name="unit">The unit representation to contruct this quantity with.</param>
            <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="P:UnitsNet.AreaDensity.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.AreaDensity.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.AreaDensity.BaseUnit">
            <summary>
                The base unit of AreaDensity, which is KilogramPerSquareMeter. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.AreaDensity.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.AreaDensity.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.AreaDensity.Units">
            <summary>
                All units of measurement for the AreaDensity quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.AreaDensity.KilogramsPerSquareMeter">
            <summary>
                Get AreaDensity in KilogramsPerSquareMeter.
            </summary>
        </member>
        <member name="P:UnitsNet.AreaDensity.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit KilogramPerSquareMeter.
            </summary>
        </member>
        <member name="M:UnitsNet.AreaDensity.FromKilogramsPerSquareMeter(UnitsNet.QuantityValue)">
            <summary>
                Get AreaDensity from KilogramsPerSquareMeter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.AreaDensity.From(UnitsNet.QuantityValue,UnitsNet.Units.AreaDensityUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.AreaDensityUnit" /> to <see cref="T:UnitsNet.AreaDensity" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>AreaDensity unit value.</returns>
        </member>
        <member name="M:UnitsNet.AreaDensity.GetAbbreviation(UnitsNet.Units.AreaDensityUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.AreaDensity.Equals(UnitsNet.AreaDensity,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another AreaDensity within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.AreaDensity.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current AreaDensity.</returns>
        </member>
        <member name="M:UnitsNet.AreaDensity.As(UnitsNet.Units.AreaDensityUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.AreaDensity.ToUnit(UnitsNet.Units.AreaDensityUnit)">
            <summary>
                Converts this AreaDensity to another AreaDensity with the unit representation <paramref name="unit" />.
            </summary>
            <returns>A AreaDensity with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.AreaDensity.AsBaseUnit">
            <summary>
                Converts the current value + unit to the base unit.
                This is typically the first step in converting from one unit to another.
            </summary>
            <returns>The value in the base unit representation.</returns>
        </member>
        <member name="M:UnitsNet.AreaDensity.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.AreaDensity.TryParse(System.String,UnitsNet.AreaDensity@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.AreaDensity.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.AreaDensity.ParseInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.AreaDensity.TryParseInternal(System.String,System.IFormatProvider,UnitsNet.AreaDensity@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.AreaDensity.ParseUnitInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.AreaDensity.TryParseUnitInternal(System.String,System.IFormatProvider,UnitsNet.Units.AreaDensityUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.AreaDensity.ToString">
            <summary>
                Get default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.AreaDensity.ToString(UnitsNet.Units.AreaDensityUnit)">
            <summary>
                Get string representation of value and unit. Using current UI culture and two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <returns>String representation.</returns>
        </member>
        <member name="P:UnitsNet.AreaDensity.MaxValue">
            <summary>
            Represents the largest possible value of AreaDensity
            </summary>
        </member>
        <member name="P:UnitsNet.AreaDensity.MinValue">
            <summary>
            Represents the smallest possible value of AreaDensity
            </summary>
        </member>
        <member name="P:UnitsNet.AreaDensity.Type">
            <summary>
                The <see cref="P:UnitsNet.AreaDensity.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.AreaDensity.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.AreaDensity.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="T:UnitsNet.AreaMomentOfInertia">
            <summary>
                A geometric property of an area that reflects how its points are distributed with regard to an axis.
            </summary>
            <summary>
                A geometric property of an area that reflects how its points are distributed with regard to an axis.
            </summary>
        </member>
        <member name="P:UnitsNet.AreaMomentOfInertia.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.AreaMomentOfInertia.GetAbbreviation(UnitsNet.Units.AreaMomentOfInertiaUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.AreaMomentOfInertia.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.AreaMomentOfInertia.TryParse(System.String,System.IFormatProvider,UnitsNet.AreaMomentOfInertia@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.AreaMomentOfInertia.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.AreaMomentOfInertia.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.AreaMomentOfInertiaUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.AreaMomentOfInertia.ToString(UnitsNet.Units.AreaMomentOfInertiaUnit,System.IFormatProvider)">
            <summary>
                Get string representation of value and unit. Using two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.AreaMomentOfInertia.ToString(UnitsNet.Units.AreaMomentOfInertiaUnit,System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.AreaMomentOfInertia.ToString(UnitsNet.Units.AreaMomentOfInertiaUnit,System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">Unit representation to use.</param>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
        </member>
        <member name="F:UnitsNet.AreaMomentOfInertia._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.AreaMomentOfInertia._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.AreaMomentOfInertia.Unit">
            <summary>
                The unit this quantity was constructed with -or- <see cref="P:UnitsNet.AreaMomentOfInertia.BaseUnit" /> if default ctor was used.
            </summary>
        </member>
        <member name="M:UnitsNet.AreaMomentOfInertia.#ctor(System.Double,UnitsNet.Units.AreaMomentOfInertiaUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="numericValue">The numeric value  to contruct this quantity with.</param>
            <param name="unit">The unit representation to contruct this quantity with.</param>
            <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="P:UnitsNet.AreaMomentOfInertia.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.AreaMomentOfInertia.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.AreaMomentOfInertia.BaseUnit">
            <summary>
                The base unit of AreaMomentOfInertia, which is MeterToTheFourth. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.AreaMomentOfInertia.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.AreaMomentOfInertia.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.AreaMomentOfInertia.Units">
            <summary>
                All units of measurement for the AreaMomentOfInertia quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.AreaMomentOfInertia.CentimetersToTheFourth">
            <summary>
                Get AreaMomentOfInertia in CentimetersToTheFourth.
            </summary>
        </member>
        <member name="P:UnitsNet.AreaMomentOfInertia.DecimetersToTheFourth">
            <summary>
                Get AreaMomentOfInertia in DecimetersToTheFourth.
            </summary>
        </member>
        <member name="P:UnitsNet.AreaMomentOfInertia.FeetToTheFourth">
            <summary>
                Get AreaMomentOfInertia in FeetToTheFourth.
            </summary>
        </member>
        <member name="P:UnitsNet.AreaMomentOfInertia.InchesToTheFourth">
            <summary>
                Get AreaMomentOfInertia in InchesToTheFourth.
            </summary>
        </member>
        <member name="P:UnitsNet.AreaMomentOfInertia.MetersToTheFourth">
            <summary>
                Get AreaMomentOfInertia in MetersToTheFourth.
            </summary>
        </member>
        <member name="P:UnitsNet.AreaMomentOfInertia.MillimetersToTheFourth">
            <summary>
                Get AreaMomentOfInertia in MillimetersToTheFourth.
            </summary>
        </member>
        <member name="P:UnitsNet.AreaMomentOfInertia.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit MeterToTheFourth.
            </summary>
        </member>
        <member name="M:UnitsNet.AreaMomentOfInertia.FromCentimetersToTheFourth(UnitsNet.QuantityValue)">
            <summary>
                Get AreaMomentOfInertia from CentimetersToTheFourth.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.AreaMomentOfInertia.FromDecimetersToTheFourth(UnitsNet.QuantityValue)">
            <summary>
                Get AreaMomentOfInertia from DecimetersToTheFourth.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.AreaMomentOfInertia.FromFeetToTheFourth(UnitsNet.QuantityValue)">
            <summary>
                Get AreaMomentOfInertia from FeetToTheFourth.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.AreaMomentOfInertia.FromInchesToTheFourth(UnitsNet.QuantityValue)">
            <summary>
                Get AreaMomentOfInertia from InchesToTheFourth.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.AreaMomentOfInertia.FromMetersToTheFourth(UnitsNet.QuantityValue)">
            <summary>
                Get AreaMomentOfInertia from MetersToTheFourth.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.AreaMomentOfInertia.FromMillimetersToTheFourth(UnitsNet.QuantityValue)">
            <summary>
                Get AreaMomentOfInertia from MillimetersToTheFourth.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.AreaMomentOfInertia.From(UnitsNet.QuantityValue,UnitsNet.Units.AreaMomentOfInertiaUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.AreaMomentOfInertiaUnit" /> to <see cref="T:UnitsNet.AreaMomentOfInertia" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>AreaMomentOfInertia unit value.</returns>
        </member>
        <member name="M:UnitsNet.AreaMomentOfInertia.GetAbbreviation(UnitsNet.Units.AreaMomentOfInertiaUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.AreaMomentOfInertia.Equals(UnitsNet.AreaMomentOfInertia,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another AreaMomentOfInertia within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.AreaMomentOfInertia.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current AreaMomentOfInertia.</returns>
        </member>
        <member name="M:UnitsNet.AreaMomentOfInertia.As(UnitsNet.Units.AreaMomentOfInertiaUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.AreaMomentOfInertia.ToUnit(UnitsNet.Units.AreaMomentOfInertiaUnit)">
            <summary>
                Converts this AreaMomentOfInertia to another AreaMomentOfInertia with the unit representation <paramref name="unit" />.
            </summary>
            <returns>A AreaMomentOfInertia with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.AreaMomentOfInertia.AsBaseUnit">
            <summary>
                Converts the current value + unit to the base unit.
                This is typically the first step in converting from one unit to another.
            </summary>
            <returns>The value in the base unit representation.</returns>
        </member>
        <member name="M:UnitsNet.AreaMomentOfInertia.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.AreaMomentOfInertia.TryParse(System.String,UnitsNet.AreaMomentOfInertia@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.AreaMomentOfInertia.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.AreaMomentOfInertia.ParseInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.AreaMomentOfInertia.TryParseInternal(System.String,System.IFormatProvider,UnitsNet.AreaMomentOfInertia@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.AreaMomentOfInertia.ParseUnitInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.AreaMomentOfInertia.TryParseUnitInternal(System.String,System.IFormatProvider,UnitsNet.Units.AreaMomentOfInertiaUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.AreaMomentOfInertia.ToString">
            <summary>
                Get default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.AreaMomentOfInertia.ToString(UnitsNet.Units.AreaMomentOfInertiaUnit)">
            <summary>
                Get string representation of value and unit. Using current UI culture and two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <returns>String representation.</returns>
        </member>
        <member name="P:UnitsNet.AreaMomentOfInertia.MaxValue">
            <summary>
            Represents the largest possible value of AreaMomentOfInertia
            </summary>
        </member>
        <member name="P:UnitsNet.AreaMomentOfInertia.MinValue">
            <summary>
            Represents the smallest possible value of AreaMomentOfInertia
            </summary>
        </member>
        <member name="P:UnitsNet.AreaMomentOfInertia.Type">
            <summary>
                The <see cref="P:UnitsNet.AreaMomentOfInertia.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.AreaMomentOfInertia.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.AreaMomentOfInertia.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="T:UnitsNet.BitRate">
            <summary>
                In telecommunications and computing, bit rate is the number of bits that are conveyed or processed per unit of time.
            </summary>
            <summary>
                In telecommunications and computing, bit rate is the number of bits that are conveyed or processed per unit of time.
            </summary>
        </member>
        <member name="P:UnitsNet.BitRate.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.BitRate.GetAbbreviation(UnitsNet.Units.BitRateUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.BitRate.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.BitRate.TryParse(System.String,System.IFormatProvider,UnitsNet.BitRate@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.BitRate.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.BitRate.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.BitRateUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.BitRate.ToString(UnitsNet.Units.BitRateUnit,System.IFormatProvider)">
            <summary>
                Get string representation of value and unit. Using two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.BitRate.ToString(UnitsNet.Units.BitRateUnit,System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.BitRate.ToString(UnitsNet.Units.BitRateUnit,System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">Unit representation to use.</param>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
        </member>
        <member name="F:UnitsNet.BitRate._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.BitRate._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.BitRate.Unit">
            <summary>
                The unit this quantity was constructed with -or- <see cref="P:UnitsNet.BitRate.BaseUnit" /> if default ctor was used.
            </summary>
        </member>
        <member name="M:UnitsNet.BitRate.#ctor(System.Decimal,UnitsNet.Units.BitRateUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="numericValue">The numeric value  to contruct this quantity with.</param>
            <param name="unit">The unit representation to contruct this quantity with.</param>
            <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="P:UnitsNet.BitRate.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.BitRate.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.BitRate.BaseUnit">
            <summary>
                The base unit of BitRate, which is BitPerSecond. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.BitRate.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.BitRate.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.BitRate.Units">
            <summary>
                All units of measurement for the BitRate quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.BitRate.BitsPerSecond">
            <summary>
                Get BitRate in BitsPerSecond.
            </summary>
        </member>
        <member name="P:UnitsNet.BitRate.BytesPerSecond">
            <summary>
                Get BitRate in BytesPerSecond.
            </summary>
        </member>
        <member name="P:UnitsNet.BitRate.ExabitsPerSecond">
            <summary>
                Get BitRate in ExabitsPerSecond.
            </summary>
        </member>
        <member name="P:UnitsNet.BitRate.ExabytesPerSecond">
            <summary>
                Get BitRate in ExabytesPerSecond.
            </summary>
        </member>
        <member name="P:UnitsNet.BitRate.ExbibitsPerSecond">
            <summary>
                Get BitRate in ExbibitsPerSecond.
            </summary>
        </member>
        <member name="P:UnitsNet.BitRate.ExbibytesPerSecond">
            <summary>
                Get BitRate in ExbibytesPerSecond.
            </summary>
        </member>
        <member name="P:UnitsNet.BitRate.GibibitsPerSecond">
            <summary>
                Get BitRate in GibibitsPerSecond.
            </summary>
        </member>
        <member name="P:UnitsNet.BitRate.GibibytesPerSecond">
            <summary>
                Get BitRate in GibibytesPerSecond.
            </summary>
        </member>
        <member name="P:UnitsNet.BitRate.GigabitsPerSecond">
            <summary>
                Get BitRate in GigabitsPerSecond.
            </summary>
        </member>
        <member name="P:UnitsNet.BitRate.GigabytesPerSecond">
            <summary>
                Get BitRate in GigabytesPerSecond.
            </summary>
        </member>
        <member name="P:UnitsNet.BitRate.KibibitsPerSecond">
            <summary>
                Get BitRate in KibibitsPerSecond.
            </summary>
        </member>
        <member name="P:UnitsNet.BitRate.KibibytesPerSecond">
            <summary>
                Get BitRate in KibibytesPerSecond.
            </summary>
        </member>
        <member name="P:UnitsNet.BitRate.KilobitsPerSecond">
            <summary>
                Get BitRate in KilobitsPerSecond.
            </summary>
        </member>
        <member name="P:UnitsNet.BitRate.KilobytesPerSecond">
            <summary>
                Get BitRate in KilobytesPerSecond.
            </summary>
        </member>
        <member name="P:UnitsNet.BitRate.MebibitsPerSecond">
            <summary>
                Get BitRate in MebibitsPerSecond.
            </summary>
        </member>
        <member name="P:UnitsNet.BitRate.MebibytesPerSecond">
            <summary>
                Get BitRate in MebibytesPerSecond.
            </summary>
        </member>
        <member name="P:UnitsNet.BitRate.MegabitsPerSecond">
            <summary>
                Get BitRate in MegabitsPerSecond.
            </summary>
        </member>
        <member name="P:UnitsNet.BitRate.MegabytesPerSecond">
            <summary>
                Get BitRate in MegabytesPerSecond.
            </summary>
        </member>
        <member name="P:UnitsNet.BitRate.PebibitsPerSecond">
            <summary>
                Get BitRate in PebibitsPerSecond.
            </summary>
        </member>
        <member name="P:UnitsNet.BitRate.PebibytesPerSecond">
            <summary>
                Get BitRate in PebibytesPerSecond.
            </summary>
        </member>
        <member name="P:UnitsNet.BitRate.PetabitsPerSecond">
            <summary>
                Get BitRate in PetabitsPerSecond.
            </summary>
        </member>
        <member name="P:UnitsNet.BitRate.PetabytesPerSecond">
            <summary>
                Get BitRate in PetabytesPerSecond.
            </summary>
        </member>
        <member name="P:UnitsNet.BitRate.TebibitsPerSecond">
            <summary>
                Get BitRate in TebibitsPerSecond.
            </summary>
        </member>
        <member name="P:UnitsNet.BitRate.TebibytesPerSecond">
            <summary>
                Get BitRate in TebibytesPerSecond.
            </summary>
        </member>
        <member name="P:UnitsNet.BitRate.TerabitsPerSecond">
            <summary>
                Get BitRate in TerabitsPerSecond.
            </summary>
        </member>
        <member name="P:UnitsNet.BitRate.TerabytesPerSecond">
            <summary>
                Get BitRate in TerabytesPerSecond.
            </summary>
        </member>
        <member name="P:UnitsNet.BitRate.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit BitPerSecond.
            </summary>
        </member>
        <member name="M:UnitsNet.BitRate.FromBitsPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Get BitRate from BitsPerSecond.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.BitRate.FromBytesPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Get BitRate from BytesPerSecond.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.BitRate.FromExabitsPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Get BitRate from ExabitsPerSecond.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.BitRate.FromExabytesPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Get BitRate from ExabytesPerSecond.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.BitRate.FromExbibitsPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Get BitRate from ExbibitsPerSecond.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.BitRate.FromExbibytesPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Get BitRate from ExbibytesPerSecond.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.BitRate.FromGibibitsPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Get BitRate from GibibitsPerSecond.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.BitRate.FromGibibytesPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Get BitRate from GibibytesPerSecond.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.BitRate.FromGigabitsPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Get BitRate from GigabitsPerSecond.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.BitRate.FromGigabytesPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Get BitRate from GigabytesPerSecond.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.BitRate.FromKibibitsPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Get BitRate from KibibitsPerSecond.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.BitRate.FromKibibytesPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Get BitRate from KibibytesPerSecond.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.BitRate.FromKilobitsPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Get BitRate from KilobitsPerSecond.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.BitRate.FromKilobytesPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Get BitRate from KilobytesPerSecond.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.BitRate.FromMebibitsPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Get BitRate from MebibitsPerSecond.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.BitRate.FromMebibytesPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Get BitRate from MebibytesPerSecond.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.BitRate.FromMegabitsPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Get BitRate from MegabitsPerSecond.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.BitRate.FromMegabytesPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Get BitRate from MegabytesPerSecond.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.BitRate.FromPebibitsPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Get BitRate from PebibitsPerSecond.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.BitRate.FromPebibytesPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Get BitRate from PebibytesPerSecond.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.BitRate.FromPetabitsPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Get BitRate from PetabitsPerSecond.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.BitRate.FromPetabytesPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Get BitRate from PetabytesPerSecond.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.BitRate.FromTebibitsPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Get BitRate from TebibitsPerSecond.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.BitRate.FromTebibytesPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Get BitRate from TebibytesPerSecond.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.BitRate.FromTerabitsPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Get BitRate from TerabitsPerSecond.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.BitRate.FromTerabytesPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Get BitRate from TerabytesPerSecond.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.BitRate.From(UnitsNet.QuantityValue,UnitsNet.Units.BitRateUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.BitRateUnit" /> to <see cref="T:UnitsNet.BitRate" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>BitRate unit value.</returns>
        </member>
        <member name="M:UnitsNet.BitRate.GetAbbreviation(UnitsNet.Units.BitRateUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.BitRate.Equals(UnitsNet.BitRate,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another BitRate within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.BitRate.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current BitRate.</returns>
        </member>
        <member name="M:UnitsNet.BitRate.As(UnitsNet.Units.BitRateUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.BitRate.ToUnit(UnitsNet.Units.BitRateUnit)">
            <summary>
                Converts this BitRate to another BitRate with the unit representation <paramref name="unit" />.
            </summary>
            <returns>A BitRate with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.BitRate.AsBaseUnit">
            <summary>
                Converts the current value + unit to the base unit.
                This is typically the first step in converting from one unit to another.
            </summary>
            <returns>The value in the base unit representation.</returns>
        </member>
        <member name="M:UnitsNet.BitRate.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.BitRate.TryParse(System.String,UnitsNet.BitRate@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.BitRate.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.BitRate.ParseInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.BitRate.TryParseInternal(System.String,System.IFormatProvider,UnitsNet.BitRate@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.BitRate.ParseUnitInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.BitRate.TryParseUnitInternal(System.String,System.IFormatProvider,UnitsNet.Units.BitRateUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.BitRate.ToString">
            <summary>
                Get default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.BitRate.ToString(UnitsNet.Units.BitRateUnit)">
            <summary>
                Get string representation of value and unit. Using current UI culture and two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <returns>String representation.</returns>
        </member>
        <member name="P:UnitsNet.BitRate.MaxValue">
            <summary>
            Represents the largest possible value of BitRate
            </summary>
        </member>
        <member name="P:UnitsNet.BitRate.MinValue">
            <summary>
            Represents the smallest possible value of BitRate
            </summary>
        </member>
        <member name="P:UnitsNet.BitRate.Type">
            <summary>
                The <see cref="P:UnitsNet.BitRate.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.BitRate.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.BitRate.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="T:UnitsNet.Capacitance">
            <summary>
                Capacitance is the ability of a body to store an electric charge.
            </summary>
            <summary>
                Capacitance is the ability of a body to store an electric charge.
            </summary>
        </member>
        <member name="P:UnitsNet.Capacitance.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.Capacitance.GetAbbreviation(UnitsNet.Units.CapacitanceUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.Capacitance.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Capacitance.TryParse(System.String,System.IFormatProvider,UnitsNet.Capacitance@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Capacitance.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Capacitance.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.CapacitanceUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Capacitance.ToString(UnitsNet.Units.CapacitanceUnit,System.IFormatProvider)">
            <summary>
                Get string representation of value and unit. Using two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Capacitance.ToString(UnitsNet.Units.CapacitanceUnit,System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Capacitance.ToString(UnitsNet.Units.CapacitanceUnit,System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">Unit representation to use.</param>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
        </member>
        <member name="F:UnitsNet.Capacitance._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.Capacitance._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.Capacitance.Unit">
            <summary>
                The unit this quantity was constructed with -or- <see cref="P:UnitsNet.Capacitance.BaseUnit" /> if default ctor was used.
            </summary>
        </member>
        <member name="M:UnitsNet.Capacitance.#ctor(System.Double,UnitsNet.Units.CapacitanceUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="numericValue">The numeric value  to contruct this quantity with.</param>
            <param name="unit">The unit representation to contruct this quantity with.</param>
            <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="P:UnitsNet.Capacitance.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.Capacitance.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Capacitance.BaseUnit">
            <summary>
                The base unit of Capacitance, which is Farad. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.Capacitance.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.Capacitance.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Capacitance.Units">
            <summary>
                All units of measurement for the Capacitance quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Capacitance.Farads">
            <summary>
                Get Capacitance in Farads.
            </summary>
        </member>
        <member name="P:UnitsNet.Capacitance.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit Farad.
            </summary>
        </member>
        <member name="M:UnitsNet.Capacitance.FromFarads(UnitsNet.QuantityValue)">
            <summary>
                Get Capacitance from Farads.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Capacitance.From(UnitsNet.QuantityValue,UnitsNet.Units.CapacitanceUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.CapacitanceUnit" /> to <see cref="T:UnitsNet.Capacitance" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>Capacitance unit value.</returns>
        </member>
        <member name="M:UnitsNet.Capacitance.GetAbbreviation(UnitsNet.Units.CapacitanceUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.Capacitance.Equals(UnitsNet.Capacitance,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another Capacitance within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.Capacitance.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current Capacitance.</returns>
        </member>
        <member name="M:UnitsNet.Capacitance.As(UnitsNet.Units.CapacitanceUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Capacitance.ToUnit(UnitsNet.Units.CapacitanceUnit)">
            <summary>
                Converts this Capacitance to another Capacitance with the unit representation <paramref name="unit" />.
            </summary>
            <returns>A Capacitance with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Capacitance.AsBaseUnit">
            <summary>
                Converts the current value + unit to the base unit.
                This is typically the first step in converting from one unit to another.
            </summary>
            <returns>The value in the base unit representation.</returns>
        </member>
        <member name="M:UnitsNet.Capacitance.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Capacitance.TryParse(System.String,UnitsNet.Capacitance@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Capacitance.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Capacitance.ParseInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Capacitance.TryParseInternal(System.String,System.IFormatProvider,UnitsNet.Capacitance@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Capacitance.ParseUnitInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Capacitance.TryParseUnitInternal(System.String,System.IFormatProvider,UnitsNet.Units.CapacitanceUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Capacitance.ToString">
            <summary>
                Get default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Capacitance.ToString(UnitsNet.Units.CapacitanceUnit)">
            <summary>
                Get string representation of value and unit. Using current UI culture and two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <returns>String representation.</returns>
        </member>
        <member name="P:UnitsNet.Capacitance.MaxValue">
            <summary>
            Represents the largest possible value of Capacitance
            </summary>
        </member>
        <member name="P:UnitsNet.Capacitance.MinValue">
            <summary>
            Represents the smallest possible value of Capacitance
            </summary>
        </member>
        <member name="P:UnitsNet.Capacitance.Type">
            <summary>
                The <see cref="P:UnitsNet.Capacitance.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Capacitance.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.Capacitance.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="T:UnitsNet.ElectricAdmittance">
            <summary>
                Electric admittance is a measure of how easily a circuit or device will allow a current to flow. It is defined as the inverse of impedance. The SI unit of admittance is the siemens (symbol S).
            </summary>
            <summary>
                Electric admittance is a measure of how easily a circuit or device will allow a current to flow. It is defined as the inverse of impedance. The SI unit of admittance is the siemens (symbol S).
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricAdmittance.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.ElectricAdmittance.GetAbbreviation(UnitsNet.Units.ElectricAdmittanceUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.ElectricAdmittance.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.ElectricAdmittance.TryParse(System.String,System.IFormatProvider,UnitsNet.ElectricAdmittance@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ElectricAdmittance.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ElectricAdmittance.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.ElectricAdmittanceUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ElectricAdmittance.ToString(UnitsNet.Units.ElectricAdmittanceUnit,System.IFormatProvider)">
            <summary>
                Get string representation of value and unit. Using two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.ElectricAdmittance.ToString(UnitsNet.Units.ElectricAdmittanceUnit,System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.ElectricAdmittance.ToString(UnitsNet.Units.ElectricAdmittanceUnit,System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">Unit representation to use.</param>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
        </member>
        <member name="F:UnitsNet.ElectricAdmittance._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.ElectricAdmittance._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricAdmittance.Unit">
            <summary>
                The unit this quantity was constructed with -or- <see cref="P:UnitsNet.ElectricAdmittance.BaseUnit" /> if default ctor was used.
            </summary>
        </member>
        <member name="M:UnitsNet.ElectricAdmittance.#ctor(System.Double,UnitsNet.Units.ElectricAdmittanceUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="numericValue">The numeric value  to contruct this quantity with.</param>
            <param name="unit">The unit representation to contruct this quantity with.</param>
            <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="P:UnitsNet.ElectricAdmittance.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.ElectricAdmittance.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricAdmittance.BaseUnit">
            <summary>
                The base unit of ElectricAdmittance, which is Siemens. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricAdmittance.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.ElectricAdmittance.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricAdmittance.Units">
            <summary>
                All units of measurement for the ElectricAdmittance quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricAdmittance.Microsiemens">
            <summary>
                Get ElectricAdmittance in Microsiemens.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricAdmittance.Millisiemens">
            <summary>
                Get ElectricAdmittance in Millisiemens.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricAdmittance.Nanosiemens">
            <summary>
                Get ElectricAdmittance in Nanosiemens.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricAdmittance.Siemens">
            <summary>
                Get ElectricAdmittance in Siemens.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricAdmittance.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit Siemens.
            </summary>
        </member>
        <member name="M:UnitsNet.ElectricAdmittance.FromMicrosiemens(UnitsNet.QuantityValue)">
            <summary>
                Get ElectricAdmittance from Microsiemens.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricAdmittance.FromMillisiemens(UnitsNet.QuantityValue)">
            <summary>
                Get ElectricAdmittance from Millisiemens.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricAdmittance.FromNanosiemens(UnitsNet.QuantityValue)">
            <summary>
                Get ElectricAdmittance from Nanosiemens.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricAdmittance.FromSiemens(UnitsNet.QuantityValue)">
            <summary>
                Get ElectricAdmittance from Siemens.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricAdmittance.From(UnitsNet.QuantityValue,UnitsNet.Units.ElectricAdmittanceUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.ElectricAdmittanceUnit" /> to <see cref="T:UnitsNet.ElectricAdmittance" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>ElectricAdmittance unit value.</returns>
        </member>
        <member name="M:UnitsNet.ElectricAdmittance.GetAbbreviation(UnitsNet.Units.ElectricAdmittanceUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.ElectricAdmittance.Equals(UnitsNet.ElectricAdmittance,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another ElectricAdmittance within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.ElectricAdmittance.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current ElectricAdmittance.</returns>
        </member>
        <member name="M:UnitsNet.ElectricAdmittance.As(UnitsNet.Units.ElectricAdmittanceUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ElectricAdmittance.ToUnit(UnitsNet.Units.ElectricAdmittanceUnit)">
            <summary>
                Converts this ElectricAdmittance to another ElectricAdmittance with the unit representation <paramref name="unit" />.
            </summary>
            <returns>A ElectricAdmittance with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ElectricAdmittance.AsBaseUnit">
            <summary>
                Converts the current value + unit to the base unit.
                This is typically the first step in converting from one unit to another.
            </summary>
            <returns>The value in the base unit representation.</returns>
        </member>
        <member name="M:UnitsNet.ElectricAdmittance.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.ElectricAdmittance.TryParse(System.String,UnitsNet.ElectricAdmittance@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ElectricAdmittance.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ElectricAdmittance.ParseInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.ElectricAdmittance.TryParseInternal(System.String,System.IFormatProvider,UnitsNet.ElectricAdmittance@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ElectricAdmittance.ParseUnitInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ElectricAdmittance.TryParseUnitInternal(System.String,System.IFormatProvider,UnitsNet.Units.ElectricAdmittanceUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ElectricAdmittance.ToString">
            <summary>
                Get default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.ElectricAdmittance.ToString(UnitsNet.Units.ElectricAdmittanceUnit)">
            <summary>
                Get string representation of value and unit. Using current UI culture and two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <returns>String representation.</returns>
        </member>
        <member name="P:UnitsNet.ElectricAdmittance.MaxValue">
            <summary>
            Represents the largest possible value of ElectricAdmittance
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricAdmittance.MinValue">
            <summary>
            Represents the smallest possible value of ElectricAdmittance
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricAdmittance.Type">
            <summary>
                The <see cref="P:UnitsNet.ElectricAdmittance.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricAdmittance.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.ElectricAdmittance.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="T:UnitsNet.ElectricCharge">
            <summary>
                Electric charge is the physical property of matter that causes it to experience a force when placed in an electromagnetic field.
            </summary>
            <summary>
                Electric charge is the physical property of matter that causes it to experience a force when placed in an electromagnetic field.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCharge.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.ElectricCharge.GetAbbreviation(UnitsNet.Units.ElectricChargeUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.ElectricCharge.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.ElectricCharge.TryParse(System.String,System.IFormatProvider,UnitsNet.ElectricCharge@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ElectricCharge.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ElectricCharge.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.ElectricChargeUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ElectricCharge.ToString(UnitsNet.Units.ElectricChargeUnit,System.IFormatProvider)">
            <summary>
                Get string representation of value and unit. Using two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.ElectricCharge.ToString(UnitsNet.Units.ElectricChargeUnit,System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.ElectricCharge.ToString(UnitsNet.Units.ElectricChargeUnit,System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">Unit representation to use.</param>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
        </member>
        <member name="F:UnitsNet.ElectricCharge._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.ElectricCharge._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCharge.Unit">
            <summary>
                The unit this quantity was constructed with -or- <see cref="P:UnitsNet.ElectricCharge.BaseUnit" /> if default ctor was used.
            </summary>
        </member>
        <member name="M:UnitsNet.ElectricCharge.#ctor(System.Double,UnitsNet.Units.ElectricChargeUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="numericValue">The numeric value  to contruct this quantity with.</param>
            <param name="unit">The unit representation to contruct this quantity with.</param>
            <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="P:UnitsNet.ElectricCharge.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.ElectricCharge.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCharge.BaseUnit">
            <summary>
                The base unit of ElectricCharge, which is Coulomb. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCharge.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.ElectricCharge.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCharge.Units">
            <summary>
                All units of measurement for the ElectricCharge quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCharge.Coulombs">
            <summary>
                Get ElectricCharge in Coulombs.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCharge.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit Coulomb.
            </summary>
        </member>
        <member name="M:UnitsNet.ElectricCharge.FromCoulombs(UnitsNet.QuantityValue)">
            <summary>
                Get ElectricCharge from Coulombs.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricCharge.From(UnitsNet.QuantityValue,UnitsNet.Units.ElectricChargeUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.ElectricChargeUnit" /> to <see cref="T:UnitsNet.ElectricCharge" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>ElectricCharge unit value.</returns>
        </member>
        <member name="M:UnitsNet.ElectricCharge.GetAbbreviation(UnitsNet.Units.ElectricChargeUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.ElectricCharge.Equals(UnitsNet.ElectricCharge,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another ElectricCharge within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.ElectricCharge.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current ElectricCharge.</returns>
        </member>
        <member name="M:UnitsNet.ElectricCharge.As(UnitsNet.Units.ElectricChargeUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ElectricCharge.ToUnit(UnitsNet.Units.ElectricChargeUnit)">
            <summary>
                Converts this ElectricCharge to another ElectricCharge with the unit representation <paramref name="unit" />.
            </summary>
            <returns>A ElectricCharge with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ElectricCharge.AsBaseUnit">
            <summary>
                Converts the current value + unit to the base unit.
                This is typically the first step in converting from one unit to another.
            </summary>
            <returns>The value in the base unit representation.</returns>
        </member>
        <member name="M:UnitsNet.ElectricCharge.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.ElectricCharge.TryParse(System.String,UnitsNet.ElectricCharge@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ElectricCharge.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ElectricCharge.ParseInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.ElectricCharge.TryParseInternal(System.String,System.IFormatProvider,UnitsNet.ElectricCharge@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ElectricCharge.ParseUnitInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ElectricCharge.TryParseUnitInternal(System.String,System.IFormatProvider,UnitsNet.Units.ElectricChargeUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ElectricCharge.ToString">
            <summary>
                Get default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.ElectricCharge.ToString(UnitsNet.Units.ElectricChargeUnit)">
            <summary>
                Get string representation of value and unit. Using current UI culture and two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <returns>String representation.</returns>
        </member>
        <member name="P:UnitsNet.ElectricCharge.MaxValue">
            <summary>
            Represents the largest possible value of ElectricCharge
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCharge.MinValue">
            <summary>
            Represents the smallest possible value of ElectricCharge
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCharge.Type">
            <summary>
                The <see cref="P:UnitsNet.ElectricCharge.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCharge.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.ElectricCharge.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="T:UnitsNet.ElectricChargeDensity">
            <summary>
                In electromagnetism, charge density is a measure of the amount of electric charge per unit length, surface area, or volume.
            </summary>
            <summary>
                In electromagnetism, charge density is a measure of the amount of electric charge per unit length, surface area, or volume.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricChargeDensity.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.ElectricChargeDensity.GetAbbreviation(UnitsNet.Units.ElectricChargeDensityUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.ElectricChargeDensity.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.ElectricChargeDensity.TryParse(System.String,System.IFormatProvider,UnitsNet.ElectricChargeDensity@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ElectricChargeDensity.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ElectricChargeDensity.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.ElectricChargeDensityUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ElectricChargeDensity.ToString(UnitsNet.Units.ElectricChargeDensityUnit,System.IFormatProvider)">
            <summary>
                Get string representation of value and unit. Using two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.ElectricChargeDensity.ToString(UnitsNet.Units.ElectricChargeDensityUnit,System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.ElectricChargeDensity.ToString(UnitsNet.Units.ElectricChargeDensityUnit,System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">Unit representation to use.</param>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
        </member>
        <member name="F:UnitsNet.ElectricChargeDensity._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.ElectricChargeDensity._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricChargeDensity.Unit">
            <summary>
                The unit this quantity was constructed with -or- <see cref="P:UnitsNet.ElectricChargeDensity.BaseUnit" /> if default ctor was used.
            </summary>
        </member>
        <member name="M:UnitsNet.ElectricChargeDensity.#ctor(System.Double,UnitsNet.Units.ElectricChargeDensityUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="numericValue">The numeric value  to contruct this quantity with.</param>
            <param name="unit">The unit representation to contruct this quantity with.</param>
            <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="P:UnitsNet.ElectricChargeDensity.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.ElectricChargeDensity.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricChargeDensity.BaseUnit">
            <summary>
                The base unit of ElectricChargeDensity, which is CoulombPerCubicMeter. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricChargeDensity.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.ElectricChargeDensity.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricChargeDensity.Units">
            <summary>
                All units of measurement for the ElectricChargeDensity quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricChargeDensity.CoulombsPerCubicMeter">
            <summary>
                Get ElectricChargeDensity in CoulombsPerCubicMeter.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricChargeDensity.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit CoulombPerCubicMeter.
            </summary>
        </member>
        <member name="M:UnitsNet.ElectricChargeDensity.FromCoulombsPerCubicMeter(UnitsNet.QuantityValue)">
            <summary>
                Get ElectricChargeDensity from CoulombsPerCubicMeter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricChargeDensity.From(UnitsNet.QuantityValue,UnitsNet.Units.ElectricChargeDensityUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.ElectricChargeDensityUnit" /> to <see cref="T:UnitsNet.ElectricChargeDensity" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>ElectricChargeDensity unit value.</returns>
        </member>
        <member name="M:UnitsNet.ElectricChargeDensity.GetAbbreviation(UnitsNet.Units.ElectricChargeDensityUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.ElectricChargeDensity.Equals(UnitsNet.ElectricChargeDensity,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another ElectricChargeDensity within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.ElectricChargeDensity.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current ElectricChargeDensity.</returns>
        </member>
        <member name="M:UnitsNet.ElectricChargeDensity.As(UnitsNet.Units.ElectricChargeDensityUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ElectricChargeDensity.ToUnit(UnitsNet.Units.ElectricChargeDensityUnit)">
            <summary>
                Converts this ElectricChargeDensity to another ElectricChargeDensity with the unit representation <paramref name="unit" />.
            </summary>
            <returns>A ElectricChargeDensity with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ElectricChargeDensity.AsBaseUnit">
            <summary>
                Converts the current value + unit to the base unit.
                This is typically the first step in converting from one unit to another.
            </summary>
            <returns>The value in the base unit representation.</returns>
        </member>
        <member name="M:UnitsNet.ElectricChargeDensity.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.ElectricChargeDensity.TryParse(System.String,UnitsNet.ElectricChargeDensity@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ElectricChargeDensity.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ElectricChargeDensity.ParseInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.ElectricChargeDensity.TryParseInternal(System.String,System.IFormatProvider,UnitsNet.ElectricChargeDensity@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ElectricChargeDensity.ParseUnitInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ElectricChargeDensity.TryParseUnitInternal(System.String,System.IFormatProvider,UnitsNet.Units.ElectricChargeDensityUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ElectricChargeDensity.ToString">
            <summary>
                Get default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.ElectricChargeDensity.ToString(UnitsNet.Units.ElectricChargeDensityUnit)">
            <summary>
                Get string representation of value and unit. Using current UI culture and two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <returns>String representation.</returns>
        </member>
        <member name="P:UnitsNet.ElectricChargeDensity.MaxValue">
            <summary>
            Represents the largest possible value of ElectricChargeDensity
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricChargeDensity.MinValue">
            <summary>
            Represents the smallest possible value of ElectricChargeDensity
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricChargeDensity.Type">
            <summary>
                The <see cref="P:UnitsNet.ElectricChargeDensity.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricChargeDensity.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.ElectricChargeDensity.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="T:UnitsNet.ElectricConductance">
            <summary>
                The electrical conductance of an electrical conductor is a measure of the easeness to pass an electric current through that conductor.
            </summary>
            <summary>
                The electrical conductance of an electrical conductor is a measure of the easeness to pass an electric current through that conductor.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricConductance.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.ElectricConductance.GetAbbreviation(UnitsNet.Units.ElectricConductanceUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.ElectricConductance.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.ElectricConductance.TryParse(System.String,System.IFormatProvider,UnitsNet.ElectricConductance@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ElectricConductance.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ElectricConductance.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.ElectricConductanceUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ElectricConductance.ToString(UnitsNet.Units.ElectricConductanceUnit,System.IFormatProvider)">
            <summary>
                Get string representation of value and unit. Using two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.ElectricConductance.ToString(UnitsNet.Units.ElectricConductanceUnit,System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.ElectricConductance.ToString(UnitsNet.Units.ElectricConductanceUnit,System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">Unit representation to use.</param>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
        </member>
        <member name="F:UnitsNet.ElectricConductance._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.ElectricConductance._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricConductance.Unit">
            <summary>
                The unit this quantity was constructed with -or- <see cref="P:UnitsNet.ElectricConductance.BaseUnit" /> if default ctor was used.
            </summary>
        </member>
        <member name="M:UnitsNet.ElectricConductance.#ctor(System.Double,UnitsNet.Units.ElectricConductanceUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="numericValue">The numeric value  to contruct this quantity with.</param>
            <param name="unit">The unit representation to contruct this quantity with.</param>
            <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="P:UnitsNet.ElectricConductance.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.ElectricConductance.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricConductance.BaseUnit">
            <summary>
                The base unit of ElectricConductance, which is Siemens. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricConductance.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.ElectricConductance.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricConductance.Units">
            <summary>
                All units of measurement for the ElectricConductance quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricConductance.Microsiemens">
            <summary>
                Get ElectricConductance in Microsiemens.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricConductance.Millisiemens">
            <summary>
                Get ElectricConductance in Millisiemens.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricConductance.Siemens">
            <summary>
                Get ElectricConductance in Siemens.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricConductance.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit Siemens.
            </summary>
        </member>
        <member name="M:UnitsNet.ElectricConductance.FromMicrosiemens(UnitsNet.QuantityValue)">
            <summary>
                Get ElectricConductance from Microsiemens.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricConductance.FromMillisiemens(UnitsNet.QuantityValue)">
            <summary>
                Get ElectricConductance from Millisiemens.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricConductance.FromSiemens(UnitsNet.QuantityValue)">
            <summary>
                Get ElectricConductance from Siemens.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricConductance.From(UnitsNet.QuantityValue,UnitsNet.Units.ElectricConductanceUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.ElectricConductanceUnit" /> to <see cref="T:UnitsNet.ElectricConductance" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>ElectricConductance unit value.</returns>
        </member>
        <member name="M:UnitsNet.ElectricConductance.GetAbbreviation(UnitsNet.Units.ElectricConductanceUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.ElectricConductance.Equals(UnitsNet.ElectricConductance,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another ElectricConductance within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.ElectricConductance.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current ElectricConductance.</returns>
        </member>
        <member name="M:UnitsNet.ElectricConductance.As(UnitsNet.Units.ElectricConductanceUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ElectricConductance.ToUnit(UnitsNet.Units.ElectricConductanceUnit)">
            <summary>
                Converts this ElectricConductance to another ElectricConductance with the unit representation <paramref name="unit" />.
            </summary>
            <returns>A ElectricConductance with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ElectricConductance.AsBaseUnit">
            <summary>
                Converts the current value + unit to the base unit.
                This is typically the first step in converting from one unit to another.
            </summary>
            <returns>The value in the base unit representation.</returns>
        </member>
        <member name="M:UnitsNet.ElectricConductance.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.ElectricConductance.TryParse(System.String,UnitsNet.ElectricConductance@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ElectricConductance.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ElectricConductance.ParseInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.ElectricConductance.TryParseInternal(System.String,System.IFormatProvider,UnitsNet.ElectricConductance@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ElectricConductance.ParseUnitInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ElectricConductance.TryParseUnitInternal(System.String,System.IFormatProvider,UnitsNet.Units.ElectricConductanceUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ElectricConductance.ToString">
            <summary>
                Get default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.ElectricConductance.ToString(UnitsNet.Units.ElectricConductanceUnit)">
            <summary>
                Get string representation of value and unit. Using current UI culture and two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <returns>String representation.</returns>
        </member>
        <member name="P:UnitsNet.ElectricConductance.MaxValue">
            <summary>
            Represents the largest possible value of ElectricConductance
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricConductance.MinValue">
            <summary>
            Represents the smallest possible value of ElectricConductance
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricConductance.Type">
            <summary>
                The <see cref="P:UnitsNet.ElectricConductance.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricConductance.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.ElectricConductance.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="T:UnitsNet.ElectricConductivity">
            <summary>
                Electrical conductivity or specific conductance is the reciprocal of electrical resistivity, and measures a material's ability to conduct an electric current.
            </summary>
            <summary>
                Electrical conductivity or specific conductance is the reciprocal of electrical resistivity, and measures a material's ability to conduct an electric current.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricConductivity.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.ElectricConductivity.GetAbbreviation(UnitsNet.Units.ElectricConductivityUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.ElectricConductivity.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.ElectricConductivity.TryParse(System.String,System.IFormatProvider,UnitsNet.ElectricConductivity@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ElectricConductivity.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ElectricConductivity.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.ElectricConductivityUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ElectricConductivity.ToString(UnitsNet.Units.ElectricConductivityUnit,System.IFormatProvider)">
            <summary>
                Get string representation of value and unit. Using two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.ElectricConductivity.ToString(UnitsNet.Units.ElectricConductivityUnit,System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.ElectricConductivity.ToString(UnitsNet.Units.ElectricConductivityUnit,System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">Unit representation to use.</param>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
        </member>
        <member name="F:UnitsNet.ElectricConductivity._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.ElectricConductivity._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricConductivity.Unit">
            <summary>
                The unit this quantity was constructed with -or- <see cref="P:UnitsNet.ElectricConductivity.BaseUnit" /> if default ctor was used.
            </summary>
        </member>
        <member name="M:UnitsNet.ElectricConductivity.#ctor(System.Double,UnitsNet.Units.ElectricConductivityUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="numericValue">The numeric value  to contruct this quantity with.</param>
            <param name="unit">The unit representation to contruct this quantity with.</param>
            <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="P:UnitsNet.ElectricConductivity.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.ElectricConductivity.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricConductivity.BaseUnit">
            <summary>
                The base unit of ElectricConductivity, which is SiemensPerMeter. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricConductivity.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.ElectricConductivity.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricConductivity.Units">
            <summary>
                All units of measurement for the ElectricConductivity quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricConductivity.SiemensPerMeter">
            <summary>
                Get ElectricConductivity in SiemensPerMeter.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricConductivity.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit SiemensPerMeter.
            </summary>
        </member>
        <member name="M:UnitsNet.ElectricConductivity.FromSiemensPerMeter(UnitsNet.QuantityValue)">
            <summary>
                Get ElectricConductivity from SiemensPerMeter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricConductivity.From(UnitsNet.QuantityValue,UnitsNet.Units.ElectricConductivityUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.ElectricConductivityUnit" /> to <see cref="T:UnitsNet.ElectricConductivity" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>ElectricConductivity unit value.</returns>
        </member>
        <member name="M:UnitsNet.ElectricConductivity.GetAbbreviation(UnitsNet.Units.ElectricConductivityUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.ElectricConductivity.Equals(UnitsNet.ElectricConductivity,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another ElectricConductivity within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.ElectricConductivity.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current ElectricConductivity.</returns>
        </member>
        <member name="M:UnitsNet.ElectricConductivity.As(UnitsNet.Units.ElectricConductivityUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ElectricConductivity.ToUnit(UnitsNet.Units.ElectricConductivityUnit)">
            <summary>
                Converts this ElectricConductivity to another ElectricConductivity with the unit representation <paramref name="unit" />.
            </summary>
            <returns>A ElectricConductivity with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ElectricConductivity.AsBaseUnit">
            <summary>
                Converts the current value + unit to the base unit.
                This is typically the first step in converting from one unit to another.
            </summary>
            <returns>The value in the base unit representation.</returns>
        </member>
        <member name="M:UnitsNet.ElectricConductivity.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.ElectricConductivity.TryParse(System.String,UnitsNet.ElectricConductivity@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ElectricConductivity.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ElectricConductivity.ParseInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.ElectricConductivity.TryParseInternal(System.String,System.IFormatProvider,UnitsNet.ElectricConductivity@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ElectricConductivity.ParseUnitInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ElectricConductivity.TryParseUnitInternal(System.String,System.IFormatProvider,UnitsNet.Units.ElectricConductivityUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ElectricConductivity.ToString">
            <summary>
                Get default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.ElectricConductivity.ToString(UnitsNet.Units.ElectricConductivityUnit)">
            <summary>
                Get string representation of value and unit. Using current UI culture and two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <returns>String representation.</returns>
        </member>
        <member name="P:UnitsNet.ElectricConductivity.MaxValue">
            <summary>
            Represents the largest possible value of ElectricConductivity
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricConductivity.MinValue">
            <summary>
            Represents the smallest possible value of ElectricConductivity
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricConductivity.Type">
            <summary>
                The <see cref="P:UnitsNet.ElectricConductivity.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricConductivity.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.ElectricConductivity.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="T:UnitsNet.ElectricCurrent">
            <summary>
                An electric current is a flow of electric charge. In electric circuits this charge is often carried by moving electrons in a wire. It can also be carried by ions in an electrolyte, or by both ions and electrons such as in a plasma.
            </summary>
            <summary>
                An electric current is a flow of electric charge. In electric circuits this charge is often carried by moving electrons in a wire. It can also be carried by ions in an electrolyte, or by both ions and electrons such as in a plasma.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCurrent.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.ElectricCurrent.GetAbbreviation(UnitsNet.Units.ElectricCurrentUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.ElectricCurrent.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.ElectricCurrent.TryParse(System.String,System.IFormatProvider,UnitsNet.ElectricCurrent@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ElectricCurrent.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ElectricCurrent.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.ElectricCurrentUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ElectricCurrent.ToString(UnitsNet.Units.ElectricCurrentUnit,System.IFormatProvider)">
            <summary>
                Get string representation of value and unit. Using two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.ElectricCurrent.ToString(UnitsNet.Units.ElectricCurrentUnit,System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.ElectricCurrent.ToString(UnitsNet.Units.ElectricCurrentUnit,System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">Unit representation to use.</param>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
        </member>
        <member name="F:UnitsNet.ElectricCurrent._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.ElectricCurrent._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCurrent.Unit">
            <summary>
                The unit this quantity was constructed with -or- <see cref="P:UnitsNet.ElectricCurrent.BaseUnit" /> if default ctor was used.
            </summary>
        </member>
        <member name="M:UnitsNet.ElectricCurrent.#ctor(System.Double,UnitsNet.Units.ElectricCurrentUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="numericValue">The numeric value  to contruct this quantity with.</param>
            <param name="unit">The unit representation to contruct this quantity with.</param>
            <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="P:UnitsNet.ElectricCurrent.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.ElectricCurrent.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCurrent.BaseUnit">
            <summary>
                The base unit of ElectricCurrent, which is Ampere. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCurrent.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.ElectricCurrent.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCurrent.Units">
            <summary>
                All units of measurement for the ElectricCurrent quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCurrent.Amperes">
            <summary>
                Get ElectricCurrent in Amperes.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCurrent.Centiamperes">
            <summary>
                Get ElectricCurrent in Centiamperes.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCurrent.Kiloamperes">
            <summary>
                Get ElectricCurrent in Kiloamperes.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCurrent.Megaamperes">
            <summary>
                Get ElectricCurrent in Megaamperes.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCurrent.Microamperes">
            <summary>
                Get ElectricCurrent in Microamperes.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCurrent.Milliamperes">
            <summary>
                Get ElectricCurrent in Milliamperes.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCurrent.Nanoamperes">
            <summary>
                Get ElectricCurrent in Nanoamperes.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCurrent.Picoamperes">
            <summary>
                Get ElectricCurrent in Picoamperes.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCurrent.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit Ampere.
            </summary>
        </member>
        <member name="M:UnitsNet.ElectricCurrent.FromAmperes(UnitsNet.QuantityValue)">
            <summary>
                Get ElectricCurrent from Amperes.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricCurrent.FromCentiamperes(UnitsNet.QuantityValue)">
            <summary>
                Get ElectricCurrent from Centiamperes.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricCurrent.FromKiloamperes(UnitsNet.QuantityValue)">
            <summary>
                Get ElectricCurrent from Kiloamperes.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricCurrent.FromMegaamperes(UnitsNet.QuantityValue)">
            <summary>
                Get ElectricCurrent from Megaamperes.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricCurrent.FromMicroamperes(UnitsNet.QuantityValue)">
            <summary>
                Get ElectricCurrent from Microamperes.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricCurrent.FromMilliamperes(UnitsNet.QuantityValue)">
            <summary>
                Get ElectricCurrent from Milliamperes.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricCurrent.FromNanoamperes(UnitsNet.QuantityValue)">
            <summary>
                Get ElectricCurrent from Nanoamperes.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricCurrent.FromPicoamperes(UnitsNet.QuantityValue)">
            <summary>
                Get ElectricCurrent from Picoamperes.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricCurrent.From(UnitsNet.QuantityValue,UnitsNet.Units.ElectricCurrentUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.ElectricCurrentUnit" /> to <see cref="T:UnitsNet.ElectricCurrent" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>ElectricCurrent unit value.</returns>
        </member>
        <member name="M:UnitsNet.ElectricCurrent.GetAbbreviation(UnitsNet.Units.ElectricCurrentUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.ElectricCurrent.Equals(UnitsNet.ElectricCurrent,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another ElectricCurrent within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.ElectricCurrent.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current ElectricCurrent.</returns>
        </member>
        <member name="M:UnitsNet.ElectricCurrent.As(UnitsNet.Units.ElectricCurrentUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ElectricCurrent.ToUnit(UnitsNet.Units.ElectricCurrentUnit)">
            <summary>
                Converts this ElectricCurrent to another ElectricCurrent with the unit representation <paramref name="unit" />.
            </summary>
            <returns>A ElectricCurrent with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ElectricCurrent.AsBaseUnit">
            <summary>
                Converts the current value + unit to the base unit.
                This is typically the first step in converting from one unit to another.
            </summary>
            <returns>The value in the base unit representation.</returns>
        </member>
        <member name="M:UnitsNet.ElectricCurrent.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.ElectricCurrent.TryParse(System.String,UnitsNet.ElectricCurrent@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ElectricCurrent.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ElectricCurrent.ParseInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.ElectricCurrent.TryParseInternal(System.String,System.IFormatProvider,UnitsNet.ElectricCurrent@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ElectricCurrent.ParseUnitInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ElectricCurrent.TryParseUnitInternal(System.String,System.IFormatProvider,UnitsNet.Units.ElectricCurrentUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ElectricCurrent.ToString">
            <summary>
                Get default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.ElectricCurrent.ToString(UnitsNet.Units.ElectricCurrentUnit)">
            <summary>
                Get string representation of value and unit. Using current UI culture and two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <returns>String representation.</returns>
        </member>
        <member name="P:UnitsNet.ElectricCurrent.MaxValue">
            <summary>
            Represents the largest possible value of ElectricCurrent
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCurrent.MinValue">
            <summary>
            Represents the smallest possible value of ElectricCurrent
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCurrent.Type">
            <summary>
                The <see cref="P:UnitsNet.ElectricCurrent.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCurrent.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.ElectricCurrent.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="T:UnitsNet.ElectricCurrentDensity">
            <summary>
                In electromagnetism, current density is the electric current per unit area of cross section.
            </summary>
            <summary>
                In electromagnetism, current density is the electric current per unit area of cross section.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCurrentDensity.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.ElectricCurrentDensity.GetAbbreviation(UnitsNet.Units.ElectricCurrentDensityUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.ElectricCurrentDensity.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.ElectricCurrentDensity.TryParse(System.String,System.IFormatProvider,UnitsNet.ElectricCurrentDensity@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ElectricCurrentDensity.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ElectricCurrentDensity.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.ElectricCurrentDensityUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ElectricCurrentDensity.ToString(UnitsNet.Units.ElectricCurrentDensityUnit,System.IFormatProvider)">
            <summary>
                Get string representation of value and unit. Using two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.ElectricCurrentDensity.ToString(UnitsNet.Units.ElectricCurrentDensityUnit,System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.ElectricCurrentDensity.ToString(UnitsNet.Units.ElectricCurrentDensityUnit,System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">Unit representation to use.</param>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
        </member>
        <member name="F:UnitsNet.ElectricCurrentDensity._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.ElectricCurrentDensity._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCurrentDensity.Unit">
            <summary>
                The unit this quantity was constructed with -or- <see cref="P:UnitsNet.ElectricCurrentDensity.BaseUnit" /> if default ctor was used.
            </summary>
        </member>
        <member name="M:UnitsNet.ElectricCurrentDensity.#ctor(System.Double,UnitsNet.Units.ElectricCurrentDensityUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="numericValue">The numeric value  to contruct this quantity with.</param>
            <param name="unit">The unit representation to contruct this quantity with.</param>
            <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="P:UnitsNet.ElectricCurrentDensity.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.ElectricCurrentDensity.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCurrentDensity.BaseUnit">
            <summary>
                The base unit of ElectricCurrentDensity, which is AmperePerSquareMeter. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCurrentDensity.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.ElectricCurrentDensity.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCurrentDensity.Units">
            <summary>
                All units of measurement for the ElectricCurrentDensity quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCurrentDensity.AmperesPerSquareMeter">
            <summary>
                Get ElectricCurrentDensity in AmperesPerSquareMeter.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCurrentDensity.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit AmperePerSquareMeter.
            </summary>
        </member>
        <member name="M:UnitsNet.ElectricCurrentDensity.FromAmperesPerSquareMeter(UnitsNet.QuantityValue)">
            <summary>
                Get ElectricCurrentDensity from AmperesPerSquareMeter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricCurrentDensity.From(UnitsNet.QuantityValue,UnitsNet.Units.ElectricCurrentDensityUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.ElectricCurrentDensityUnit" /> to <see cref="T:UnitsNet.ElectricCurrentDensity" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>ElectricCurrentDensity unit value.</returns>
        </member>
        <member name="M:UnitsNet.ElectricCurrentDensity.GetAbbreviation(UnitsNet.Units.ElectricCurrentDensityUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.ElectricCurrentDensity.Equals(UnitsNet.ElectricCurrentDensity,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another ElectricCurrentDensity within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.ElectricCurrentDensity.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current ElectricCurrentDensity.</returns>
        </member>
        <member name="M:UnitsNet.ElectricCurrentDensity.As(UnitsNet.Units.ElectricCurrentDensityUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ElectricCurrentDensity.ToUnit(UnitsNet.Units.ElectricCurrentDensityUnit)">
            <summary>
                Converts this ElectricCurrentDensity to another ElectricCurrentDensity with the unit representation <paramref name="unit" />.
            </summary>
            <returns>A ElectricCurrentDensity with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ElectricCurrentDensity.AsBaseUnit">
            <summary>
                Converts the current value + unit to the base unit.
                This is typically the first step in converting from one unit to another.
            </summary>
            <returns>The value in the base unit representation.</returns>
        </member>
        <member name="M:UnitsNet.ElectricCurrentDensity.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.ElectricCurrentDensity.TryParse(System.String,UnitsNet.ElectricCurrentDensity@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ElectricCurrentDensity.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ElectricCurrentDensity.ParseInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.ElectricCurrentDensity.TryParseInternal(System.String,System.IFormatProvider,UnitsNet.ElectricCurrentDensity@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ElectricCurrentDensity.ParseUnitInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ElectricCurrentDensity.TryParseUnitInternal(System.String,System.IFormatProvider,UnitsNet.Units.ElectricCurrentDensityUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ElectricCurrentDensity.ToString">
            <summary>
                Get default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.ElectricCurrentDensity.ToString(UnitsNet.Units.ElectricCurrentDensityUnit)">
            <summary>
                Get string representation of value and unit. Using current UI culture and two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <returns>String representation.</returns>
        </member>
        <member name="P:UnitsNet.ElectricCurrentDensity.MaxValue">
            <summary>
            Represents the largest possible value of ElectricCurrentDensity
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCurrentDensity.MinValue">
            <summary>
            Represents the smallest possible value of ElectricCurrentDensity
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCurrentDensity.Type">
            <summary>
                The <see cref="P:UnitsNet.ElectricCurrentDensity.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCurrentDensity.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.ElectricCurrentDensity.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="T:UnitsNet.ElectricCurrentGradient">
            <summary>
                In electromagnetism, the current gradient describes how the current changes in time.
            </summary>
            <summary>
                In electromagnetism, the current gradient describes how the current changes in time.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCurrentGradient.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.ElectricCurrentGradient.GetAbbreviation(UnitsNet.Units.ElectricCurrentGradientUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.ElectricCurrentGradient.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.ElectricCurrentGradient.TryParse(System.String,System.IFormatProvider,UnitsNet.ElectricCurrentGradient@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ElectricCurrentGradient.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ElectricCurrentGradient.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.ElectricCurrentGradientUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ElectricCurrentGradient.ToString(UnitsNet.Units.ElectricCurrentGradientUnit,System.IFormatProvider)">
            <summary>
                Get string representation of value and unit. Using two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.ElectricCurrentGradient.ToString(UnitsNet.Units.ElectricCurrentGradientUnit,System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.ElectricCurrentGradient.ToString(UnitsNet.Units.ElectricCurrentGradientUnit,System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">Unit representation to use.</param>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
        </member>
        <member name="F:UnitsNet.ElectricCurrentGradient._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.ElectricCurrentGradient._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCurrentGradient.Unit">
            <summary>
                The unit this quantity was constructed with -or- <see cref="P:UnitsNet.ElectricCurrentGradient.BaseUnit" /> if default ctor was used.
            </summary>
        </member>
        <member name="M:UnitsNet.ElectricCurrentGradient.#ctor(System.Double,UnitsNet.Units.ElectricCurrentGradientUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="numericValue">The numeric value  to contruct this quantity with.</param>
            <param name="unit">The unit representation to contruct this quantity with.</param>
            <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="P:UnitsNet.ElectricCurrentGradient.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.ElectricCurrentGradient.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCurrentGradient.BaseUnit">
            <summary>
                The base unit of ElectricCurrentGradient, which is AmperePerSecond. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCurrentGradient.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.ElectricCurrentGradient.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCurrentGradient.Units">
            <summary>
                All units of measurement for the ElectricCurrentGradient quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCurrentGradient.AmperesPerSecond">
            <summary>
                Get ElectricCurrentGradient in AmperesPerSecond.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCurrentGradient.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit AmperePerSecond.
            </summary>
        </member>
        <member name="M:UnitsNet.ElectricCurrentGradient.FromAmperesPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Get ElectricCurrentGradient from AmperesPerSecond.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricCurrentGradient.From(UnitsNet.QuantityValue,UnitsNet.Units.ElectricCurrentGradientUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.ElectricCurrentGradientUnit" /> to <see cref="T:UnitsNet.ElectricCurrentGradient" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>ElectricCurrentGradient unit value.</returns>
        </member>
        <member name="M:UnitsNet.ElectricCurrentGradient.GetAbbreviation(UnitsNet.Units.ElectricCurrentGradientUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.ElectricCurrentGradient.Equals(UnitsNet.ElectricCurrentGradient,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another ElectricCurrentGradient within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.ElectricCurrentGradient.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current ElectricCurrentGradient.</returns>
        </member>
        <member name="M:UnitsNet.ElectricCurrentGradient.As(UnitsNet.Units.ElectricCurrentGradientUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ElectricCurrentGradient.ToUnit(UnitsNet.Units.ElectricCurrentGradientUnit)">
            <summary>
                Converts this ElectricCurrentGradient to another ElectricCurrentGradient with the unit representation <paramref name="unit" />.
            </summary>
            <returns>A ElectricCurrentGradient with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ElectricCurrentGradient.AsBaseUnit">
            <summary>
                Converts the current value + unit to the base unit.
                This is typically the first step in converting from one unit to another.
            </summary>
            <returns>The value in the base unit representation.</returns>
        </member>
        <member name="M:UnitsNet.ElectricCurrentGradient.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.ElectricCurrentGradient.TryParse(System.String,UnitsNet.ElectricCurrentGradient@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ElectricCurrentGradient.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ElectricCurrentGradient.ParseInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.ElectricCurrentGradient.TryParseInternal(System.String,System.IFormatProvider,UnitsNet.ElectricCurrentGradient@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ElectricCurrentGradient.ParseUnitInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ElectricCurrentGradient.TryParseUnitInternal(System.String,System.IFormatProvider,UnitsNet.Units.ElectricCurrentGradientUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ElectricCurrentGradient.ToString">
            <summary>
                Get default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.ElectricCurrentGradient.ToString(UnitsNet.Units.ElectricCurrentGradientUnit)">
            <summary>
                Get string representation of value and unit. Using current UI culture and two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <returns>String representation.</returns>
        </member>
        <member name="P:UnitsNet.ElectricCurrentGradient.MaxValue">
            <summary>
            Represents the largest possible value of ElectricCurrentGradient
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCurrentGradient.MinValue">
            <summary>
            Represents the smallest possible value of ElectricCurrentGradient
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCurrentGradient.Type">
            <summary>
                The <see cref="P:UnitsNet.ElectricCurrentGradient.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricCurrentGradient.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.ElectricCurrentGradient.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="T:UnitsNet.ElectricField">
            <summary>
                An electric field is a force field that surrounds electric charges that attracts or repels other electric charges.
            </summary>
            <summary>
                An electric field is a force field that surrounds electric charges that attracts or repels other electric charges.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricField.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.ElectricField.GetAbbreviation(UnitsNet.Units.ElectricFieldUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.ElectricField.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.ElectricField.TryParse(System.String,System.IFormatProvider,UnitsNet.ElectricField@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ElectricField.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ElectricField.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.ElectricFieldUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ElectricField.ToString(UnitsNet.Units.ElectricFieldUnit,System.IFormatProvider)">
            <summary>
                Get string representation of value and unit. Using two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.ElectricField.ToString(UnitsNet.Units.ElectricFieldUnit,System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.ElectricField.ToString(UnitsNet.Units.ElectricFieldUnit,System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">Unit representation to use.</param>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
        </member>
        <member name="F:UnitsNet.ElectricField._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.ElectricField._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricField.Unit">
            <summary>
                The unit this quantity was constructed with -or- <see cref="P:UnitsNet.ElectricField.BaseUnit" /> if default ctor was used.
            </summary>
        </member>
        <member name="M:UnitsNet.ElectricField.#ctor(System.Double,UnitsNet.Units.ElectricFieldUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="numericValue">The numeric value  to contruct this quantity with.</param>
            <param name="unit">The unit representation to contruct this quantity with.</param>
            <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="P:UnitsNet.ElectricField.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.ElectricField.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricField.BaseUnit">
            <summary>
                The base unit of ElectricField, which is VoltPerMeter. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricField.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.ElectricField.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricField.Units">
            <summary>
                All units of measurement for the ElectricField quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricField.VoltsPerMeter">
            <summary>
                Get ElectricField in VoltsPerMeter.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricField.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit VoltPerMeter.
            </summary>
        </member>
        <member name="M:UnitsNet.ElectricField.FromVoltsPerMeter(UnitsNet.QuantityValue)">
            <summary>
                Get ElectricField from VoltsPerMeter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricField.From(UnitsNet.QuantityValue,UnitsNet.Units.ElectricFieldUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.ElectricFieldUnit" /> to <see cref="T:UnitsNet.ElectricField" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>ElectricField unit value.</returns>
        </member>
        <member name="M:UnitsNet.ElectricField.GetAbbreviation(UnitsNet.Units.ElectricFieldUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.ElectricField.Equals(UnitsNet.ElectricField,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another ElectricField within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.ElectricField.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current ElectricField.</returns>
        </member>
        <member name="M:UnitsNet.ElectricField.As(UnitsNet.Units.ElectricFieldUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ElectricField.ToUnit(UnitsNet.Units.ElectricFieldUnit)">
            <summary>
                Converts this ElectricField to another ElectricField with the unit representation <paramref name="unit" />.
            </summary>
            <returns>A ElectricField with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ElectricField.AsBaseUnit">
            <summary>
                Converts the current value + unit to the base unit.
                This is typically the first step in converting from one unit to another.
            </summary>
            <returns>The value in the base unit representation.</returns>
        </member>
        <member name="M:UnitsNet.ElectricField.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.ElectricField.TryParse(System.String,UnitsNet.ElectricField@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ElectricField.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ElectricField.ParseInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.ElectricField.TryParseInternal(System.String,System.IFormatProvider,UnitsNet.ElectricField@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ElectricField.ParseUnitInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ElectricField.TryParseUnitInternal(System.String,System.IFormatProvider,UnitsNet.Units.ElectricFieldUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ElectricField.ToString">
            <summary>
                Get default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.ElectricField.ToString(UnitsNet.Units.ElectricFieldUnit)">
            <summary>
                Get string representation of value and unit. Using current UI culture and two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <returns>String representation.</returns>
        </member>
        <member name="P:UnitsNet.ElectricField.MaxValue">
            <summary>
            Represents the largest possible value of ElectricField
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricField.MinValue">
            <summary>
            Represents the smallest possible value of ElectricField
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricField.Type">
            <summary>
                The <see cref="P:UnitsNet.ElectricField.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricField.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.ElectricField.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="T:UnitsNet.ElectricInductance">
            <summary>
                Inductance is a property of an electrical conductor which opposes a change in current.
            </summary>
            <summary>
                Inductance is a property of an electrical conductor which opposes a change in current.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricInductance.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.ElectricInductance.GetAbbreviation(UnitsNet.Units.ElectricInductanceUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.ElectricInductance.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.ElectricInductance.TryParse(System.String,System.IFormatProvider,UnitsNet.ElectricInductance@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ElectricInductance.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ElectricInductance.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.ElectricInductanceUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ElectricInductance.ToString(UnitsNet.Units.ElectricInductanceUnit,System.IFormatProvider)">
            <summary>
                Get string representation of value and unit. Using two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.ElectricInductance.ToString(UnitsNet.Units.ElectricInductanceUnit,System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.ElectricInductance.ToString(UnitsNet.Units.ElectricInductanceUnit,System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">Unit representation to use.</param>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
        </member>
        <member name="F:UnitsNet.ElectricInductance._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.ElectricInductance._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricInductance.Unit">
            <summary>
                The unit this quantity was constructed with -or- <see cref="P:UnitsNet.ElectricInductance.BaseUnit" /> if default ctor was used.
            </summary>
        </member>
        <member name="M:UnitsNet.ElectricInductance.#ctor(System.Double,UnitsNet.Units.ElectricInductanceUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="numericValue">The numeric value  to contruct this quantity with.</param>
            <param name="unit">The unit representation to contruct this quantity with.</param>
            <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="P:UnitsNet.ElectricInductance.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.ElectricInductance.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricInductance.BaseUnit">
            <summary>
                The base unit of ElectricInductance, which is Henry. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricInductance.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.ElectricInductance.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricInductance.Units">
            <summary>
                All units of measurement for the ElectricInductance quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricInductance.Henries">
            <summary>
                Get ElectricInductance in Henries.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricInductance.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit Henry.
            </summary>
        </member>
        <member name="M:UnitsNet.ElectricInductance.FromHenries(UnitsNet.QuantityValue)">
            <summary>
                Get ElectricInductance from Henries.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricInductance.From(UnitsNet.QuantityValue,UnitsNet.Units.ElectricInductanceUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.ElectricInductanceUnit" /> to <see cref="T:UnitsNet.ElectricInductance" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>ElectricInductance unit value.</returns>
        </member>
        <member name="M:UnitsNet.ElectricInductance.GetAbbreviation(UnitsNet.Units.ElectricInductanceUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.ElectricInductance.Equals(UnitsNet.ElectricInductance,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another ElectricInductance within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.ElectricInductance.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current ElectricInductance.</returns>
        </member>
        <member name="M:UnitsNet.ElectricInductance.As(UnitsNet.Units.ElectricInductanceUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ElectricInductance.ToUnit(UnitsNet.Units.ElectricInductanceUnit)">
            <summary>
                Converts this ElectricInductance to another ElectricInductance with the unit representation <paramref name="unit" />.
            </summary>
            <returns>A ElectricInductance with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ElectricInductance.AsBaseUnit">
            <summary>
                Converts the current value + unit to the base unit.
                This is typically the first step in converting from one unit to another.
            </summary>
            <returns>The value in the base unit representation.</returns>
        </member>
        <member name="M:UnitsNet.ElectricInductance.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.ElectricInductance.TryParse(System.String,UnitsNet.ElectricInductance@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ElectricInductance.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ElectricInductance.ParseInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.ElectricInductance.TryParseInternal(System.String,System.IFormatProvider,UnitsNet.ElectricInductance@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ElectricInductance.ParseUnitInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ElectricInductance.TryParseUnitInternal(System.String,System.IFormatProvider,UnitsNet.Units.ElectricInductanceUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ElectricInductance.ToString">
            <summary>
                Get default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.ElectricInductance.ToString(UnitsNet.Units.ElectricInductanceUnit)">
            <summary>
                Get string representation of value and unit. Using current UI culture and two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <returns>String representation.</returns>
        </member>
        <member name="P:UnitsNet.ElectricInductance.MaxValue">
            <summary>
            Represents the largest possible value of ElectricInductance
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricInductance.MinValue">
            <summary>
            Represents the smallest possible value of ElectricInductance
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricInductance.Type">
            <summary>
                The <see cref="P:UnitsNet.ElectricInductance.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricInductance.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.ElectricInductance.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="T:UnitsNet.ElectricPotentialAc">
            <summary>
                The Electric Potential of a system known to use Alternating Current.
            </summary>
            <summary>
                The Electric Potential of a system known to use Alternating Current.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotentialAc.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.ElectricPotentialAc.GetAbbreviation(UnitsNet.Units.ElectricPotentialAcUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.ElectricPotentialAc.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.ElectricPotentialAc.TryParse(System.String,System.IFormatProvider,UnitsNet.ElectricPotentialAc@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ElectricPotentialAc.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ElectricPotentialAc.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.ElectricPotentialAcUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ElectricPotentialAc.ToString(UnitsNet.Units.ElectricPotentialAcUnit,System.IFormatProvider)">
            <summary>
                Get string representation of value and unit. Using two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.ElectricPotentialAc.ToString(UnitsNet.Units.ElectricPotentialAcUnit,System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.ElectricPotentialAc.ToString(UnitsNet.Units.ElectricPotentialAcUnit,System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">Unit representation to use.</param>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
        </member>
        <member name="F:UnitsNet.ElectricPotentialAc._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.ElectricPotentialAc._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotentialAc.Unit">
            <summary>
                The unit this quantity was constructed with -or- <see cref="P:UnitsNet.ElectricPotentialAc.BaseUnit" /> if default ctor was used.
            </summary>
        </member>
        <member name="M:UnitsNet.ElectricPotentialAc.#ctor(System.Double,UnitsNet.Units.ElectricPotentialAcUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="numericValue">The numeric value  to contruct this quantity with.</param>
            <param name="unit">The unit representation to contruct this quantity with.</param>
            <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="P:UnitsNet.ElectricPotentialAc.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.ElectricPotentialAc.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotentialAc.BaseUnit">
            <summary>
                The base unit of ElectricPotentialAc, which is VoltAc. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotentialAc.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.ElectricPotentialAc.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotentialAc.Units">
            <summary>
                All units of measurement for the ElectricPotentialAc quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotentialAc.KilovoltsAc">
            <summary>
                Get ElectricPotentialAc in KilovoltsAc.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotentialAc.MegavoltsAc">
            <summary>
                Get ElectricPotentialAc in MegavoltsAc.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotentialAc.MicrovoltsAc">
            <summary>
                Get ElectricPotentialAc in MicrovoltsAc.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotentialAc.MillivoltsAc">
            <summary>
                Get ElectricPotentialAc in MillivoltsAc.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotentialAc.VoltsAc">
            <summary>
                Get ElectricPotentialAc in VoltsAc.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotentialAc.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit VoltAc.
            </summary>
        </member>
        <member name="M:UnitsNet.ElectricPotentialAc.FromKilovoltsAc(UnitsNet.QuantityValue)">
            <summary>
                Get ElectricPotentialAc from KilovoltsAc.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricPotentialAc.FromMegavoltsAc(UnitsNet.QuantityValue)">
            <summary>
                Get ElectricPotentialAc from MegavoltsAc.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricPotentialAc.FromMicrovoltsAc(UnitsNet.QuantityValue)">
            <summary>
                Get ElectricPotentialAc from MicrovoltsAc.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricPotentialAc.FromMillivoltsAc(UnitsNet.QuantityValue)">
            <summary>
                Get ElectricPotentialAc from MillivoltsAc.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricPotentialAc.FromVoltsAc(UnitsNet.QuantityValue)">
            <summary>
                Get ElectricPotentialAc from VoltsAc.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricPotentialAc.From(UnitsNet.QuantityValue,UnitsNet.Units.ElectricPotentialAcUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.ElectricPotentialAcUnit" /> to <see cref="T:UnitsNet.ElectricPotentialAc" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>ElectricPotentialAc unit value.</returns>
        </member>
        <member name="M:UnitsNet.ElectricPotentialAc.GetAbbreviation(UnitsNet.Units.ElectricPotentialAcUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.ElectricPotentialAc.Equals(UnitsNet.ElectricPotentialAc,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another ElectricPotentialAc within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.ElectricPotentialAc.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current ElectricPotentialAc.</returns>
        </member>
        <member name="M:UnitsNet.ElectricPotentialAc.As(UnitsNet.Units.ElectricPotentialAcUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ElectricPotentialAc.ToUnit(UnitsNet.Units.ElectricPotentialAcUnit)">
            <summary>
                Converts this ElectricPotentialAc to another ElectricPotentialAc with the unit representation <paramref name="unit" />.
            </summary>
            <returns>A ElectricPotentialAc with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ElectricPotentialAc.AsBaseUnit">
            <summary>
                Converts the current value + unit to the base unit.
                This is typically the first step in converting from one unit to another.
            </summary>
            <returns>The value in the base unit representation.</returns>
        </member>
        <member name="M:UnitsNet.ElectricPotentialAc.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.ElectricPotentialAc.TryParse(System.String,UnitsNet.ElectricPotentialAc@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ElectricPotentialAc.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ElectricPotentialAc.ParseInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.ElectricPotentialAc.TryParseInternal(System.String,System.IFormatProvider,UnitsNet.ElectricPotentialAc@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ElectricPotentialAc.ParseUnitInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ElectricPotentialAc.TryParseUnitInternal(System.String,System.IFormatProvider,UnitsNet.Units.ElectricPotentialAcUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ElectricPotentialAc.ToString">
            <summary>
                Get default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.ElectricPotentialAc.ToString(UnitsNet.Units.ElectricPotentialAcUnit)">
            <summary>
                Get string representation of value and unit. Using current UI culture and two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <returns>String representation.</returns>
        </member>
        <member name="P:UnitsNet.ElectricPotentialAc.MaxValue">
            <summary>
            Represents the largest possible value of ElectricPotentialAc
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotentialAc.MinValue">
            <summary>
            Represents the smallest possible value of ElectricPotentialAc
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotentialAc.Type">
            <summary>
                The <see cref="P:UnitsNet.ElectricPotentialAc.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotentialAc.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.ElectricPotentialAc.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="T:UnitsNet.ElectricPotentialDc">
            <summary>
                The Electric Potential of a system known to use Direct Current.
            </summary>
            <summary>
                The Electric Potential of a system known to use Direct Current.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotentialDc.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.ElectricPotentialDc.GetAbbreviation(UnitsNet.Units.ElectricPotentialDcUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.ElectricPotentialDc.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.ElectricPotentialDc.TryParse(System.String,System.IFormatProvider,UnitsNet.ElectricPotentialDc@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ElectricPotentialDc.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ElectricPotentialDc.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.ElectricPotentialDcUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ElectricPotentialDc.ToString(UnitsNet.Units.ElectricPotentialDcUnit,System.IFormatProvider)">
            <summary>
                Get string representation of value and unit. Using two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.ElectricPotentialDc.ToString(UnitsNet.Units.ElectricPotentialDcUnit,System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.ElectricPotentialDc.ToString(UnitsNet.Units.ElectricPotentialDcUnit,System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">Unit representation to use.</param>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
        </member>
        <member name="F:UnitsNet.ElectricPotentialDc._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.ElectricPotentialDc._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotentialDc.Unit">
            <summary>
                The unit this quantity was constructed with -or- <see cref="P:UnitsNet.ElectricPotentialDc.BaseUnit" /> if default ctor was used.
            </summary>
        </member>
        <member name="M:UnitsNet.ElectricPotentialDc.#ctor(System.Double,UnitsNet.Units.ElectricPotentialDcUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="numericValue">The numeric value  to contruct this quantity with.</param>
            <param name="unit">The unit representation to contruct this quantity with.</param>
            <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="P:UnitsNet.ElectricPotentialDc.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.ElectricPotentialDc.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotentialDc.BaseUnit">
            <summary>
                The base unit of ElectricPotentialDc, which is VoltDc. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotentialDc.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.ElectricPotentialDc.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotentialDc.Units">
            <summary>
                All units of measurement for the ElectricPotentialDc quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotentialDc.KilovoltsDc">
            <summary>
                Get ElectricPotentialDc in KilovoltsDc.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotentialDc.MegavoltsDc">
            <summary>
                Get ElectricPotentialDc in MegavoltsDc.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotentialDc.MicrovoltsDc">
            <summary>
                Get ElectricPotentialDc in MicrovoltsDc.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotentialDc.MillivoltsDc">
            <summary>
                Get ElectricPotentialDc in MillivoltsDc.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotentialDc.VoltsDc">
            <summary>
                Get ElectricPotentialDc in VoltsDc.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotentialDc.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit VoltDc.
            </summary>
        </member>
        <member name="M:UnitsNet.ElectricPotentialDc.FromKilovoltsDc(UnitsNet.QuantityValue)">
            <summary>
                Get ElectricPotentialDc from KilovoltsDc.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricPotentialDc.FromMegavoltsDc(UnitsNet.QuantityValue)">
            <summary>
                Get ElectricPotentialDc from MegavoltsDc.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricPotentialDc.FromMicrovoltsDc(UnitsNet.QuantityValue)">
            <summary>
                Get ElectricPotentialDc from MicrovoltsDc.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricPotentialDc.FromMillivoltsDc(UnitsNet.QuantityValue)">
            <summary>
                Get ElectricPotentialDc from MillivoltsDc.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricPotentialDc.FromVoltsDc(UnitsNet.QuantityValue)">
            <summary>
                Get ElectricPotentialDc from VoltsDc.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricPotentialDc.From(UnitsNet.QuantityValue,UnitsNet.Units.ElectricPotentialDcUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.ElectricPotentialDcUnit" /> to <see cref="T:UnitsNet.ElectricPotentialDc" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>ElectricPotentialDc unit value.</returns>
        </member>
        <member name="M:UnitsNet.ElectricPotentialDc.GetAbbreviation(UnitsNet.Units.ElectricPotentialDcUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.ElectricPotentialDc.Equals(UnitsNet.ElectricPotentialDc,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another ElectricPotentialDc within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.ElectricPotentialDc.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current ElectricPotentialDc.</returns>
        </member>
        <member name="M:UnitsNet.ElectricPotentialDc.As(UnitsNet.Units.ElectricPotentialDcUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ElectricPotentialDc.ToUnit(UnitsNet.Units.ElectricPotentialDcUnit)">
            <summary>
                Converts this ElectricPotentialDc to another ElectricPotentialDc with the unit representation <paramref name="unit" />.
            </summary>
            <returns>A ElectricPotentialDc with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ElectricPotentialDc.AsBaseUnit">
            <summary>
                Converts the current value + unit to the base unit.
                This is typically the first step in converting from one unit to another.
            </summary>
            <returns>The value in the base unit representation.</returns>
        </member>
        <member name="M:UnitsNet.ElectricPotentialDc.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.ElectricPotentialDc.TryParse(System.String,UnitsNet.ElectricPotentialDc@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ElectricPotentialDc.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ElectricPotentialDc.ParseInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.ElectricPotentialDc.TryParseInternal(System.String,System.IFormatProvider,UnitsNet.ElectricPotentialDc@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ElectricPotentialDc.ParseUnitInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ElectricPotentialDc.TryParseUnitInternal(System.String,System.IFormatProvider,UnitsNet.Units.ElectricPotentialDcUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ElectricPotentialDc.ToString">
            <summary>
                Get default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.ElectricPotentialDc.ToString(UnitsNet.Units.ElectricPotentialDcUnit)">
            <summary>
                Get string representation of value and unit. Using current UI culture and two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <returns>String representation.</returns>
        </member>
        <member name="P:UnitsNet.ElectricPotentialDc.MaxValue">
            <summary>
            Represents the largest possible value of ElectricPotentialDc
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotentialDc.MinValue">
            <summary>
            Represents the smallest possible value of ElectricPotentialDc
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotentialDc.Type">
            <summary>
                The <see cref="P:UnitsNet.ElectricPotentialDc.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricPotentialDc.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.ElectricPotentialDc.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="T:UnitsNet.ElectricResistance">
            <summary>
                The electrical resistance of an electrical conductor is the opposition to the passage of an electric current through that conductor.
            </summary>
            <summary>
                The electrical resistance of an electrical conductor is the opposition to the passage of an electric current through that conductor.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricResistance.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.ElectricResistance.GetAbbreviation(UnitsNet.Units.ElectricResistanceUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.ElectricResistance.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.ElectricResistance.TryParse(System.String,System.IFormatProvider,UnitsNet.ElectricResistance@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ElectricResistance.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ElectricResistance.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.ElectricResistanceUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ElectricResistance.ToString(UnitsNet.Units.ElectricResistanceUnit,System.IFormatProvider)">
            <summary>
                Get string representation of value and unit. Using two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.ElectricResistance.ToString(UnitsNet.Units.ElectricResistanceUnit,System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.ElectricResistance.ToString(UnitsNet.Units.ElectricResistanceUnit,System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">Unit representation to use.</param>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
        </member>
        <member name="F:UnitsNet.ElectricResistance._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.ElectricResistance._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricResistance.Unit">
            <summary>
                The unit this quantity was constructed with -or- <see cref="P:UnitsNet.ElectricResistance.BaseUnit" /> if default ctor was used.
            </summary>
        </member>
        <member name="M:UnitsNet.ElectricResistance.#ctor(System.Double,UnitsNet.Units.ElectricResistanceUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="numericValue">The numeric value  to contruct this quantity with.</param>
            <param name="unit">The unit representation to contruct this quantity with.</param>
            <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="P:UnitsNet.ElectricResistance.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.ElectricResistance.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricResistance.BaseUnit">
            <summary>
                The base unit of ElectricResistance, which is Ohm. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricResistance.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.ElectricResistance.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricResistance.Units">
            <summary>
                All units of measurement for the ElectricResistance quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricResistance.Kiloohms">
            <summary>
                Get ElectricResistance in Kiloohms.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricResistance.Megaohms">
            <summary>
                Get ElectricResistance in Megaohms.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricResistance.Milliohms">
            <summary>
                Get ElectricResistance in Milliohms.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricResistance.Ohms">
            <summary>
                Get ElectricResistance in Ohms.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricResistance.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit Ohm.
            </summary>
        </member>
        <member name="M:UnitsNet.ElectricResistance.FromKiloohms(UnitsNet.QuantityValue)">
            <summary>
                Get ElectricResistance from Kiloohms.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricResistance.FromMegaohms(UnitsNet.QuantityValue)">
            <summary>
                Get ElectricResistance from Megaohms.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricResistance.FromMilliohms(UnitsNet.QuantityValue)">
            <summary>
                Get ElectricResistance from Milliohms.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricResistance.FromOhms(UnitsNet.QuantityValue)">
            <summary>
                Get ElectricResistance from Ohms.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricResistance.From(UnitsNet.QuantityValue,UnitsNet.Units.ElectricResistanceUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.ElectricResistanceUnit" /> to <see cref="T:UnitsNet.ElectricResistance" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>ElectricResistance unit value.</returns>
        </member>
        <member name="M:UnitsNet.ElectricResistance.GetAbbreviation(UnitsNet.Units.ElectricResistanceUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.ElectricResistance.Equals(UnitsNet.ElectricResistance,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another ElectricResistance within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.ElectricResistance.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current ElectricResistance.</returns>
        </member>
        <member name="M:UnitsNet.ElectricResistance.As(UnitsNet.Units.ElectricResistanceUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ElectricResistance.ToUnit(UnitsNet.Units.ElectricResistanceUnit)">
            <summary>
                Converts this ElectricResistance to another ElectricResistance with the unit representation <paramref name="unit" />.
            </summary>
            <returns>A ElectricResistance with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ElectricResistance.AsBaseUnit">
            <summary>
                Converts the current value + unit to the base unit.
                This is typically the first step in converting from one unit to another.
            </summary>
            <returns>The value in the base unit representation.</returns>
        </member>
        <member name="M:UnitsNet.ElectricResistance.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.ElectricResistance.TryParse(System.String,UnitsNet.ElectricResistance@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ElectricResistance.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ElectricResistance.ParseInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.ElectricResistance.TryParseInternal(System.String,System.IFormatProvider,UnitsNet.ElectricResistance@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ElectricResistance.ParseUnitInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ElectricResistance.TryParseUnitInternal(System.String,System.IFormatProvider,UnitsNet.Units.ElectricResistanceUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ElectricResistance.ToString">
            <summary>
                Get default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.ElectricResistance.ToString(UnitsNet.Units.ElectricResistanceUnit)">
            <summary>
                Get string representation of value and unit. Using current UI culture and two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <returns>String representation.</returns>
        </member>
        <member name="P:UnitsNet.ElectricResistance.MaxValue">
            <summary>
            Represents the largest possible value of ElectricResistance
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricResistance.MinValue">
            <summary>
            Represents the smallest possible value of ElectricResistance
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricResistance.Type">
            <summary>
                The <see cref="P:UnitsNet.ElectricResistance.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricResistance.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.ElectricResistance.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="T:UnitsNet.ElectricResistivity">
            <summary>
                Electrical resistivity (also known as resistivity, specific electrical resistance, or volume resistivity) is a fundamental property that quantifies how strongly a given material opposes the flow of electric current.
            </summary>
            <summary>
                Electrical resistivity (also known as resistivity, specific electrical resistance, or volume resistivity) is a fundamental property that quantifies how strongly a given material opposes the flow of electric current.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricResistivity.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.ElectricResistivity.GetAbbreviation(UnitsNet.Units.ElectricResistivityUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.ElectricResistivity.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.ElectricResistivity.TryParse(System.String,System.IFormatProvider,UnitsNet.ElectricResistivity@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ElectricResistivity.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ElectricResistivity.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.ElectricResistivityUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ElectricResistivity.ToString(UnitsNet.Units.ElectricResistivityUnit,System.IFormatProvider)">
            <summary>
                Get string representation of value and unit. Using two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.ElectricResistivity.ToString(UnitsNet.Units.ElectricResistivityUnit,System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.ElectricResistivity.ToString(UnitsNet.Units.ElectricResistivityUnit,System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">Unit representation to use.</param>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
        </member>
        <member name="F:UnitsNet.ElectricResistivity._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.ElectricResistivity._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricResistivity.Unit">
            <summary>
                The unit this quantity was constructed with -or- <see cref="P:UnitsNet.ElectricResistivity.BaseUnit" /> if default ctor was used.
            </summary>
        </member>
        <member name="M:UnitsNet.ElectricResistivity.#ctor(System.Double,UnitsNet.Units.ElectricResistivityUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="numericValue">The numeric value  to contruct this quantity with.</param>
            <param name="unit">The unit representation to contruct this quantity with.</param>
            <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="P:UnitsNet.ElectricResistivity.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.ElectricResistivity.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricResistivity.BaseUnit">
            <summary>
                The base unit of ElectricResistivity, which is OhmMeter. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricResistivity.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.ElectricResistivity.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricResistivity.Units">
            <summary>
                All units of measurement for the ElectricResistivity quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricResistivity.MicroohmMeters">
            <summary>
                Get ElectricResistivity in MicroohmMeters.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricResistivity.MilliohmMeters">
            <summary>
                Get ElectricResistivity in MilliohmMeters.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricResistivity.NanoohmMeters">
            <summary>
                Get ElectricResistivity in NanoohmMeters.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricResistivity.OhmMeters">
            <summary>
                Get ElectricResistivity in OhmMeters.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricResistivity.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit OhmMeter.
            </summary>
        </member>
        <member name="M:UnitsNet.ElectricResistivity.FromMicroohmMeters(UnitsNet.QuantityValue)">
            <summary>
                Get ElectricResistivity from MicroohmMeters.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricResistivity.FromMilliohmMeters(UnitsNet.QuantityValue)">
            <summary>
                Get ElectricResistivity from MilliohmMeters.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricResistivity.FromNanoohmMeters(UnitsNet.QuantityValue)">
            <summary>
                Get ElectricResistivity from NanoohmMeters.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricResistivity.FromOhmMeters(UnitsNet.QuantityValue)">
            <summary>
                Get ElectricResistivity from OhmMeters.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ElectricResistivity.From(UnitsNet.QuantityValue,UnitsNet.Units.ElectricResistivityUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.ElectricResistivityUnit" /> to <see cref="T:UnitsNet.ElectricResistivity" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>ElectricResistivity unit value.</returns>
        </member>
        <member name="M:UnitsNet.ElectricResistivity.GetAbbreviation(UnitsNet.Units.ElectricResistivityUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.ElectricResistivity.Equals(UnitsNet.ElectricResistivity,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another ElectricResistivity within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.ElectricResistivity.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current ElectricResistivity.</returns>
        </member>
        <member name="M:UnitsNet.ElectricResistivity.As(UnitsNet.Units.ElectricResistivityUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ElectricResistivity.ToUnit(UnitsNet.Units.ElectricResistivityUnit)">
            <summary>
                Converts this ElectricResistivity to another ElectricResistivity with the unit representation <paramref name="unit" />.
            </summary>
            <returns>A ElectricResistivity with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ElectricResistivity.AsBaseUnit">
            <summary>
                Converts the current value + unit to the base unit.
                This is typically the first step in converting from one unit to another.
            </summary>
            <returns>The value in the base unit representation.</returns>
        </member>
        <member name="M:UnitsNet.ElectricResistivity.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.ElectricResistivity.TryParse(System.String,UnitsNet.ElectricResistivity@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ElectricResistivity.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ElectricResistivity.ParseInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.ElectricResistivity.TryParseInternal(System.String,System.IFormatProvider,UnitsNet.ElectricResistivity@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ElectricResistivity.ParseUnitInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ElectricResistivity.TryParseUnitInternal(System.String,System.IFormatProvider,UnitsNet.Units.ElectricResistivityUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ElectricResistivity.ToString">
            <summary>
                Get default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.ElectricResistivity.ToString(UnitsNet.Units.ElectricResistivityUnit)">
            <summary>
                Get string representation of value and unit. Using current UI culture and two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <returns>String representation.</returns>
        </member>
        <member name="P:UnitsNet.ElectricResistivity.MaxValue">
            <summary>
            Represents the largest possible value of ElectricResistivity
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricResistivity.MinValue">
            <summary>
            Represents the smallest possible value of ElectricResistivity
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricResistivity.Type">
            <summary>
                The <see cref="P:UnitsNet.ElectricResistivity.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ElectricResistivity.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.ElectricResistivity.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="T:UnitsNet.Energy">
            <summary>
                The joule, symbol J, is a derived unit of energy, work, or amount of heat in the International System of Units. It is equal to the energy transferred (or work done) when applying a force of one newton through a distance of one metre (1 newton metre or NÂ·m), or in passing an electric current of one ampere through a resistance of one ohm for one second. Many other units of energy are included. Please do not confuse this definition of the calorie with the one colloquially used by the food industry, the large calorie, which is equivalent to 1 kcal. Thermochemical definition of the calorie is used. For BTU, the IT definition is used.
            </summary>
            <summary>
                The joule, symbol J, is a derived unit of energy, work, or amount of heat in the International System of Units. It is equal to the energy transferred (or work done) when applying a force of one newton through a distance of one metre (1 newton metre or NÂ·m), or in passing an electric current of one ampere through a resistance of one ohm for one second. Many other units of energy are included. Please do not confuse this definition of the calorie with the one colloquially used by the food industry, the large calorie, which is equivalent to 1 kcal. Thermochemical definition of the calorie is used. For BTU, the IT definition is used.
            </summary>
        </member>
        <member name="P:UnitsNet.Energy.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.Energy.GetAbbreviation(UnitsNet.Units.EnergyUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.Energy.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Energy.TryParse(System.String,System.IFormatProvider,UnitsNet.Energy@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Energy.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Energy.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.EnergyUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Energy.ToString(UnitsNet.Units.EnergyUnit,System.IFormatProvider)">
            <summary>
                Get string representation of value and unit. Using two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Energy.ToString(UnitsNet.Units.EnergyUnit,System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Energy.ToString(UnitsNet.Units.EnergyUnit,System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">Unit representation to use.</param>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
        </member>
        <member name="F:UnitsNet.Energy._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.Energy._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.Energy.Unit">
            <summary>
                The unit this quantity was constructed with -or- <see cref="P:UnitsNet.Energy.BaseUnit" /> if default ctor was used.
            </summary>
        </member>
        <member name="M:UnitsNet.Energy.#ctor(System.Double,UnitsNet.Units.EnergyUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="numericValue">The numeric value  to contruct this quantity with.</param>
            <param name="unit">The unit representation to contruct this quantity with.</param>
            <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="P:UnitsNet.Energy.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.Energy.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Energy.BaseUnit">
            <summary>
                The base unit of Energy, which is Joule. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.Energy.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.Energy.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Energy.Units">
            <summary>
                All units of measurement for the Energy quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Energy.BritishThermalUnits">
            <summary>
                Get Energy in BritishThermalUnits.
            </summary>
        </member>
        <member name="P:UnitsNet.Energy.Calories">
            <summary>
                Get Energy in Calories.
            </summary>
        </member>
        <member name="P:UnitsNet.Energy.DecathermsEc">
            <summary>
                Get Energy in DecathermsEc.
            </summary>
        </member>
        <member name="P:UnitsNet.Energy.DecathermsImperial">
            <summary>
                Get Energy in DecathermsImperial.
            </summary>
        </member>
        <member name="P:UnitsNet.Energy.DecathermsUs">
            <summary>
                Get Energy in DecathermsUs.
            </summary>
        </member>
        <member name="P:UnitsNet.Energy.ElectronVolts">
            <summary>
                Get Energy in ElectronVolts.
            </summary>
        </member>
        <member name="P:UnitsNet.Energy.Ergs">
            <summary>
                Get Energy in Ergs.
            </summary>
        </member>
        <member name="P:UnitsNet.Energy.FootPounds">
            <summary>
                Get Energy in FootPounds.
            </summary>
        </member>
        <member name="P:UnitsNet.Energy.GigabritishThermalUnits">
            <summary>
                Get Energy in GigabritishThermalUnits.
            </summary>
        </member>
        <member name="P:UnitsNet.Energy.GigawattHours">
            <summary>
                Get Energy in GigawattHours.
            </summary>
        </member>
        <member name="P:UnitsNet.Energy.Joules">
            <summary>
                Get Energy in Joules.
            </summary>
        </member>
        <member name="P:UnitsNet.Energy.KilobritishThermalUnits">
            <summary>
                Get Energy in KilobritishThermalUnits.
            </summary>
        </member>
        <member name="P:UnitsNet.Energy.Kilocalories">
            <summary>
                Get Energy in Kilocalories.
            </summary>
        </member>
        <member name="P:UnitsNet.Energy.Kilojoules">
            <summary>
                Get Energy in Kilojoules.
            </summary>
        </member>
        <member name="P:UnitsNet.Energy.KilowattHours">
            <summary>
                Get Energy in KilowattHours.
            </summary>
        </member>
        <member name="P:UnitsNet.Energy.MegabritishThermalUnits">
            <summary>
                Get Energy in MegabritishThermalUnits.
            </summary>
        </member>
        <member name="P:UnitsNet.Energy.Megajoules">
            <summary>
                Get Energy in Megajoules.
            </summary>
        </member>
        <member name="P:UnitsNet.Energy.MegawattHours">
            <summary>
                Get Energy in MegawattHours.
            </summary>
        </member>
        <member name="P:UnitsNet.Energy.ThermsEc">
            <summary>
                Get Energy in ThermsEc.
            </summary>
        </member>
        <member name="P:UnitsNet.Energy.ThermsImperial">
            <summary>
                Get Energy in ThermsImperial.
            </summary>
        </member>
        <member name="P:UnitsNet.Energy.ThermsUs">
            <summary>
                Get Energy in ThermsUs.
            </summary>
        </member>
        <member name="P:UnitsNet.Energy.WattHours">
            <summary>
                Get Energy in WattHours.
            </summary>
        </member>
        <member name="P:UnitsNet.Energy.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit Joule.
            </summary>
        </member>
        <member name="M:UnitsNet.Energy.FromBritishThermalUnits(UnitsNet.QuantityValue)">
            <summary>
                Get Energy from BritishThermalUnits.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Energy.FromCalories(UnitsNet.QuantityValue)">
            <summary>
                Get Energy from Calories.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Energy.FromDecathermsEc(UnitsNet.QuantityValue)">
            <summary>
                Get Energy from DecathermsEc.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Energy.FromDecathermsImperial(UnitsNet.QuantityValue)">
            <summary>
                Get Energy from DecathermsImperial.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Energy.FromDecathermsUs(UnitsNet.QuantityValue)">
            <summary>
                Get Energy from DecathermsUs.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Energy.FromElectronVolts(UnitsNet.QuantityValue)">
            <summary>
                Get Energy from ElectronVolts.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Energy.FromErgs(UnitsNet.QuantityValue)">
            <summary>
                Get Energy from Ergs.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Energy.FromFootPounds(UnitsNet.QuantityValue)">
            <summary>
                Get Energy from FootPounds.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Energy.FromGigabritishThermalUnits(UnitsNet.QuantityValue)">
            <summary>
                Get Energy from GigabritishThermalUnits.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Energy.FromGigawattHours(UnitsNet.QuantityValue)">
            <summary>
                Get Energy from GigawattHours.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Energy.FromJoules(UnitsNet.QuantityValue)">
            <summary>
                Get Energy from Joules.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Energy.FromKilobritishThermalUnits(UnitsNet.QuantityValue)">
            <summary>
                Get Energy from KilobritishThermalUnits.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Energy.FromKilocalories(UnitsNet.QuantityValue)">
            <summary>
                Get Energy from Kilocalories.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Energy.FromKilojoules(UnitsNet.QuantityValue)">
            <summary>
                Get Energy from Kilojoules.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Energy.FromKilowattHours(UnitsNet.QuantityValue)">
            <summary>
                Get Energy from KilowattHours.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Energy.FromMegabritishThermalUnits(UnitsNet.QuantityValue)">
            <summary>
                Get Energy from MegabritishThermalUnits.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Energy.FromMegajoules(UnitsNet.QuantityValue)">
            <summary>
                Get Energy from Megajoules.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Energy.FromMegawattHours(UnitsNet.QuantityValue)">
            <summary>
                Get Energy from MegawattHours.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Energy.FromThermsEc(UnitsNet.QuantityValue)">
            <summary>
                Get Energy from ThermsEc.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Energy.FromThermsImperial(UnitsNet.QuantityValue)">
            <summary>
                Get Energy from ThermsImperial.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Energy.FromThermsUs(UnitsNet.QuantityValue)">
            <summary>
                Get Energy from ThermsUs.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Energy.FromWattHours(UnitsNet.QuantityValue)">
            <summary>
                Get Energy from WattHours.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Energy.From(UnitsNet.QuantityValue,UnitsNet.Units.EnergyUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.EnergyUnit" /> to <see cref="T:UnitsNet.Energy" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>Energy unit value.</returns>
        </member>
        <member name="M:UnitsNet.Energy.GetAbbreviation(UnitsNet.Units.EnergyUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.Energy.Equals(UnitsNet.Energy,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another Energy within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.Energy.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current Energy.</returns>
        </member>
        <member name="M:UnitsNet.Energy.As(UnitsNet.Units.EnergyUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Energy.ToUnit(UnitsNet.Units.EnergyUnit)">
            <summary>
                Converts this Energy to another Energy with the unit representation <paramref name="unit" />.
            </summary>
            <returns>A Energy with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Energy.AsBaseUnit">
            <summary>
                Converts the current value + unit to the base unit.
                This is typically the first step in converting from one unit to another.
            </summary>
            <returns>The value in the base unit representation.</returns>
        </member>
        <member name="M:UnitsNet.Energy.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Energy.TryParse(System.String,UnitsNet.Energy@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Energy.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Energy.ParseInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Energy.TryParseInternal(System.String,System.IFormatProvider,UnitsNet.Energy@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Energy.ParseUnitInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Energy.TryParseUnitInternal(System.String,System.IFormatProvider,UnitsNet.Units.EnergyUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Energy.ToString">
            <summary>
                Get default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Energy.ToString(UnitsNet.Units.EnergyUnit)">
            <summary>
                Get string representation of value and unit. Using current UI culture and two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <returns>String representation.</returns>
        </member>
        <member name="P:UnitsNet.Energy.MaxValue">
            <summary>
            Represents the largest possible value of Energy
            </summary>
        </member>
        <member name="P:UnitsNet.Energy.MinValue">
            <summary>
            Represents the smallest possible value of Energy
            </summary>
        </member>
        <member name="P:UnitsNet.Energy.Type">
            <summary>
                The <see cref="P:UnitsNet.Energy.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Energy.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.Energy.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="T:UnitsNet.Entropy">
            <summary>
                Entropy is an important concept in the branch of science known as thermodynamics. The idea of "irreversibility" is central to the understanding of entropy.  It is often said that entropy is an expression of the disorder, or randomness of a system, or of our lack of information about it. Entropy is an extensive property. It has the dimension of energy divided by temperature, which has a unit of joules per kelvin (J/K) in the International System of Units
            </summary>
            <summary>
                Entropy is an important concept in the branch of science known as thermodynamics. The idea of "irreversibility" is central to the understanding of entropy.  It is often said that entropy is an expression of the disorder, or randomness of a system, or of our lack of information about it. Entropy is an extensive property. It has the dimension of energy divided by temperature, which has a unit of joules per kelvin (J/K) in the International System of Units
            </summary>
        </member>
        <member name="P:UnitsNet.Entropy.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.Entropy.GetAbbreviation(UnitsNet.Units.EntropyUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.Entropy.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Entropy.TryParse(System.String,System.IFormatProvider,UnitsNet.Entropy@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Entropy.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Entropy.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.EntropyUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Entropy.ToString(UnitsNet.Units.EntropyUnit,System.IFormatProvider)">
            <summary>
                Get string representation of value and unit. Using two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Entropy.ToString(UnitsNet.Units.EntropyUnit,System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Entropy.ToString(UnitsNet.Units.EntropyUnit,System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">Unit representation to use.</param>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
        </member>
        <member name="F:UnitsNet.Entropy._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.Entropy._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.Entropy.Unit">
            <summary>
                The unit this quantity was constructed with -or- <see cref="P:UnitsNet.Entropy.BaseUnit" /> if default ctor was used.
            </summary>
        </member>
        <member name="M:UnitsNet.Entropy.#ctor(System.Double,UnitsNet.Units.EntropyUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="numericValue">The numeric value  to contruct this quantity with.</param>
            <param name="unit">The unit representation to contruct this quantity with.</param>
            <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="P:UnitsNet.Entropy.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.Entropy.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Entropy.BaseUnit">
            <summary>
                The base unit of Entropy, which is JoulePerKelvin. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.Entropy.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.Entropy.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Entropy.Units">
            <summary>
                All units of measurement for the Entropy quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Entropy.CaloriesPerKelvin">
            <summary>
                Get Entropy in CaloriesPerKelvin.
            </summary>
        </member>
        <member name="P:UnitsNet.Entropy.JoulesPerDegreeCelsius">
            <summary>
                Get Entropy in JoulesPerDegreeCelsius.
            </summary>
        </member>
        <member name="P:UnitsNet.Entropy.JoulesPerKelvin">
            <summary>
                Get Entropy in JoulesPerKelvin.
            </summary>
        </member>
        <member name="P:UnitsNet.Entropy.KilocaloriesPerKelvin">
            <summary>
                Get Entropy in KilocaloriesPerKelvin.
            </summary>
        </member>
        <member name="P:UnitsNet.Entropy.KilojoulesPerDegreeCelsius">
            <summary>
                Get Entropy in KilojoulesPerDegreeCelsius.
            </summary>
        </member>
        <member name="P:UnitsNet.Entropy.KilojoulesPerKelvin">
            <summary>
                Get Entropy in KilojoulesPerKelvin.
            </summary>
        </member>
        <member name="P:UnitsNet.Entropy.MegajoulesPerKelvin">
            <summary>
                Get Entropy in MegajoulesPerKelvin.
            </summary>
        </member>
        <member name="P:UnitsNet.Entropy.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit JoulePerKelvin.
            </summary>
        </member>
        <member name="M:UnitsNet.Entropy.FromCaloriesPerKelvin(UnitsNet.QuantityValue)">
            <summary>
                Get Entropy from CaloriesPerKelvin.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Entropy.FromJoulesPerDegreeCelsius(UnitsNet.QuantityValue)">
            <summary>
                Get Entropy from JoulesPerDegreeCelsius.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Entropy.FromJoulesPerKelvin(UnitsNet.QuantityValue)">
            <summary>
                Get Entropy from JoulesPerKelvin.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Entropy.FromKilocaloriesPerKelvin(UnitsNet.QuantityValue)">
            <summary>
                Get Entropy from KilocaloriesPerKelvin.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Entropy.FromKilojoulesPerDegreeCelsius(UnitsNet.QuantityValue)">
            <summary>
                Get Entropy from KilojoulesPerDegreeCelsius.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Entropy.FromKilojoulesPerKelvin(UnitsNet.QuantityValue)">
            <summary>
                Get Entropy from KilojoulesPerKelvin.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Entropy.FromMegajoulesPerKelvin(UnitsNet.QuantityValue)">
            <summary>
                Get Entropy from MegajoulesPerKelvin.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Entropy.From(UnitsNet.QuantityValue,UnitsNet.Units.EntropyUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.EntropyUnit" /> to <see cref="T:UnitsNet.Entropy" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>Entropy unit value.</returns>
        </member>
        <member name="M:UnitsNet.Entropy.GetAbbreviation(UnitsNet.Units.EntropyUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.Entropy.Equals(UnitsNet.Entropy,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another Entropy within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.Entropy.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current Entropy.</returns>
        </member>
        <member name="M:UnitsNet.Entropy.As(UnitsNet.Units.EntropyUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Entropy.ToUnit(UnitsNet.Units.EntropyUnit)">
            <summary>
                Converts this Entropy to another Entropy with the unit representation <paramref name="unit" />.
            </summary>
            <returns>A Entropy with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Entropy.AsBaseUnit">
            <summary>
                Converts the current value + unit to the base unit.
                This is typically the first step in converting from one unit to another.
            </summary>
            <returns>The value in the base unit representation.</returns>
        </member>
        <member name="M:UnitsNet.Entropy.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Entropy.TryParse(System.String,UnitsNet.Entropy@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Entropy.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Entropy.ParseInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Entropy.TryParseInternal(System.String,System.IFormatProvider,UnitsNet.Entropy@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Entropy.ParseUnitInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Entropy.TryParseUnitInternal(System.String,System.IFormatProvider,UnitsNet.Units.EntropyUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Entropy.ToString">
            <summary>
                Get default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Entropy.ToString(UnitsNet.Units.EntropyUnit)">
            <summary>
                Get string representation of value and unit. Using current UI culture and two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <returns>String representation.</returns>
        </member>
        <member name="P:UnitsNet.Entropy.MaxValue">
            <summary>
            Represents the largest possible value of Entropy
            </summary>
        </member>
        <member name="P:UnitsNet.Entropy.MinValue">
            <summary>
            Represents the smallest possible value of Entropy
            </summary>
        </member>
        <member name="P:UnitsNet.Entropy.Type">
            <summary>
                The <see cref="P:UnitsNet.Entropy.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Entropy.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.Entropy.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="T:UnitsNet.ForceChangeRate">
            <summary>
                Force change rate is the ratio of the force change to the time during which the change occurred (value of force changes per unit time).
            </summary>
            <summary>
                Force change rate is the ratio of the force change to the time during which the change occurred (value of force changes per unit time).
            </summary>
        </member>
        <member name="P:UnitsNet.ForceChangeRate.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.ForceChangeRate.GetAbbreviation(UnitsNet.Units.ForceChangeRateUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.ForceChangeRate.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.ForceChangeRate.TryParse(System.String,System.IFormatProvider,UnitsNet.ForceChangeRate@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ForceChangeRate.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ForceChangeRate.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.ForceChangeRateUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ForceChangeRate.ToString(UnitsNet.Units.ForceChangeRateUnit,System.IFormatProvider)">
            <summary>
                Get string representation of value and unit. Using two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.ForceChangeRate.ToString(UnitsNet.Units.ForceChangeRateUnit,System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.ForceChangeRate.ToString(UnitsNet.Units.ForceChangeRateUnit,System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">Unit representation to use.</param>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
        </member>
        <member name="F:UnitsNet.ForceChangeRate._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.ForceChangeRate._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.ForceChangeRate.Unit">
            <summary>
                The unit this quantity was constructed with -or- <see cref="P:UnitsNet.ForceChangeRate.BaseUnit" /> if default ctor was used.
            </summary>
        </member>
        <member name="M:UnitsNet.ForceChangeRate.#ctor(System.Double,UnitsNet.Units.ForceChangeRateUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="numericValue">The numeric value  to contruct this quantity with.</param>
            <param name="unit">The unit representation to contruct this quantity with.</param>
            <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="P:UnitsNet.ForceChangeRate.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.ForceChangeRate.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ForceChangeRate.BaseUnit">
            <summary>
                The base unit of ForceChangeRate, which is NewtonPerSecond. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.ForceChangeRate.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.ForceChangeRate.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ForceChangeRate.Units">
            <summary>
                All units of measurement for the ForceChangeRate quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ForceChangeRate.CentinewtonsPerSecond">
            <summary>
                Get ForceChangeRate in CentinewtonsPerSecond.
            </summary>
        </member>
        <member name="P:UnitsNet.ForceChangeRate.DecanewtonsPerMinute">
            <summary>
                Get ForceChangeRate in DecanewtonsPerMinute.
            </summary>
        </member>
        <member name="P:UnitsNet.ForceChangeRate.DecanewtonsPerSecond">
            <summary>
                Get ForceChangeRate in DecanewtonsPerSecond.
            </summary>
        </member>
        <member name="P:UnitsNet.ForceChangeRate.DecinewtonsPerSecond">
            <summary>
                Get ForceChangeRate in DecinewtonsPerSecond.
            </summary>
        </member>
        <member name="P:UnitsNet.ForceChangeRate.KilonewtonsPerMinute">
            <summary>
                Get ForceChangeRate in KilonewtonsPerMinute.
            </summary>
        </member>
        <member name="P:UnitsNet.ForceChangeRate.KilonewtonsPerSecond">
            <summary>
                Get ForceChangeRate in KilonewtonsPerSecond.
            </summary>
        </member>
        <member name="P:UnitsNet.ForceChangeRate.MicronewtonsPerSecond">
            <summary>
                Get ForceChangeRate in MicronewtonsPerSecond.
            </summary>
        </member>
        <member name="P:UnitsNet.ForceChangeRate.MillinewtonsPerSecond">
            <summary>
                Get ForceChangeRate in MillinewtonsPerSecond.
            </summary>
        </member>
        <member name="P:UnitsNet.ForceChangeRate.NanonewtonsPerSecond">
            <summary>
                Get ForceChangeRate in NanonewtonsPerSecond.
            </summary>
        </member>
        <member name="P:UnitsNet.ForceChangeRate.NewtonsPerMinute">
            <summary>
                Get ForceChangeRate in NewtonsPerMinute.
            </summary>
        </member>
        <member name="P:UnitsNet.ForceChangeRate.NewtonsPerSecond">
            <summary>
                Get ForceChangeRate in NewtonsPerSecond.
            </summary>
        </member>
        <member name="P:UnitsNet.ForceChangeRate.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit NewtonPerSecond.
            </summary>
        </member>
        <member name="M:UnitsNet.ForceChangeRate.FromCentinewtonsPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Get ForceChangeRate from CentinewtonsPerSecond.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ForceChangeRate.FromDecanewtonsPerMinute(UnitsNet.QuantityValue)">
            <summary>
                Get ForceChangeRate from DecanewtonsPerMinute.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ForceChangeRate.FromDecanewtonsPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Get ForceChangeRate from DecanewtonsPerSecond.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ForceChangeRate.FromDecinewtonsPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Get ForceChangeRate from DecinewtonsPerSecond.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ForceChangeRate.FromKilonewtonsPerMinute(UnitsNet.QuantityValue)">
            <summary>
                Get ForceChangeRate from KilonewtonsPerMinute.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ForceChangeRate.FromKilonewtonsPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Get ForceChangeRate from KilonewtonsPerSecond.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ForceChangeRate.FromMicronewtonsPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Get ForceChangeRate from MicronewtonsPerSecond.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ForceChangeRate.FromMillinewtonsPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Get ForceChangeRate from MillinewtonsPerSecond.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ForceChangeRate.FromNanonewtonsPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Get ForceChangeRate from NanonewtonsPerSecond.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ForceChangeRate.FromNewtonsPerMinute(UnitsNet.QuantityValue)">
            <summary>
                Get ForceChangeRate from NewtonsPerMinute.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ForceChangeRate.FromNewtonsPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Get ForceChangeRate from NewtonsPerSecond.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ForceChangeRate.From(UnitsNet.QuantityValue,UnitsNet.Units.ForceChangeRateUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.ForceChangeRateUnit" /> to <see cref="T:UnitsNet.ForceChangeRate" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>ForceChangeRate unit value.</returns>
        </member>
        <member name="M:UnitsNet.ForceChangeRate.GetAbbreviation(UnitsNet.Units.ForceChangeRateUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.ForceChangeRate.Equals(UnitsNet.ForceChangeRate,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another ForceChangeRate within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.ForceChangeRate.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current ForceChangeRate.</returns>
        </member>
        <member name="M:UnitsNet.ForceChangeRate.As(UnitsNet.Units.ForceChangeRateUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ForceChangeRate.ToUnit(UnitsNet.Units.ForceChangeRateUnit)">
            <summary>
                Converts this ForceChangeRate to another ForceChangeRate with the unit representation <paramref name="unit" />.
            </summary>
            <returns>A ForceChangeRate with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ForceChangeRate.AsBaseUnit">
            <summary>
                Converts the current value + unit to the base unit.
                This is typically the first step in converting from one unit to another.
            </summary>
            <returns>The value in the base unit representation.</returns>
        </member>
        <member name="M:UnitsNet.ForceChangeRate.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.ForceChangeRate.TryParse(System.String,UnitsNet.ForceChangeRate@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ForceChangeRate.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ForceChangeRate.ParseInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.ForceChangeRate.TryParseInternal(System.String,System.IFormatProvider,UnitsNet.ForceChangeRate@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ForceChangeRate.ParseUnitInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ForceChangeRate.TryParseUnitInternal(System.String,System.IFormatProvider,UnitsNet.Units.ForceChangeRateUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ForceChangeRate.ToString">
            <summary>
                Get default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.ForceChangeRate.ToString(UnitsNet.Units.ForceChangeRateUnit)">
            <summary>
                Get string representation of value and unit. Using current UI culture and two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <returns>String representation.</returns>
        </member>
        <member name="P:UnitsNet.ForceChangeRate.MaxValue">
            <summary>
            Represents the largest possible value of ForceChangeRate
            </summary>
        </member>
        <member name="P:UnitsNet.ForceChangeRate.MinValue">
            <summary>
            Represents the smallest possible value of ForceChangeRate
            </summary>
        </member>
        <member name="P:UnitsNet.ForceChangeRate.Type">
            <summary>
                The <see cref="P:UnitsNet.ForceChangeRate.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ForceChangeRate.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.ForceChangeRate.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="T:UnitsNet.Frequency">
            <summary>
                The number of occurrences of a repeating event per unit time.
            </summary>
            <summary>
                The number of occurrences of a repeating event per unit time.
            </summary>
        </member>
        <member name="P:UnitsNet.Frequency.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.Frequency.GetAbbreviation(UnitsNet.Units.FrequencyUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.Frequency.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Frequency.TryParse(System.String,System.IFormatProvider,UnitsNet.Frequency@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Frequency.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Frequency.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.FrequencyUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Frequency.ToString(UnitsNet.Units.FrequencyUnit,System.IFormatProvider)">
            <summary>
                Get string representation of value and unit. Using two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Frequency.ToString(UnitsNet.Units.FrequencyUnit,System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Frequency.ToString(UnitsNet.Units.FrequencyUnit,System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">Unit representation to use.</param>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
        </member>
        <member name="F:UnitsNet.Frequency._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.Frequency._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.Frequency.Unit">
            <summary>
                The unit this quantity was constructed with -or- <see cref="P:UnitsNet.Frequency.BaseUnit" /> if default ctor was used.
            </summary>
        </member>
        <member name="M:UnitsNet.Frequency.#ctor(System.Double,UnitsNet.Units.FrequencyUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="numericValue">The numeric value  to contruct this quantity with.</param>
            <param name="unit">The unit representation to contruct this quantity with.</param>
            <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="P:UnitsNet.Frequency.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.Frequency.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Frequency.BaseUnit">
            <summary>
                The base unit of Frequency, which is Hertz. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.Frequency.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.Frequency.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Frequency.Units">
            <summary>
                All units of measurement for the Frequency quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Frequency.CyclesPerHour">
            <summary>
                Get Frequency in CyclesPerHour.
            </summary>
        </member>
        <member name="P:UnitsNet.Frequency.CyclesPerMinute">
            <summary>
                Get Frequency in CyclesPerMinute.
            </summary>
        </member>
        <member name="P:UnitsNet.Frequency.Gigahertz">
            <summary>
                Get Frequency in Gigahertz.
            </summary>
        </member>
        <member name="P:UnitsNet.Frequency.Hertz">
            <summary>
                Get Frequency in Hertz.
            </summary>
        </member>
        <member name="P:UnitsNet.Frequency.Kilohertz">
            <summary>
                Get Frequency in Kilohertz.
            </summary>
        </member>
        <member name="P:UnitsNet.Frequency.Megahertz">
            <summary>
                Get Frequency in Megahertz.
            </summary>
        </member>
        <member name="P:UnitsNet.Frequency.RadiansPerSecond">
            <summary>
                Get Frequency in RadiansPerSecond.
            </summary>
        </member>
        <member name="P:UnitsNet.Frequency.Terahertz">
            <summary>
                Get Frequency in Terahertz.
            </summary>
        </member>
        <member name="P:UnitsNet.Frequency.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit Hertz.
            </summary>
        </member>
        <member name="M:UnitsNet.Frequency.FromCyclesPerHour(UnitsNet.QuantityValue)">
            <summary>
                Get Frequency from CyclesPerHour.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Frequency.FromCyclesPerMinute(UnitsNet.QuantityValue)">
            <summary>
                Get Frequency from CyclesPerMinute.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Frequency.FromGigahertz(UnitsNet.QuantityValue)">
            <summary>
                Get Frequency from Gigahertz.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Frequency.FromHertz(UnitsNet.QuantityValue)">
            <summary>
                Get Frequency from Hertz.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Frequency.FromKilohertz(UnitsNet.QuantityValue)">
            <summary>
                Get Frequency from Kilohertz.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Frequency.FromMegahertz(UnitsNet.QuantityValue)">
            <summary>
                Get Frequency from Megahertz.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Frequency.FromRadiansPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Get Frequency from RadiansPerSecond.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Frequency.FromTerahertz(UnitsNet.QuantityValue)">
            <summary>
                Get Frequency from Terahertz.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Frequency.From(UnitsNet.QuantityValue,UnitsNet.Units.FrequencyUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.FrequencyUnit" /> to <see cref="T:UnitsNet.Frequency" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>Frequency unit value.</returns>
        </member>
        <member name="M:UnitsNet.Frequency.GetAbbreviation(UnitsNet.Units.FrequencyUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.Frequency.Equals(UnitsNet.Frequency,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another Frequency within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.Frequency.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current Frequency.</returns>
        </member>
        <member name="M:UnitsNet.Frequency.As(UnitsNet.Units.FrequencyUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Frequency.ToUnit(UnitsNet.Units.FrequencyUnit)">
            <summary>
                Converts this Frequency to another Frequency with the unit representation <paramref name="unit" />.
            </summary>
            <returns>A Frequency with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Frequency.AsBaseUnit">
            <summary>
                Converts the current value + unit to the base unit.
                This is typically the first step in converting from one unit to another.
            </summary>
            <returns>The value in the base unit representation.</returns>
        </member>
        <member name="M:UnitsNet.Frequency.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Frequency.TryParse(System.String,UnitsNet.Frequency@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Frequency.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Frequency.ParseInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Frequency.TryParseInternal(System.String,System.IFormatProvider,UnitsNet.Frequency@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Frequency.ParseUnitInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Frequency.TryParseUnitInternal(System.String,System.IFormatProvider,UnitsNet.Units.FrequencyUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Frequency.ToString">
            <summary>
                Get default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Frequency.ToString(UnitsNet.Units.FrequencyUnit)">
            <summary>
                Get string representation of value and unit. Using current UI culture and two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <returns>String representation.</returns>
        </member>
        <member name="P:UnitsNet.Frequency.MaxValue">
            <summary>
            Represents the largest possible value of Frequency
            </summary>
        </member>
        <member name="P:UnitsNet.Frequency.MinValue">
            <summary>
            Represents the smallest possible value of Frequency
            </summary>
        </member>
        <member name="P:UnitsNet.Frequency.Type">
            <summary>
                The <see cref="P:UnitsNet.Frequency.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Frequency.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.Frequency.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="T:UnitsNet.HeatTransferCoefficient">
            <summary>
                The heat transfer coefficient or film coefficient, or film effectiveness, in thermodynamics and in mechanics is the proportionality constant between the heat flux and the thermodynamic driving force for the flow of heat (i.e., the temperature difference, Î”T)
            </summary>
            <summary>
                The heat transfer coefficient or film coefficient, or film effectiveness, in thermodynamics and in mechanics is the proportionality constant between the heat flux and the thermodynamic driving force for the flow of heat (i.e., the temperature difference, Î”T)
            </summary>
        </member>
        <member name="P:UnitsNet.HeatTransferCoefficient.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.HeatTransferCoefficient.GetAbbreviation(UnitsNet.Units.HeatTransferCoefficientUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.HeatTransferCoefficient.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.HeatTransferCoefficient.TryParse(System.String,System.IFormatProvider,UnitsNet.HeatTransferCoefficient@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.HeatTransferCoefficient.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.HeatTransferCoefficient.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.HeatTransferCoefficientUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.HeatTransferCoefficient.ToString(UnitsNet.Units.HeatTransferCoefficientUnit,System.IFormatProvider)">
            <summary>
                Get string representation of value and unit. Using two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.HeatTransferCoefficient.ToString(UnitsNet.Units.HeatTransferCoefficientUnit,System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.HeatTransferCoefficient.ToString(UnitsNet.Units.HeatTransferCoefficientUnit,System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">Unit representation to use.</param>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
        </member>
        <member name="F:UnitsNet.HeatTransferCoefficient._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.HeatTransferCoefficient._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.HeatTransferCoefficient.Unit">
            <summary>
                The unit this quantity was constructed with -or- <see cref="P:UnitsNet.HeatTransferCoefficient.BaseUnit" /> if default ctor was used.
            </summary>
        </member>
        <member name="M:UnitsNet.HeatTransferCoefficient.#ctor(System.Double,UnitsNet.Units.HeatTransferCoefficientUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="numericValue">The numeric value  to contruct this quantity with.</param>
            <param name="unit">The unit representation to contruct this quantity with.</param>
            <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="P:UnitsNet.HeatTransferCoefficient.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.HeatTransferCoefficient.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.HeatTransferCoefficient.BaseUnit">
            <summary>
                The base unit of HeatTransferCoefficient, which is WattPerSquareMeterKelvin. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.HeatTransferCoefficient.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.HeatTransferCoefficient.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.HeatTransferCoefficient.Units">
            <summary>
                All units of measurement for the HeatTransferCoefficient quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.HeatTransferCoefficient.WattsPerSquareMeterCelsius">
            <summary>
                Get HeatTransferCoefficient in WattsPerSquareMeterCelsius.
            </summary>
        </member>
        <member name="P:UnitsNet.HeatTransferCoefficient.WattsPerSquareMeterKelvin">
            <summary>
                Get HeatTransferCoefficient in WattsPerSquareMeterKelvin.
            </summary>
        </member>
        <member name="P:UnitsNet.HeatTransferCoefficient.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit WattPerSquareMeterKelvin.
            </summary>
        </member>
        <member name="M:UnitsNet.HeatTransferCoefficient.FromWattsPerSquareMeterCelsius(UnitsNet.QuantityValue)">
            <summary>
                Get HeatTransferCoefficient from WattsPerSquareMeterCelsius.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.HeatTransferCoefficient.FromWattsPerSquareMeterKelvin(UnitsNet.QuantityValue)">
            <summary>
                Get HeatTransferCoefficient from WattsPerSquareMeterKelvin.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.HeatTransferCoefficient.From(UnitsNet.QuantityValue,UnitsNet.Units.HeatTransferCoefficientUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.HeatTransferCoefficientUnit" /> to <see cref="T:UnitsNet.HeatTransferCoefficient" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>HeatTransferCoefficient unit value.</returns>
        </member>
        <member name="M:UnitsNet.HeatTransferCoefficient.GetAbbreviation(UnitsNet.Units.HeatTransferCoefficientUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.HeatTransferCoefficient.Equals(UnitsNet.HeatTransferCoefficient,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another HeatTransferCoefficient within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.HeatTransferCoefficient.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current HeatTransferCoefficient.</returns>
        </member>
        <member name="M:UnitsNet.HeatTransferCoefficient.As(UnitsNet.Units.HeatTransferCoefficientUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.HeatTransferCoefficient.ToUnit(UnitsNet.Units.HeatTransferCoefficientUnit)">
            <summary>
                Converts this HeatTransferCoefficient to another HeatTransferCoefficient with the unit representation <paramref name="unit" />.
            </summary>
            <returns>A HeatTransferCoefficient with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.HeatTransferCoefficient.AsBaseUnit">
            <summary>
                Converts the current value + unit to the base unit.
                This is typically the first step in converting from one unit to another.
            </summary>
            <returns>The value in the base unit representation.</returns>
        </member>
        <member name="M:UnitsNet.HeatTransferCoefficient.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.HeatTransferCoefficient.TryParse(System.String,UnitsNet.HeatTransferCoefficient@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.HeatTransferCoefficient.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.HeatTransferCoefficient.ParseInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.HeatTransferCoefficient.TryParseInternal(System.String,System.IFormatProvider,UnitsNet.HeatTransferCoefficient@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.HeatTransferCoefficient.ParseUnitInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.HeatTransferCoefficient.TryParseUnitInternal(System.String,System.IFormatProvider,UnitsNet.Units.HeatTransferCoefficientUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.HeatTransferCoefficient.ToString">
            <summary>
                Get default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.HeatTransferCoefficient.ToString(UnitsNet.Units.HeatTransferCoefficientUnit)">
            <summary>
                Get string representation of value and unit. Using current UI culture and two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <returns>String representation.</returns>
        </member>
        <member name="P:UnitsNet.HeatTransferCoefficient.MaxValue">
            <summary>
            Represents the largest possible value of HeatTransferCoefficient
            </summary>
        </member>
        <member name="P:UnitsNet.HeatTransferCoefficient.MinValue">
            <summary>
            Represents the smallest possible value of HeatTransferCoefficient
            </summary>
        </member>
        <member name="P:UnitsNet.HeatTransferCoefficient.Type">
            <summary>
                The <see cref="P:UnitsNet.HeatTransferCoefficient.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.HeatTransferCoefficient.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.HeatTransferCoefficient.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="T:UnitsNet.Illuminance">
            <summary>
                In photometry, illuminance is the total luminous flux incident on a surface, per unit area.
            </summary>
            <summary>
                In photometry, illuminance is the total luminous flux incident on a surface, per unit area.
            </summary>
        </member>
        <member name="P:UnitsNet.Illuminance.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.Illuminance.GetAbbreviation(UnitsNet.Units.IlluminanceUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.Illuminance.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Illuminance.TryParse(System.String,System.IFormatProvider,UnitsNet.Illuminance@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Illuminance.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Illuminance.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.IlluminanceUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Illuminance.ToString(UnitsNet.Units.IlluminanceUnit,System.IFormatProvider)">
            <summary>
                Get string representation of value and unit. Using two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Illuminance.ToString(UnitsNet.Units.IlluminanceUnit,System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Illuminance.ToString(UnitsNet.Units.IlluminanceUnit,System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">Unit representation to use.</param>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
        </member>
        <member name="F:UnitsNet.Illuminance._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.Illuminance._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.Illuminance.Unit">
            <summary>
                The unit this quantity was constructed with -or- <see cref="P:UnitsNet.Illuminance.BaseUnit" /> if default ctor was used.
            </summary>
        </member>
        <member name="M:UnitsNet.Illuminance.#ctor(System.Double,UnitsNet.Units.IlluminanceUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="numericValue">The numeric value  to contruct this quantity with.</param>
            <param name="unit">The unit representation to contruct this quantity with.</param>
            <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="P:UnitsNet.Illuminance.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.Illuminance.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Illuminance.BaseUnit">
            <summary>
                The base unit of Illuminance, which is Lux. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.Illuminance.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.Illuminance.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Illuminance.Units">
            <summary>
                All units of measurement for the Illuminance quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Illuminance.Kilolux">
            <summary>
                Get Illuminance in Kilolux.
            </summary>
        </member>
        <member name="P:UnitsNet.Illuminance.Lux">
            <summary>
                Get Illuminance in Lux.
            </summary>
        </member>
        <member name="P:UnitsNet.Illuminance.Megalux">
            <summary>
                Get Illuminance in Megalux.
            </summary>
        </member>
        <member name="P:UnitsNet.Illuminance.Millilux">
            <summary>
                Get Illuminance in Millilux.
            </summary>
        </member>
        <member name="P:UnitsNet.Illuminance.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit Lux.
            </summary>
        </member>
        <member name="M:UnitsNet.Illuminance.FromKilolux(UnitsNet.QuantityValue)">
            <summary>
                Get Illuminance from Kilolux.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Illuminance.FromLux(UnitsNet.QuantityValue)">
            <summary>
                Get Illuminance from Lux.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Illuminance.FromMegalux(UnitsNet.QuantityValue)">
            <summary>
                Get Illuminance from Megalux.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Illuminance.FromMillilux(UnitsNet.QuantityValue)">
            <summary>
                Get Illuminance from Millilux.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Illuminance.From(UnitsNet.QuantityValue,UnitsNet.Units.IlluminanceUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.IlluminanceUnit" /> to <see cref="T:UnitsNet.Illuminance" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>Illuminance unit value.</returns>
        </member>
        <member name="M:UnitsNet.Illuminance.GetAbbreviation(UnitsNet.Units.IlluminanceUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.Illuminance.Equals(UnitsNet.Illuminance,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another Illuminance within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.Illuminance.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current Illuminance.</returns>
        </member>
        <member name="M:UnitsNet.Illuminance.As(UnitsNet.Units.IlluminanceUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Illuminance.ToUnit(UnitsNet.Units.IlluminanceUnit)">
            <summary>
                Converts this Illuminance to another Illuminance with the unit representation <paramref name="unit" />.
            </summary>
            <returns>A Illuminance with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Illuminance.AsBaseUnit">
            <summary>
                Converts the current value + unit to the base unit.
                This is typically the first step in converting from one unit to another.
            </summary>
            <returns>The value in the base unit representation.</returns>
        </member>
        <member name="M:UnitsNet.Illuminance.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Illuminance.TryParse(System.String,UnitsNet.Illuminance@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Illuminance.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Illuminance.ParseInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Illuminance.TryParseInternal(System.String,System.IFormatProvider,UnitsNet.Illuminance@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Illuminance.ParseUnitInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Illuminance.TryParseUnitInternal(System.String,System.IFormatProvider,UnitsNet.Units.IlluminanceUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Illuminance.ToString">
            <summary>
                Get default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Illuminance.ToString(UnitsNet.Units.IlluminanceUnit)">
            <summary>
                Get string representation of value and unit. Using current UI culture and two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <returns>String representation.</returns>
        </member>
        <member name="P:UnitsNet.Illuminance.MaxValue">
            <summary>
            Represents the largest possible value of Illuminance
            </summary>
        </member>
        <member name="P:UnitsNet.Illuminance.MinValue">
            <summary>
            Represents the smallest possible value of Illuminance
            </summary>
        </member>
        <member name="P:UnitsNet.Illuminance.Type">
            <summary>
                The <see cref="P:UnitsNet.Illuminance.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Illuminance.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.Illuminance.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="T:UnitsNet.Information">
            <summary>
                In computing and telecommunications, a unit of information is the capacity of some standard data storage system or communication channel, used to measure the capacities of other systems and channels. In information theory, units of information are also used to measure the information contents or entropy of random variables.
            </summary>
            <summary>
                In computing and telecommunications, a unit of information is the capacity of some standard data storage system or communication channel, used to measure the capacities of other systems and channels. In information theory, units of information are also used to measure the information contents or entropy of random variables.
            </summary>
        </member>
        <member name="P:UnitsNet.Information.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.Information.GetAbbreviation(UnitsNet.Units.InformationUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.Information.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Information.TryParse(System.String,System.IFormatProvider,UnitsNet.Information@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Information.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Information.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.InformationUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Information.ToString(UnitsNet.Units.InformationUnit,System.IFormatProvider)">
            <summary>
                Get string representation of value and unit. Using two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Information.ToString(UnitsNet.Units.InformationUnit,System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Information.ToString(UnitsNet.Units.InformationUnit,System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">Unit representation to use.</param>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
        </member>
        <member name="F:UnitsNet.Information._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.Information._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.Information.Unit">
            <summary>
                The unit this quantity was constructed with -or- <see cref="P:UnitsNet.Information.BaseUnit" /> if default ctor was used.
            </summary>
        </member>
        <member name="M:UnitsNet.Information.#ctor(System.Decimal,UnitsNet.Units.InformationUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="numericValue">The numeric value  to contruct this quantity with.</param>
            <param name="unit">The unit representation to contruct this quantity with.</param>
            <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="P:UnitsNet.Information.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.Information.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Information.BaseUnit">
            <summary>
                The base unit of Information, which is Bit. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.Information.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.Information.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Information.Units">
            <summary>
                All units of measurement for the Information quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Information.Bits">
            <summary>
                Get Information in Bits.
            </summary>
        </member>
        <member name="P:UnitsNet.Information.Bytes">
            <summary>
                Get Information in Bytes.
            </summary>
        </member>
        <member name="P:UnitsNet.Information.Exabits">
            <summary>
                Get Information in Exabits.
            </summary>
        </member>
        <member name="P:UnitsNet.Information.Exabytes">
            <summary>
                Get Information in Exabytes.
            </summary>
        </member>
        <member name="P:UnitsNet.Information.Exbibits">
            <summary>
                Get Information in Exbibits.
            </summary>
        </member>
        <member name="P:UnitsNet.Information.Exbibytes">
            <summary>
                Get Information in Exbibytes.
            </summary>
        </member>
        <member name="P:UnitsNet.Information.Gibibits">
            <summary>
                Get Information in Gibibits.
            </summary>
        </member>
        <member name="P:UnitsNet.Information.Gibibytes">
            <summary>
                Get Information in Gibibytes.
            </summary>
        </member>
        <member name="P:UnitsNet.Information.Gigabits">
            <summary>
                Get Information in Gigabits.
            </summary>
        </member>
        <member name="P:UnitsNet.Information.Gigabytes">
            <summary>
                Get Information in Gigabytes.
            </summary>
        </member>
        <member name="P:UnitsNet.Information.Kibibits">
            <summary>
                Get Information in Kibibits.
            </summary>
        </member>
        <member name="P:UnitsNet.Information.Kibibytes">
            <summary>
                Get Information in Kibibytes.
            </summary>
        </member>
        <member name="P:UnitsNet.Information.Kilobits">
            <summary>
                Get Information in Kilobits.
            </summary>
        </member>
        <member name="P:UnitsNet.Information.Kilobytes">
            <summary>
                Get Information in Kilobytes.
            </summary>
        </member>
        <member name="P:UnitsNet.Information.Mebibits">
            <summary>
                Get Information in Mebibits.
            </summary>
        </member>
        <member name="P:UnitsNet.Information.Mebibytes">
            <summary>
                Get Information in Mebibytes.
            </summary>
        </member>
        <member name="P:UnitsNet.Information.Megabits">
            <summary>
                Get Information in Megabits.
            </summary>
        </member>
        <member name="P:UnitsNet.Information.Megabytes">
            <summary>
                Get Information in Megabytes.
            </summary>
        </member>
        <member name="P:UnitsNet.Information.Pebibits">
            <summary>
                Get Information in Pebibits.
            </summary>
        </member>
        <member name="P:UnitsNet.Information.Pebibytes">
            <summary>
                Get Information in Pebibytes.
            </summary>
        </member>
        <member name="P:UnitsNet.Information.Petabits">
            <summary>
                Get Information in Petabits.
            </summary>
        </member>
        <member name="P:UnitsNet.Information.Petabytes">
            <summary>
                Get Information in Petabytes.
            </summary>
        </member>
        <member name="P:UnitsNet.Information.Tebibits">
            <summary>
                Get Information in Tebibits.
            </summary>
        </member>
        <member name="P:UnitsNet.Information.Tebibytes">
            <summary>
                Get Information in Tebibytes.
            </summary>
        </member>
        <member name="P:UnitsNet.Information.Terabits">
            <summary>
                Get Information in Terabits.
            </summary>
        </member>
        <member name="P:UnitsNet.Information.Terabytes">
            <summary>
                Get Information in Terabytes.
            </summary>
        </member>
        <member name="P:UnitsNet.Information.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit Bit.
            </summary>
        </member>
        <member name="M:UnitsNet.Information.FromBits(UnitsNet.QuantityValue)">
            <summary>
                Get Information from Bits.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Information.FromBytes(UnitsNet.QuantityValue)">
            <summary>
                Get Information from Bytes.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Information.FromExabits(UnitsNet.QuantityValue)">
            <summary>
                Get Information from Exabits.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Information.FromExabytes(UnitsNet.QuantityValue)">
            <summary>
                Get Information from Exabytes.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Information.FromExbibits(UnitsNet.QuantityValue)">
            <summary>
                Get Information from Exbibits.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Information.FromExbibytes(UnitsNet.QuantityValue)">
            <summary>
                Get Information from Exbibytes.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Information.FromGibibits(UnitsNet.QuantityValue)">
            <summary>
                Get Information from Gibibits.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Information.FromGibibytes(UnitsNet.QuantityValue)">
            <summary>
                Get Information from Gibibytes.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Information.FromGigabits(UnitsNet.QuantityValue)">
            <summary>
                Get Information from Gigabits.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Information.FromGigabytes(UnitsNet.QuantityValue)">
            <summary>
                Get Information from Gigabytes.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Information.FromKibibits(UnitsNet.QuantityValue)">
            <summary>
                Get Information from Kibibits.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Information.FromKibibytes(UnitsNet.QuantityValue)">
            <summary>
                Get Information from Kibibytes.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Information.FromKilobits(UnitsNet.QuantityValue)">
            <summary>
                Get Information from Kilobits.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Information.FromKilobytes(UnitsNet.QuantityValue)">
            <summary>
                Get Information from Kilobytes.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Information.FromMebibits(UnitsNet.QuantityValue)">
            <summary>
                Get Information from Mebibits.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Information.FromMebibytes(UnitsNet.QuantityValue)">
            <summary>
                Get Information from Mebibytes.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Information.FromMegabits(UnitsNet.QuantityValue)">
            <summary>
                Get Information from Megabits.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Information.FromMegabytes(UnitsNet.QuantityValue)">
            <summary>
                Get Information from Megabytes.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Information.FromPebibits(UnitsNet.QuantityValue)">
            <summary>
                Get Information from Pebibits.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Information.FromPebibytes(UnitsNet.QuantityValue)">
            <summary>
                Get Information from Pebibytes.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Information.FromPetabits(UnitsNet.QuantityValue)">
            <summary>
                Get Information from Petabits.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Information.FromPetabytes(UnitsNet.QuantityValue)">
            <summary>
                Get Information from Petabytes.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Information.FromTebibits(UnitsNet.QuantityValue)">
            <summary>
                Get Information from Tebibits.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Information.FromTebibytes(UnitsNet.QuantityValue)">
            <summary>
                Get Information from Tebibytes.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Information.FromTerabits(UnitsNet.QuantityValue)">
            <summary>
                Get Information from Terabits.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Information.FromTerabytes(UnitsNet.QuantityValue)">
            <summary>
                Get Information from Terabytes.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Information.From(UnitsNet.QuantityValue,UnitsNet.Units.InformationUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.InformationUnit" /> to <see cref="T:UnitsNet.Information" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>Information unit value.</returns>
        </member>
        <member name="M:UnitsNet.Information.GetAbbreviation(UnitsNet.Units.InformationUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.Information.Equals(UnitsNet.Information,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another Information within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.Information.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current Information.</returns>
        </member>
        <member name="M:UnitsNet.Information.As(UnitsNet.Units.InformationUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Information.ToUnit(UnitsNet.Units.InformationUnit)">
            <summary>
                Converts this Information to another Information with the unit representation <paramref name="unit" />.
            </summary>
            <returns>A Information with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Information.AsBaseUnit">
            <summary>
                Converts the current value + unit to the base unit.
                This is typically the first step in converting from one unit to another.
            </summary>
            <returns>The value in the base unit representation.</returns>
        </member>
        <member name="M:UnitsNet.Information.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Information.TryParse(System.String,UnitsNet.Information@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Information.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Information.ParseInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Information.TryParseInternal(System.String,System.IFormatProvider,UnitsNet.Information@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Information.ParseUnitInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Information.TryParseUnitInternal(System.String,System.IFormatProvider,UnitsNet.Units.InformationUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Information.ToString">
            <summary>
                Get default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Information.ToString(UnitsNet.Units.InformationUnit)">
            <summary>
                Get string representation of value and unit. Using current UI culture and two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <returns>String representation.</returns>
        </member>
        <member name="P:UnitsNet.Information.MaxValue">
            <summary>
            Represents the largest possible value of Information
            </summary>
        </member>
        <member name="P:UnitsNet.Information.MinValue">
            <summary>
            Represents the smallest possible value of Information
            </summary>
        </member>
        <member name="P:UnitsNet.Information.Type">
            <summary>
                The <see cref="P:UnitsNet.Information.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Information.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.Information.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="T:UnitsNet.Irradiance">
            <summary>
                Irradiance is the intensity of ultraviolet (UV) or visible light incident on a surface.
            </summary>
            <summary>
                Irradiance is the intensity of ultraviolet (UV) or visible light incident on a surface.
            </summary>
        </member>
        <member name="P:UnitsNet.Irradiance.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.Irradiance.GetAbbreviation(UnitsNet.Units.IrradianceUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.Irradiance.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Irradiance.TryParse(System.String,System.IFormatProvider,UnitsNet.Irradiance@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Irradiance.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Irradiance.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.IrradianceUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Irradiance.ToString(UnitsNet.Units.IrradianceUnit,System.IFormatProvider)">
            <summary>
                Get string representation of value and unit. Using two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Irradiance.ToString(UnitsNet.Units.IrradianceUnit,System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Irradiance.ToString(UnitsNet.Units.IrradianceUnit,System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">Unit representation to use.</param>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
        </member>
        <member name="F:UnitsNet.Irradiance._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.Irradiance._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.Irradiance.Unit">
            <summary>
                The unit this quantity was constructed with -or- <see cref="P:UnitsNet.Irradiance.BaseUnit" /> if default ctor was used.
            </summary>
        </member>
        <member name="M:UnitsNet.Irradiance.#ctor(System.Double,UnitsNet.Units.IrradianceUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="numericValue">The numeric value  to contruct this quantity with.</param>
            <param name="unit">The unit representation to contruct this quantity with.</param>
            <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="P:UnitsNet.Irradiance.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.Irradiance.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Irradiance.BaseUnit">
            <summary>
                The base unit of Irradiance, which is WattPerSquareMeter. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.Irradiance.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.Irradiance.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Irradiance.Units">
            <summary>
                All units of measurement for the Irradiance quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Irradiance.KilowattsPerSquareMeter">
            <summary>
                Get Irradiance in KilowattsPerSquareMeter.
            </summary>
        </member>
        <member name="P:UnitsNet.Irradiance.WattsPerSquareMeter">
            <summary>
                Get Irradiance in WattsPerSquareMeter.
            </summary>
        </member>
        <member name="P:UnitsNet.Irradiance.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit WattPerSquareMeter.
            </summary>
        </member>
        <member name="M:UnitsNet.Irradiance.FromKilowattsPerSquareMeter(UnitsNet.QuantityValue)">
            <summary>
                Get Irradiance from KilowattsPerSquareMeter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Irradiance.FromWattsPerSquareMeter(UnitsNet.QuantityValue)">
            <summary>
                Get Irradiance from WattsPerSquareMeter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Irradiance.From(UnitsNet.QuantityValue,UnitsNet.Units.IrradianceUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.IrradianceUnit" /> to <see cref="T:UnitsNet.Irradiance" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>Irradiance unit value.</returns>
        </member>
        <member name="M:UnitsNet.Irradiance.GetAbbreviation(UnitsNet.Units.IrradianceUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.Irradiance.Equals(UnitsNet.Irradiance,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another Irradiance within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.Irradiance.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current Irradiance.</returns>
        </member>
        <member name="M:UnitsNet.Irradiance.As(UnitsNet.Units.IrradianceUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Irradiance.ToUnit(UnitsNet.Units.IrradianceUnit)">
            <summary>
                Converts this Irradiance to another Irradiance with the unit representation <paramref name="unit" />.
            </summary>
            <returns>A Irradiance with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Irradiance.AsBaseUnit">
            <summary>
                Converts the current value + unit to the base unit.
                This is typically the first step in converting from one unit to another.
            </summary>
            <returns>The value in the base unit representation.</returns>
        </member>
        <member name="M:UnitsNet.Irradiance.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Irradiance.TryParse(System.String,UnitsNet.Irradiance@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Irradiance.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Irradiance.ParseInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Irradiance.TryParseInternal(System.String,System.IFormatProvider,UnitsNet.Irradiance@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Irradiance.ParseUnitInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Irradiance.TryParseUnitInternal(System.String,System.IFormatProvider,UnitsNet.Units.IrradianceUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Irradiance.ToString">
            <summary>
                Get default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Irradiance.ToString(UnitsNet.Units.IrradianceUnit)">
            <summary>
                Get string representation of value and unit. Using current UI culture and two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <returns>String representation.</returns>
        </member>
        <member name="P:UnitsNet.Irradiance.MaxValue">
            <summary>
            Represents the largest possible value of Irradiance
            </summary>
        </member>
        <member name="P:UnitsNet.Irradiance.MinValue">
            <summary>
            Represents the smallest possible value of Irradiance
            </summary>
        </member>
        <member name="P:UnitsNet.Irradiance.Type">
            <summary>
                The <see cref="P:UnitsNet.Irradiance.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Irradiance.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.Irradiance.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="T:UnitsNet.Irradiation">
            <summary>
                Irradiation is the process by which an object is exposed to radiation. The exposure can originate from various sources, including natural sources.
            </summary>
            <summary>
                Irradiation is the process by which an object is exposed to radiation. The exposure can originate from various sources, including natural sources.
            </summary>
        </member>
        <member name="P:UnitsNet.Irradiation.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.Irradiation.GetAbbreviation(UnitsNet.Units.IrradiationUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.Irradiation.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Irradiation.TryParse(System.String,System.IFormatProvider,UnitsNet.Irradiation@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Irradiation.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Irradiation.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.IrradiationUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Irradiation.ToString(UnitsNet.Units.IrradiationUnit,System.IFormatProvider)">
            <summary>
                Get string representation of value and unit. Using two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Irradiation.ToString(UnitsNet.Units.IrradiationUnit,System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Irradiation.ToString(UnitsNet.Units.IrradiationUnit,System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">Unit representation to use.</param>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
        </member>
        <member name="F:UnitsNet.Irradiation._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.Irradiation._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.Irradiation.Unit">
            <summary>
                The unit this quantity was constructed with -or- <see cref="P:UnitsNet.Irradiation.BaseUnit" /> if default ctor was used.
            </summary>
        </member>
        <member name="M:UnitsNet.Irradiation.#ctor(System.Double,UnitsNet.Units.IrradiationUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="numericValue">The numeric value  to contruct this quantity with.</param>
            <param name="unit">The unit representation to contruct this quantity with.</param>
            <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="P:UnitsNet.Irradiation.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.Irradiation.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Irradiation.BaseUnit">
            <summary>
                The base unit of Irradiation, which is JoulePerSquareMeter. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.Irradiation.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.Irradiation.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Irradiation.Units">
            <summary>
                All units of measurement for the Irradiation quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Irradiation.JoulesPerSquareMeter">
            <summary>
                Get Irradiation in JoulesPerSquareMeter.
            </summary>
        </member>
        <member name="P:UnitsNet.Irradiation.KilowattHoursPerSquareMeter">
            <summary>
                Get Irradiation in KilowattHoursPerSquareMeter.
            </summary>
        </member>
        <member name="P:UnitsNet.Irradiation.WattHoursPerSquareMeter">
            <summary>
                Get Irradiation in WattHoursPerSquareMeter.
            </summary>
        </member>
        <member name="P:UnitsNet.Irradiation.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit JoulePerSquareMeter.
            </summary>
        </member>
        <member name="M:UnitsNet.Irradiation.FromJoulesPerSquareMeter(UnitsNet.QuantityValue)">
            <summary>
                Get Irradiation from JoulesPerSquareMeter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Irradiation.FromKilowattHoursPerSquareMeter(UnitsNet.QuantityValue)">
            <summary>
                Get Irradiation from KilowattHoursPerSquareMeter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Irradiation.FromWattHoursPerSquareMeter(UnitsNet.QuantityValue)">
            <summary>
                Get Irradiation from WattHoursPerSquareMeter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Irradiation.From(UnitsNet.QuantityValue,UnitsNet.Units.IrradiationUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.IrradiationUnit" /> to <see cref="T:UnitsNet.Irradiation" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>Irradiation unit value.</returns>
        </member>
        <member name="M:UnitsNet.Irradiation.GetAbbreviation(UnitsNet.Units.IrradiationUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.Irradiation.Equals(UnitsNet.Irradiation,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another Irradiation within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.Irradiation.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current Irradiation.</returns>
        </member>
        <member name="M:UnitsNet.Irradiation.As(UnitsNet.Units.IrradiationUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Irradiation.ToUnit(UnitsNet.Units.IrradiationUnit)">
            <summary>
                Converts this Irradiation to another Irradiation with the unit representation <paramref name="unit" />.
            </summary>
            <returns>A Irradiation with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Irradiation.AsBaseUnit">
            <summary>
                Converts the current value + unit to the base unit.
                This is typically the first step in converting from one unit to another.
            </summary>
            <returns>The value in the base unit representation.</returns>
        </member>
        <member name="M:UnitsNet.Irradiation.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Irradiation.TryParse(System.String,UnitsNet.Irradiation@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Irradiation.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Irradiation.ParseInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Irradiation.TryParseInternal(System.String,System.IFormatProvider,UnitsNet.Irradiation@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Irradiation.ParseUnitInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Irradiation.TryParseUnitInternal(System.String,System.IFormatProvider,UnitsNet.Units.IrradiationUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Irradiation.ToString">
            <summary>
                Get default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Irradiation.ToString(UnitsNet.Units.IrradiationUnit)">
            <summary>
                Get string representation of value and unit. Using current UI culture and two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <returns>String representation.</returns>
        </member>
        <member name="P:UnitsNet.Irradiation.MaxValue">
            <summary>
            Represents the largest possible value of Irradiation
            </summary>
        </member>
        <member name="P:UnitsNet.Irradiation.MinValue">
            <summary>
            Represents the smallest possible value of Irradiation
            </summary>
        </member>
        <member name="P:UnitsNet.Irradiation.Type">
            <summary>
                The <see cref="P:UnitsNet.Irradiation.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Irradiation.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.Irradiation.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="T:UnitsNet.LinearDensity">
            <summary>
                The Linear Density, or more precisely, the linear mass density, of a substance is its mass per unit length.  The term linear density is most often used when describing the characteristics of one-dimensional objects, although linear density can also be used to describe the density of a three-dimensional quantity along one particular dimension.
            </summary>
            <summary>
                The Linear Density, or more precisely, the linear mass density, of a substance is its mass per unit length.  The term linear density is most often used when describing the characteristics of one-dimensional objects, although linear density can also be used to describe the density of a three-dimensional quantity along one particular dimension.
            </summary>
        </member>
        <member name="P:UnitsNet.LinearDensity.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.LinearDensity.GetAbbreviation(UnitsNet.Units.LinearDensityUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.LinearDensity.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.LinearDensity.TryParse(System.String,System.IFormatProvider,UnitsNet.LinearDensity@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.LinearDensity.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.LinearDensity.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.LinearDensityUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.LinearDensity.ToString(UnitsNet.Units.LinearDensityUnit,System.IFormatProvider)">
            <summary>
                Get string representation of value and unit. Using two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.LinearDensity.ToString(UnitsNet.Units.LinearDensityUnit,System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.LinearDensity.ToString(UnitsNet.Units.LinearDensityUnit,System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">Unit representation to use.</param>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
        </member>
        <member name="F:UnitsNet.LinearDensity._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.LinearDensity._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.LinearDensity.Unit">
            <summary>
                The unit this quantity was constructed with -or- <see cref="P:UnitsNet.LinearDensity.BaseUnit" /> if default ctor was used.
            </summary>
        </member>
        <member name="M:UnitsNet.LinearDensity.#ctor(System.Double,UnitsNet.Units.LinearDensityUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="numericValue">The numeric value  to contruct this quantity with.</param>
            <param name="unit">The unit representation to contruct this quantity with.</param>
            <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="P:UnitsNet.LinearDensity.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.LinearDensity.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.LinearDensity.BaseUnit">
            <summary>
                The base unit of LinearDensity, which is KilogramPerMeter. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.LinearDensity.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.LinearDensity.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.LinearDensity.Units">
            <summary>
                All units of measurement for the LinearDensity quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.LinearDensity.GramsPerMeter">
            <summary>
                Get LinearDensity in GramsPerMeter.
            </summary>
        </member>
        <member name="P:UnitsNet.LinearDensity.KilogramsPerMeter">
            <summary>
                Get LinearDensity in KilogramsPerMeter.
            </summary>
        </member>
        <member name="P:UnitsNet.LinearDensity.PoundsPerFoot">
            <summary>
                Get LinearDensity in PoundsPerFoot.
            </summary>
        </member>
        <member name="P:UnitsNet.LinearDensity.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit KilogramPerMeter.
            </summary>
        </member>
        <member name="M:UnitsNet.LinearDensity.FromGramsPerMeter(UnitsNet.QuantityValue)">
            <summary>
                Get LinearDensity from GramsPerMeter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.LinearDensity.FromKilogramsPerMeter(UnitsNet.QuantityValue)">
            <summary>
                Get LinearDensity from KilogramsPerMeter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.LinearDensity.FromPoundsPerFoot(UnitsNet.QuantityValue)">
            <summary>
                Get LinearDensity from PoundsPerFoot.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.LinearDensity.From(UnitsNet.QuantityValue,UnitsNet.Units.LinearDensityUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.LinearDensityUnit" /> to <see cref="T:UnitsNet.LinearDensity" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>LinearDensity unit value.</returns>
        </member>
        <member name="M:UnitsNet.LinearDensity.GetAbbreviation(UnitsNet.Units.LinearDensityUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.LinearDensity.Equals(UnitsNet.LinearDensity,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another LinearDensity within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.LinearDensity.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current LinearDensity.</returns>
        </member>
        <member name="M:UnitsNet.LinearDensity.As(UnitsNet.Units.LinearDensityUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.LinearDensity.ToUnit(UnitsNet.Units.LinearDensityUnit)">
            <summary>
                Converts this LinearDensity to another LinearDensity with the unit representation <paramref name="unit" />.
            </summary>
            <returns>A LinearDensity with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.LinearDensity.AsBaseUnit">
            <summary>
                Converts the current value + unit to the base unit.
                This is typically the first step in converting from one unit to another.
            </summary>
            <returns>The value in the base unit representation.</returns>
        </member>
        <member name="M:UnitsNet.LinearDensity.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.LinearDensity.TryParse(System.String,UnitsNet.LinearDensity@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.LinearDensity.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.LinearDensity.ParseInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.LinearDensity.TryParseInternal(System.String,System.IFormatProvider,UnitsNet.LinearDensity@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.LinearDensity.ParseUnitInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.LinearDensity.TryParseUnitInternal(System.String,System.IFormatProvider,UnitsNet.Units.LinearDensityUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.LinearDensity.ToString">
            <summary>
                Get default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.LinearDensity.ToString(UnitsNet.Units.LinearDensityUnit)">
            <summary>
                Get string representation of value and unit. Using current UI culture and two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <returns>String representation.</returns>
        </member>
        <member name="P:UnitsNet.LinearDensity.MaxValue">
            <summary>
            Represents the largest possible value of LinearDensity
            </summary>
        </member>
        <member name="P:UnitsNet.LinearDensity.MinValue">
            <summary>
            Represents the smallest possible value of LinearDensity
            </summary>
        </member>
        <member name="P:UnitsNet.LinearDensity.Type">
            <summary>
                The <see cref="P:UnitsNet.LinearDensity.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.LinearDensity.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.LinearDensity.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="T:UnitsNet.LuminousFlux">
            <summary>
                In photometry, luminous flux or luminous power is the measure of the perceived power of light.
            </summary>
            <summary>
                In photometry, luminous flux or luminous power is the measure of the perceived power of light.
            </summary>
        </member>
        <member name="P:UnitsNet.LuminousFlux.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.LuminousFlux.GetAbbreviation(UnitsNet.Units.LuminousFluxUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.LuminousFlux.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.LuminousFlux.TryParse(System.String,System.IFormatProvider,UnitsNet.LuminousFlux@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.LuminousFlux.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.LuminousFlux.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.LuminousFluxUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.LuminousFlux.ToString(UnitsNet.Units.LuminousFluxUnit,System.IFormatProvider)">
            <summary>
                Get string representation of value and unit. Using two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.LuminousFlux.ToString(UnitsNet.Units.LuminousFluxUnit,System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.LuminousFlux.ToString(UnitsNet.Units.LuminousFluxUnit,System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">Unit representation to use.</param>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
        </member>
        <member name="F:UnitsNet.LuminousFlux._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.LuminousFlux._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.LuminousFlux.Unit">
            <summary>
                The unit this quantity was constructed with -or- <see cref="P:UnitsNet.LuminousFlux.BaseUnit" /> if default ctor was used.
            </summary>
        </member>
        <member name="M:UnitsNet.LuminousFlux.#ctor(System.Double,UnitsNet.Units.LuminousFluxUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="numericValue">The numeric value  to contruct this quantity with.</param>
            <param name="unit">The unit representation to contruct this quantity with.</param>
            <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="P:UnitsNet.LuminousFlux.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.LuminousFlux.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.LuminousFlux.BaseUnit">
            <summary>
                The base unit of LuminousFlux, which is Lumen. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.LuminousFlux.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.LuminousFlux.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.LuminousFlux.Units">
            <summary>
                All units of measurement for the LuminousFlux quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.LuminousFlux.Lumens">
            <summary>
                Get LuminousFlux in Lumens.
            </summary>
        </member>
        <member name="P:UnitsNet.LuminousFlux.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit Lumen.
            </summary>
        </member>
        <member name="M:UnitsNet.LuminousFlux.FromLumens(UnitsNet.QuantityValue)">
            <summary>
                Get LuminousFlux from Lumens.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.LuminousFlux.From(UnitsNet.QuantityValue,UnitsNet.Units.LuminousFluxUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.LuminousFluxUnit" /> to <see cref="T:UnitsNet.LuminousFlux" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>LuminousFlux unit value.</returns>
        </member>
        <member name="M:UnitsNet.LuminousFlux.GetAbbreviation(UnitsNet.Units.LuminousFluxUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.LuminousFlux.Equals(UnitsNet.LuminousFlux,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another LuminousFlux within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.LuminousFlux.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current LuminousFlux.</returns>
        </member>
        <member name="M:UnitsNet.LuminousFlux.As(UnitsNet.Units.LuminousFluxUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.LuminousFlux.ToUnit(UnitsNet.Units.LuminousFluxUnit)">
            <summary>
                Converts this LuminousFlux to another LuminousFlux with the unit representation <paramref name="unit" />.
            </summary>
            <returns>A LuminousFlux with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.LuminousFlux.AsBaseUnit">
            <summary>
                Converts the current value + unit to the base unit.
                This is typically the first step in converting from one unit to another.
            </summary>
            <returns>The value in the base unit representation.</returns>
        </member>
        <member name="M:UnitsNet.LuminousFlux.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.LuminousFlux.TryParse(System.String,UnitsNet.LuminousFlux@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.LuminousFlux.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.LuminousFlux.ParseInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.LuminousFlux.TryParseInternal(System.String,System.IFormatProvider,UnitsNet.LuminousFlux@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.LuminousFlux.ParseUnitInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.LuminousFlux.TryParseUnitInternal(System.String,System.IFormatProvider,UnitsNet.Units.LuminousFluxUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.LuminousFlux.ToString">
            <summary>
                Get default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.LuminousFlux.ToString(UnitsNet.Units.LuminousFluxUnit)">
            <summary>
                Get string representation of value and unit. Using current UI culture and two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <returns>String representation.</returns>
        </member>
        <member name="P:UnitsNet.LuminousFlux.MaxValue">
            <summary>
            Represents the largest possible value of LuminousFlux
            </summary>
        </member>
        <member name="P:UnitsNet.LuminousFlux.MinValue">
            <summary>
            Represents the smallest possible value of LuminousFlux
            </summary>
        </member>
        <member name="P:UnitsNet.LuminousFlux.Type">
            <summary>
                The <see cref="P:UnitsNet.LuminousFlux.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.LuminousFlux.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.LuminousFlux.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="T:UnitsNet.LuminousIntensity">
            <summary>
                In photometry, luminous intensity is a measure of the wavelength-weighted power emitted by a light source in a particular direction per unit solid angle, based on the luminosity function, a standardized model of the sensitivity of the human eye.
            </summary>
            <summary>
                In photometry, luminous intensity is a measure of the wavelength-weighted power emitted by a light source in a particular direction per unit solid angle, based on the luminosity function, a standardized model of the sensitivity of the human eye.
            </summary>
        </member>
        <member name="P:UnitsNet.LuminousIntensity.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.LuminousIntensity.GetAbbreviation(UnitsNet.Units.LuminousIntensityUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.LuminousIntensity.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.LuminousIntensity.TryParse(System.String,System.IFormatProvider,UnitsNet.LuminousIntensity@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.LuminousIntensity.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.LuminousIntensity.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.LuminousIntensityUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.LuminousIntensity.ToString(UnitsNet.Units.LuminousIntensityUnit,System.IFormatProvider)">
            <summary>
                Get string representation of value and unit. Using two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.LuminousIntensity.ToString(UnitsNet.Units.LuminousIntensityUnit,System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.LuminousIntensity.ToString(UnitsNet.Units.LuminousIntensityUnit,System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">Unit representation to use.</param>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
        </member>
        <member name="F:UnitsNet.LuminousIntensity._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.LuminousIntensity._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.LuminousIntensity.Unit">
            <summary>
                The unit this quantity was constructed with -or- <see cref="P:UnitsNet.LuminousIntensity.BaseUnit" /> if default ctor was used.
            </summary>
        </member>
        <member name="M:UnitsNet.LuminousIntensity.#ctor(System.Double,UnitsNet.Units.LuminousIntensityUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="numericValue">The numeric value  to contruct this quantity with.</param>
            <param name="unit">The unit representation to contruct this quantity with.</param>
            <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="P:UnitsNet.LuminousIntensity.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.LuminousIntensity.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.LuminousIntensity.BaseUnit">
            <summary>
                The base unit of LuminousIntensity, which is Candela. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.LuminousIntensity.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.LuminousIntensity.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.LuminousIntensity.Units">
            <summary>
                All units of measurement for the LuminousIntensity quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.LuminousIntensity.Candela">
            <summary>
                Get LuminousIntensity in Candela.
            </summary>
        </member>
        <member name="P:UnitsNet.LuminousIntensity.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit Candela.
            </summary>
        </member>
        <member name="M:UnitsNet.LuminousIntensity.FromCandela(UnitsNet.QuantityValue)">
            <summary>
                Get LuminousIntensity from Candela.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.LuminousIntensity.From(UnitsNet.QuantityValue,UnitsNet.Units.LuminousIntensityUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.LuminousIntensityUnit" /> to <see cref="T:UnitsNet.LuminousIntensity" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>LuminousIntensity unit value.</returns>
        </member>
        <member name="M:UnitsNet.LuminousIntensity.GetAbbreviation(UnitsNet.Units.LuminousIntensityUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.LuminousIntensity.Equals(UnitsNet.LuminousIntensity,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another LuminousIntensity within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.LuminousIntensity.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current LuminousIntensity.</returns>
        </member>
        <member name="M:UnitsNet.LuminousIntensity.As(UnitsNet.Units.LuminousIntensityUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.LuminousIntensity.ToUnit(UnitsNet.Units.LuminousIntensityUnit)">
            <summary>
                Converts this LuminousIntensity to another LuminousIntensity with the unit representation <paramref name="unit" />.
            </summary>
            <returns>A LuminousIntensity with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.LuminousIntensity.AsBaseUnit">
            <summary>
                Converts the current value + unit to the base unit.
                This is typically the first step in converting from one unit to another.
            </summary>
            <returns>The value in the base unit representation.</returns>
        </member>
        <member name="M:UnitsNet.LuminousIntensity.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.LuminousIntensity.TryParse(System.String,UnitsNet.LuminousIntensity@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.LuminousIntensity.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.LuminousIntensity.ParseInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.LuminousIntensity.TryParseInternal(System.String,System.IFormatProvider,UnitsNet.LuminousIntensity@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.LuminousIntensity.ParseUnitInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.LuminousIntensity.TryParseUnitInternal(System.String,System.IFormatProvider,UnitsNet.Units.LuminousIntensityUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.LuminousIntensity.ToString">
            <summary>
                Get default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.LuminousIntensity.ToString(UnitsNet.Units.LuminousIntensityUnit)">
            <summary>
                Get string representation of value and unit. Using current UI culture and two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <returns>String representation.</returns>
        </member>
        <member name="P:UnitsNet.LuminousIntensity.MaxValue">
            <summary>
            Represents the largest possible value of LuminousIntensity
            </summary>
        </member>
        <member name="P:UnitsNet.LuminousIntensity.MinValue">
            <summary>
            Represents the smallest possible value of LuminousIntensity
            </summary>
        </member>
        <member name="P:UnitsNet.LuminousIntensity.Type">
            <summary>
                The <see cref="P:UnitsNet.LuminousIntensity.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.LuminousIntensity.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.LuminousIntensity.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="T:UnitsNet.MagneticField">
            <summary>
                A magnetic field is a force field that is created by moving electric charges (electric currents) and magnetic dipoles, and exerts a force on other nearby moving charges and magnetic dipoles.
            </summary>
            <summary>
                A magnetic field is a force field that is created by moving electric charges (electric currents) and magnetic dipoles, and exerts a force on other nearby moving charges and magnetic dipoles.
            </summary>
        </member>
        <member name="P:UnitsNet.MagneticField.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.MagneticField.GetAbbreviation(UnitsNet.Units.MagneticFieldUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.MagneticField.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.MagneticField.TryParse(System.String,System.IFormatProvider,UnitsNet.MagneticField@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.MagneticField.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.MagneticField.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.MagneticFieldUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.MagneticField.ToString(UnitsNet.Units.MagneticFieldUnit,System.IFormatProvider)">
            <summary>
                Get string representation of value and unit. Using two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.MagneticField.ToString(UnitsNet.Units.MagneticFieldUnit,System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.MagneticField.ToString(UnitsNet.Units.MagneticFieldUnit,System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">Unit representation to use.</param>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
        </member>
        <member name="F:UnitsNet.MagneticField._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.MagneticField._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.MagneticField.Unit">
            <summary>
                The unit this quantity was constructed with -or- <see cref="P:UnitsNet.MagneticField.BaseUnit" /> if default ctor was used.
            </summary>
        </member>
        <member name="M:UnitsNet.MagneticField.#ctor(System.Double,UnitsNet.Units.MagneticFieldUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="numericValue">The numeric value  to contruct this quantity with.</param>
            <param name="unit">The unit representation to contruct this quantity with.</param>
            <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="P:UnitsNet.MagneticField.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.MagneticField.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.MagneticField.BaseUnit">
            <summary>
                The base unit of MagneticField, which is Tesla. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.MagneticField.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.MagneticField.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.MagneticField.Units">
            <summary>
                All units of measurement for the MagneticField quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.MagneticField.Teslas">
            <summary>
                Get MagneticField in Teslas.
            </summary>
        </member>
        <member name="P:UnitsNet.MagneticField.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit Tesla.
            </summary>
        </member>
        <member name="M:UnitsNet.MagneticField.FromTeslas(UnitsNet.QuantityValue)">
            <summary>
                Get MagneticField from Teslas.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MagneticField.From(UnitsNet.QuantityValue,UnitsNet.Units.MagneticFieldUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.MagneticFieldUnit" /> to <see cref="T:UnitsNet.MagneticField" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>MagneticField unit value.</returns>
        </member>
        <member name="M:UnitsNet.MagneticField.GetAbbreviation(UnitsNet.Units.MagneticFieldUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.MagneticField.Equals(UnitsNet.MagneticField,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another MagneticField within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.MagneticField.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current MagneticField.</returns>
        </member>
        <member name="M:UnitsNet.MagneticField.As(UnitsNet.Units.MagneticFieldUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.MagneticField.ToUnit(UnitsNet.Units.MagneticFieldUnit)">
            <summary>
                Converts this MagneticField to another MagneticField with the unit representation <paramref name="unit" />.
            </summary>
            <returns>A MagneticField with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.MagneticField.AsBaseUnit">
            <summary>
                Converts the current value + unit to the base unit.
                This is typically the first step in converting from one unit to another.
            </summary>
            <returns>The value in the base unit representation.</returns>
        </member>
        <member name="M:UnitsNet.MagneticField.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.MagneticField.TryParse(System.String,UnitsNet.MagneticField@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.MagneticField.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.MagneticField.ParseInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.MagneticField.TryParseInternal(System.String,System.IFormatProvider,UnitsNet.MagneticField@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.MagneticField.ParseUnitInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.MagneticField.TryParseUnitInternal(System.String,System.IFormatProvider,UnitsNet.Units.MagneticFieldUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.MagneticField.ToString">
            <summary>
                Get default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.MagneticField.ToString(UnitsNet.Units.MagneticFieldUnit)">
            <summary>
                Get string representation of value and unit. Using current UI culture and two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <returns>String representation.</returns>
        </member>
        <member name="P:UnitsNet.MagneticField.MaxValue">
            <summary>
            Represents the largest possible value of MagneticField
            </summary>
        </member>
        <member name="P:UnitsNet.MagneticField.MinValue">
            <summary>
            Represents the smallest possible value of MagneticField
            </summary>
        </member>
        <member name="P:UnitsNet.MagneticField.Type">
            <summary>
                The <see cref="P:UnitsNet.MagneticField.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.MagneticField.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.MagneticField.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="T:UnitsNet.MagneticFlux">
            <summary>
                In physics, specifically electromagnetism, the magnetic flux through a surface is the surface integral of the normal component of the magnetic field B passing through that surface.
            </summary>
            <summary>
                In physics, specifically electromagnetism, the magnetic flux through a surface is the surface integral of the normal component of the magnetic field B passing through that surface.
            </summary>
        </member>
        <member name="P:UnitsNet.MagneticFlux.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.MagneticFlux.GetAbbreviation(UnitsNet.Units.MagneticFluxUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.MagneticFlux.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.MagneticFlux.TryParse(System.String,System.IFormatProvider,UnitsNet.MagneticFlux@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.MagneticFlux.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.MagneticFlux.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.MagneticFluxUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.MagneticFlux.ToString(UnitsNet.Units.MagneticFluxUnit,System.IFormatProvider)">
            <summary>
                Get string representation of value and unit. Using two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.MagneticFlux.ToString(UnitsNet.Units.MagneticFluxUnit,System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.MagneticFlux.ToString(UnitsNet.Units.MagneticFluxUnit,System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">Unit representation to use.</param>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
        </member>
        <member name="F:UnitsNet.MagneticFlux._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.MagneticFlux._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.MagneticFlux.Unit">
            <summary>
                The unit this quantity was constructed with -or- <see cref="P:UnitsNet.MagneticFlux.BaseUnit" /> if default ctor was used.
            </summary>
        </member>
        <member name="M:UnitsNet.MagneticFlux.#ctor(System.Double,UnitsNet.Units.MagneticFluxUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="numericValue">The numeric value  to contruct this quantity with.</param>
            <param name="unit">The unit representation to contruct this quantity with.</param>
            <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="P:UnitsNet.MagneticFlux.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.MagneticFlux.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.MagneticFlux.BaseUnit">
            <summary>
                The base unit of MagneticFlux, which is Weber. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.MagneticFlux.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.MagneticFlux.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.MagneticFlux.Units">
            <summary>
                All units of measurement for the MagneticFlux quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.MagneticFlux.Webers">
            <summary>
                Get MagneticFlux in Webers.
            </summary>
        </member>
        <member name="P:UnitsNet.MagneticFlux.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit Weber.
            </summary>
        </member>
        <member name="M:UnitsNet.MagneticFlux.FromWebers(UnitsNet.QuantityValue)">
            <summary>
                Get MagneticFlux from Webers.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MagneticFlux.From(UnitsNet.QuantityValue,UnitsNet.Units.MagneticFluxUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.MagneticFluxUnit" /> to <see cref="T:UnitsNet.MagneticFlux" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>MagneticFlux unit value.</returns>
        </member>
        <member name="M:UnitsNet.MagneticFlux.GetAbbreviation(UnitsNet.Units.MagneticFluxUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.MagneticFlux.Equals(UnitsNet.MagneticFlux,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another MagneticFlux within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.MagneticFlux.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current MagneticFlux.</returns>
        </member>
        <member name="M:UnitsNet.MagneticFlux.As(UnitsNet.Units.MagneticFluxUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.MagneticFlux.ToUnit(UnitsNet.Units.MagneticFluxUnit)">
            <summary>
                Converts this MagneticFlux to another MagneticFlux with the unit representation <paramref name="unit" />.
            </summary>
            <returns>A MagneticFlux with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.MagneticFlux.AsBaseUnit">
            <summary>
                Converts the current value + unit to the base unit.
                This is typically the first step in converting from one unit to another.
            </summary>
            <returns>The value in the base unit representation.</returns>
        </member>
        <member name="M:UnitsNet.MagneticFlux.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.MagneticFlux.TryParse(System.String,UnitsNet.MagneticFlux@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.MagneticFlux.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.MagneticFlux.ParseInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.MagneticFlux.TryParseInternal(System.String,System.IFormatProvider,UnitsNet.MagneticFlux@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.MagneticFlux.ParseUnitInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.MagneticFlux.TryParseUnitInternal(System.String,System.IFormatProvider,UnitsNet.Units.MagneticFluxUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.MagneticFlux.ToString">
            <summary>
                Get default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.MagneticFlux.ToString(UnitsNet.Units.MagneticFluxUnit)">
            <summary>
                Get string representation of value and unit. Using current UI culture and two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <returns>String representation.</returns>
        </member>
        <member name="P:UnitsNet.MagneticFlux.MaxValue">
            <summary>
            Represents the largest possible value of MagneticFlux
            </summary>
        </member>
        <member name="P:UnitsNet.MagneticFlux.MinValue">
            <summary>
            Represents the smallest possible value of MagneticFlux
            </summary>
        </member>
        <member name="P:UnitsNet.MagneticFlux.Type">
            <summary>
                The <see cref="P:UnitsNet.MagneticFlux.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.MagneticFlux.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.MagneticFlux.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="T:UnitsNet.Magnetization">
            <summary>
                In classical electromagnetism, magnetization is the vector field that expresses the density of permanent or induced magnetic dipole moments in a magnetic material.
            </summary>
            <summary>
                In classical electromagnetism, magnetization is the vector field that expresses the density of permanent or induced magnetic dipole moments in a magnetic material.
            </summary>
        </member>
        <member name="P:UnitsNet.Magnetization.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.Magnetization.GetAbbreviation(UnitsNet.Units.MagnetizationUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.Magnetization.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Magnetization.TryParse(System.String,System.IFormatProvider,UnitsNet.Magnetization@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Magnetization.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Magnetization.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.MagnetizationUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Magnetization.ToString(UnitsNet.Units.MagnetizationUnit,System.IFormatProvider)">
            <summary>
                Get string representation of value and unit. Using two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Magnetization.ToString(UnitsNet.Units.MagnetizationUnit,System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Magnetization.ToString(UnitsNet.Units.MagnetizationUnit,System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">Unit representation to use.</param>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
        </member>
        <member name="F:UnitsNet.Magnetization._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.Magnetization._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.Magnetization.Unit">
            <summary>
                The unit this quantity was constructed with -or- <see cref="P:UnitsNet.Magnetization.BaseUnit" /> if default ctor was used.
            </summary>
        </member>
        <member name="M:UnitsNet.Magnetization.#ctor(System.Double,UnitsNet.Units.MagnetizationUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="numericValue">The numeric value  to contruct this quantity with.</param>
            <param name="unit">The unit representation to contruct this quantity with.</param>
            <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="P:UnitsNet.Magnetization.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.Magnetization.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Magnetization.BaseUnit">
            <summary>
                The base unit of Magnetization, which is AmperePerMeter. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.Magnetization.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.Magnetization.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Magnetization.Units">
            <summary>
                All units of measurement for the Magnetization quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Magnetization.AmperesPerMeter">
            <summary>
                Get Magnetization in AmperesPerMeter.
            </summary>
        </member>
        <member name="P:UnitsNet.Magnetization.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit AmperePerMeter.
            </summary>
        </member>
        <member name="M:UnitsNet.Magnetization.FromAmperesPerMeter(UnitsNet.QuantityValue)">
            <summary>
                Get Magnetization from AmperesPerMeter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Magnetization.From(UnitsNet.QuantityValue,UnitsNet.Units.MagnetizationUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.MagnetizationUnit" /> to <see cref="T:UnitsNet.Magnetization" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>Magnetization unit value.</returns>
        </member>
        <member name="M:UnitsNet.Magnetization.GetAbbreviation(UnitsNet.Units.MagnetizationUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.Magnetization.Equals(UnitsNet.Magnetization,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another Magnetization within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.Magnetization.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current Magnetization.</returns>
        </member>
        <member name="M:UnitsNet.Magnetization.As(UnitsNet.Units.MagnetizationUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Magnetization.ToUnit(UnitsNet.Units.MagnetizationUnit)">
            <summary>
                Converts this Magnetization to another Magnetization with the unit representation <paramref name="unit" />.
            </summary>
            <returns>A Magnetization with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Magnetization.AsBaseUnit">
            <summary>
                Converts the current value + unit to the base unit.
                This is typically the first step in converting from one unit to another.
            </summary>
            <returns>The value in the base unit representation.</returns>
        </member>
        <member name="M:UnitsNet.Magnetization.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Magnetization.TryParse(System.String,UnitsNet.Magnetization@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Magnetization.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Magnetization.ParseInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Magnetization.TryParseInternal(System.String,System.IFormatProvider,UnitsNet.Magnetization@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Magnetization.ParseUnitInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Magnetization.TryParseUnitInternal(System.String,System.IFormatProvider,UnitsNet.Units.MagnetizationUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Magnetization.ToString">
            <summary>
                Get default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Magnetization.ToString(UnitsNet.Units.MagnetizationUnit)">
            <summary>
                Get string representation of value and unit. Using current UI culture and two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <returns>String representation.</returns>
        </member>
        <member name="P:UnitsNet.Magnetization.MaxValue">
            <summary>
            Represents the largest possible value of Magnetization
            </summary>
        </member>
        <member name="P:UnitsNet.Magnetization.MinValue">
            <summary>
            Represents the smallest possible value of Magnetization
            </summary>
        </member>
        <member name="P:UnitsNet.Magnetization.Type">
            <summary>
                The <see cref="P:UnitsNet.Magnetization.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Magnetization.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.Magnetization.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="T:UnitsNet.MassMomentOfInertia">
            <summary>
                A property of body reflects how its mass is distributed with regard to an axis.
            </summary>
            <summary>
                A property of body reflects how its mass is distributed with regard to an axis.
            </summary>
        </member>
        <member name="P:UnitsNet.MassMomentOfInertia.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.GetAbbreviation(UnitsNet.Units.MassMomentOfInertiaUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.TryParse(System.String,System.IFormatProvider,UnitsNet.MassMomentOfInertia@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.MassMomentOfInertiaUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.ToString(UnitsNet.Units.MassMomentOfInertiaUnit,System.IFormatProvider)">
            <summary>
                Get string representation of value and unit. Using two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.ToString(UnitsNet.Units.MassMomentOfInertiaUnit,System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.ToString(UnitsNet.Units.MassMomentOfInertiaUnit,System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">Unit representation to use.</param>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
        </member>
        <member name="F:UnitsNet.MassMomentOfInertia._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.MassMomentOfInertia._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.MassMomentOfInertia.Unit">
            <summary>
                The unit this quantity was constructed with -or- <see cref="P:UnitsNet.MassMomentOfInertia.BaseUnit" /> if default ctor was used.
            </summary>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.#ctor(System.Double,UnitsNet.Units.MassMomentOfInertiaUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="numericValue">The numeric value  to contruct this quantity with.</param>
            <param name="unit">The unit representation to contruct this quantity with.</param>
            <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="P:UnitsNet.MassMomentOfInertia.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.MassMomentOfInertia.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.MassMomentOfInertia.BaseUnit">
            <summary>
                The base unit of MassMomentOfInertia, which is KilogramSquareMeter. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.MassMomentOfInertia.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.MassMomentOfInertia.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.MassMomentOfInertia.Units">
            <summary>
                All units of measurement for the MassMomentOfInertia quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.MassMomentOfInertia.GramSquareCentimeters">
            <summary>
                Get MassMomentOfInertia in GramSquareCentimeters.
            </summary>
        </member>
        <member name="P:UnitsNet.MassMomentOfInertia.GramSquareDecimeters">
            <summary>
                Get MassMomentOfInertia in GramSquareDecimeters.
            </summary>
        </member>
        <member name="P:UnitsNet.MassMomentOfInertia.GramSquareMeters">
            <summary>
                Get MassMomentOfInertia in GramSquareMeters.
            </summary>
        </member>
        <member name="P:UnitsNet.MassMomentOfInertia.GramSquareMillimeters">
            <summary>
                Get MassMomentOfInertia in GramSquareMillimeters.
            </summary>
        </member>
        <member name="P:UnitsNet.MassMomentOfInertia.KilogramSquareCentimeters">
            <summary>
                Get MassMomentOfInertia in KilogramSquareCentimeters.
            </summary>
        </member>
        <member name="P:UnitsNet.MassMomentOfInertia.KilogramSquareDecimeters">
            <summary>
                Get MassMomentOfInertia in KilogramSquareDecimeters.
            </summary>
        </member>
        <member name="P:UnitsNet.MassMomentOfInertia.KilogramSquareMeters">
            <summary>
                Get MassMomentOfInertia in KilogramSquareMeters.
            </summary>
        </member>
        <member name="P:UnitsNet.MassMomentOfInertia.KilogramSquareMillimeters">
            <summary>
                Get MassMomentOfInertia in KilogramSquareMillimeters.
            </summary>
        </member>
        <member name="P:UnitsNet.MassMomentOfInertia.KilotonneSquareCentimeters">
            <summary>
                Get MassMomentOfInertia in KilotonneSquareCentimeters.
            </summary>
        </member>
        <member name="P:UnitsNet.MassMomentOfInertia.KilotonneSquareDecimeters">
            <summary>
                Get MassMomentOfInertia in KilotonneSquareDecimeters.
            </summary>
        </member>
        <member name="P:UnitsNet.MassMomentOfInertia.KilotonneSquareMeters">
            <summary>
                Get MassMomentOfInertia in KilotonneSquareMeters.
            </summary>
        </member>
        <member name="P:UnitsNet.MassMomentOfInertia.KilotonneSquareMilimeters">
            <summary>
                Get MassMomentOfInertia in KilotonneSquareMilimeters.
            </summary>
        </member>
        <member name="P:UnitsNet.MassMomentOfInertia.MegatonneSquareCentimeters">
            <summary>
                Get MassMomentOfInertia in MegatonneSquareCentimeters.
            </summary>
        </member>
        <member name="P:UnitsNet.MassMomentOfInertia.MegatonneSquareDecimeters">
            <summary>
                Get MassMomentOfInertia in MegatonneSquareDecimeters.
            </summary>
        </member>
        <member name="P:UnitsNet.MassMomentOfInertia.MegatonneSquareMeters">
            <summary>
                Get MassMomentOfInertia in MegatonneSquareMeters.
            </summary>
        </member>
        <member name="P:UnitsNet.MassMomentOfInertia.MegatonneSquareMilimeters">
            <summary>
                Get MassMomentOfInertia in MegatonneSquareMilimeters.
            </summary>
        </member>
        <member name="P:UnitsNet.MassMomentOfInertia.MilligramSquareCentimeters">
            <summary>
                Get MassMomentOfInertia in MilligramSquareCentimeters.
            </summary>
        </member>
        <member name="P:UnitsNet.MassMomentOfInertia.MilligramSquareDecimeters">
            <summary>
                Get MassMomentOfInertia in MilligramSquareDecimeters.
            </summary>
        </member>
        <member name="P:UnitsNet.MassMomentOfInertia.MilligramSquareMeters">
            <summary>
                Get MassMomentOfInertia in MilligramSquareMeters.
            </summary>
        </member>
        <member name="P:UnitsNet.MassMomentOfInertia.MilligramSquareMillimeters">
            <summary>
                Get MassMomentOfInertia in MilligramSquareMillimeters.
            </summary>
        </member>
        <member name="P:UnitsNet.MassMomentOfInertia.PoundSquareFeet">
            <summary>
                Get MassMomentOfInertia in PoundSquareFeet.
            </summary>
        </member>
        <member name="P:UnitsNet.MassMomentOfInertia.PoundSquareInches">
            <summary>
                Get MassMomentOfInertia in PoundSquareInches.
            </summary>
        </member>
        <member name="P:UnitsNet.MassMomentOfInertia.SlugSquareFeet">
            <summary>
                Get MassMomentOfInertia in SlugSquareFeet.
            </summary>
        </member>
        <member name="P:UnitsNet.MassMomentOfInertia.SlugSquareInches">
            <summary>
                Get MassMomentOfInertia in SlugSquareInches.
            </summary>
        </member>
        <member name="P:UnitsNet.MassMomentOfInertia.TonneSquareCentimeters">
            <summary>
                Get MassMomentOfInertia in TonneSquareCentimeters.
            </summary>
        </member>
        <member name="P:UnitsNet.MassMomentOfInertia.TonneSquareDecimeters">
            <summary>
                Get MassMomentOfInertia in TonneSquareDecimeters.
            </summary>
        </member>
        <member name="P:UnitsNet.MassMomentOfInertia.TonneSquareMeters">
            <summary>
                Get MassMomentOfInertia in TonneSquareMeters.
            </summary>
        </member>
        <member name="P:UnitsNet.MassMomentOfInertia.TonneSquareMilimeters">
            <summary>
                Get MassMomentOfInertia in TonneSquareMilimeters.
            </summary>
        </member>
        <member name="P:UnitsNet.MassMomentOfInertia.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit KilogramSquareMeter.
            </summary>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.FromGramSquareCentimeters(UnitsNet.QuantityValue)">
            <summary>
                Get MassMomentOfInertia from GramSquareCentimeters.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.FromGramSquareDecimeters(UnitsNet.QuantityValue)">
            <summary>
                Get MassMomentOfInertia from GramSquareDecimeters.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.FromGramSquareMeters(UnitsNet.QuantityValue)">
            <summary>
                Get MassMomentOfInertia from GramSquareMeters.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.FromGramSquareMillimeters(UnitsNet.QuantityValue)">
            <summary>
                Get MassMomentOfInertia from GramSquareMillimeters.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.FromKilogramSquareCentimeters(UnitsNet.QuantityValue)">
            <summary>
                Get MassMomentOfInertia from KilogramSquareCentimeters.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.FromKilogramSquareDecimeters(UnitsNet.QuantityValue)">
            <summary>
                Get MassMomentOfInertia from KilogramSquareDecimeters.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.FromKilogramSquareMeters(UnitsNet.QuantityValue)">
            <summary>
                Get MassMomentOfInertia from KilogramSquareMeters.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.FromKilogramSquareMillimeters(UnitsNet.QuantityValue)">
            <summary>
                Get MassMomentOfInertia from KilogramSquareMillimeters.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.FromKilotonneSquareCentimeters(UnitsNet.QuantityValue)">
            <summary>
                Get MassMomentOfInertia from KilotonneSquareCentimeters.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.FromKilotonneSquareDecimeters(UnitsNet.QuantityValue)">
            <summary>
                Get MassMomentOfInertia from KilotonneSquareDecimeters.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.FromKilotonneSquareMeters(UnitsNet.QuantityValue)">
            <summary>
                Get MassMomentOfInertia from KilotonneSquareMeters.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.FromKilotonneSquareMilimeters(UnitsNet.QuantityValue)">
            <summary>
                Get MassMomentOfInertia from KilotonneSquareMilimeters.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.FromMegatonneSquareCentimeters(UnitsNet.QuantityValue)">
            <summary>
                Get MassMomentOfInertia from MegatonneSquareCentimeters.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.FromMegatonneSquareDecimeters(UnitsNet.QuantityValue)">
            <summary>
                Get MassMomentOfInertia from MegatonneSquareDecimeters.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.FromMegatonneSquareMeters(UnitsNet.QuantityValue)">
            <summary>
                Get MassMomentOfInertia from MegatonneSquareMeters.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.FromMegatonneSquareMilimeters(UnitsNet.QuantityValue)">
            <summary>
                Get MassMomentOfInertia from MegatonneSquareMilimeters.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.FromMilligramSquareCentimeters(UnitsNet.QuantityValue)">
            <summary>
                Get MassMomentOfInertia from MilligramSquareCentimeters.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.FromMilligramSquareDecimeters(UnitsNet.QuantityValue)">
            <summary>
                Get MassMomentOfInertia from MilligramSquareDecimeters.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.FromMilligramSquareMeters(UnitsNet.QuantityValue)">
            <summary>
                Get MassMomentOfInertia from MilligramSquareMeters.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.FromMilligramSquareMillimeters(UnitsNet.QuantityValue)">
            <summary>
                Get MassMomentOfInertia from MilligramSquareMillimeters.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.FromPoundSquareFeet(UnitsNet.QuantityValue)">
            <summary>
                Get MassMomentOfInertia from PoundSquareFeet.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.FromPoundSquareInches(UnitsNet.QuantityValue)">
            <summary>
                Get MassMomentOfInertia from PoundSquareInches.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.FromSlugSquareFeet(UnitsNet.QuantityValue)">
            <summary>
                Get MassMomentOfInertia from SlugSquareFeet.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.FromSlugSquareInches(UnitsNet.QuantityValue)">
            <summary>
                Get MassMomentOfInertia from SlugSquareInches.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.FromTonneSquareCentimeters(UnitsNet.QuantityValue)">
            <summary>
                Get MassMomentOfInertia from TonneSquareCentimeters.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.FromTonneSquareDecimeters(UnitsNet.QuantityValue)">
            <summary>
                Get MassMomentOfInertia from TonneSquareDecimeters.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.FromTonneSquareMeters(UnitsNet.QuantityValue)">
            <summary>
                Get MassMomentOfInertia from TonneSquareMeters.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.FromTonneSquareMilimeters(UnitsNet.QuantityValue)">
            <summary>
                Get MassMomentOfInertia from TonneSquareMilimeters.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.From(UnitsNet.QuantityValue,UnitsNet.Units.MassMomentOfInertiaUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.MassMomentOfInertiaUnit" /> to <see cref="T:UnitsNet.MassMomentOfInertia" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>MassMomentOfInertia unit value.</returns>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.GetAbbreviation(UnitsNet.Units.MassMomentOfInertiaUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.Equals(UnitsNet.MassMomentOfInertia,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another MassMomentOfInertia within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current MassMomentOfInertia.</returns>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.As(UnitsNet.Units.MassMomentOfInertiaUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.ToUnit(UnitsNet.Units.MassMomentOfInertiaUnit)">
            <summary>
                Converts this MassMomentOfInertia to another MassMomentOfInertia with the unit representation <paramref name="unit" />.
            </summary>
            <returns>A MassMomentOfInertia with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.AsBaseUnit">
            <summary>
                Converts the current value + unit to the base unit.
                This is typically the first step in converting from one unit to another.
            </summary>
            <returns>The value in the base unit representation.</returns>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.TryParse(System.String,UnitsNet.MassMomentOfInertia@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.ParseInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.TryParseInternal(System.String,System.IFormatProvider,UnitsNet.MassMomentOfInertia@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.ParseUnitInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.TryParseUnitInternal(System.String,System.IFormatProvider,UnitsNet.Units.MassMomentOfInertiaUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.ToString">
            <summary>
                Get default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.MassMomentOfInertia.ToString(UnitsNet.Units.MassMomentOfInertiaUnit)">
            <summary>
                Get string representation of value and unit. Using current UI culture and two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <returns>String representation.</returns>
        </member>
        <member name="P:UnitsNet.MassMomentOfInertia.MaxValue">
            <summary>
            Represents the largest possible value of MassMomentOfInertia
            </summary>
        </member>
        <member name="P:UnitsNet.MassMomentOfInertia.MinValue">
            <summary>
            Represents the smallest possible value of MassMomentOfInertia
            </summary>
        </member>
        <member name="P:UnitsNet.MassMomentOfInertia.Type">
            <summary>
                The <see cref="P:UnitsNet.MassMomentOfInertia.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.MassMomentOfInertia.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.MassMomentOfInertia.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="T:UnitsNet.MolarEnergy">
            <summary>
                Molar energy is the amount of energy stored in 1 mole of a substance.
            </summary>
            <summary>
                Molar energy is the amount of energy stored in 1 mole of a substance.
            </summary>
        </member>
        <member name="P:UnitsNet.MolarEnergy.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.MolarEnergy.GetAbbreviation(UnitsNet.Units.MolarEnergyUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.MolarEnergy.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.MolarEnergy.TryParse(System.String,System.IFormatProvider,UnitsNet.MolarEnergy@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.MolarEnergy.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.MolarEnergy.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.MolarEnergyUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.MolarEnergy.ToString(UnitsNet.Units.MolarEnergyUnit,System.IFormatProvider)">
            <summary>
                Get string representation of value and unit. Using two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.MolarEnergy.ToString(UnitsNet.Units.MolarEnergyUnit,System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.MolarEnergy.ToString(UnitsNet.Units.MolarEnergyUnit,System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">Unit representation to use.</param>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
        </member>
        <member name="F:UnitsNet.MolarEnergy._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.MolarEnergy._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.MolarEnergy.Unit">
            <summary>
                The unit this quantity was constructed with -or- <see cref="P:UnitsNet.MolarEnergy.BaseUnit" /> if default ctor was used.
            </summary>
        </member>
        <member name="M:UnitsNet.MolarEnergy.#ctor(System.Double,UnitsNet.Units.MolarEnergyUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="numericValue">The numeric value  to contruct this quantity with.</param>
            <param name="unit">The unit representation to contruct this quantity with.</param>
            <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="P:UnitsNet.MolarEnergy.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.MolarEnergy.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.MolarEnergy.BaseUnit">
            <summary>
                The base unit of MolarEnergy, which is JoulePerMole. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.MolarEnergy.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.MolarEnergy.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.MolarEnergy.Units">
            <summary>
                All units of measurement for the MolarEnergy quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.MolarEnergy.JoulesPerMole">
            <summary>
                Get MolarEnergy in JoulesPerMole.
            </summary>
        </member>
        <member name="P:UnitsNet.MolarEnergy.KilojoulesPerMole">
            <summary>
                Get MolarEnergy in KilojoulesPerMole.
            </summary>
        </member>
        <member name="P:UnitsNet.MolarEnergy.MegajoulesPerMole">
            <summary>
                Get MolarEnergy in MegajoulesPerMole.
            </summary>
        </member>
        <member name="P:UnitsNet.MolarEnergy.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit JoulePerMole.
            </summary>
        </member>
        <member name="M:UnitsNet.MolarEnergy.FromJoulesPerMole(UnitsNet.QuantityValue)">
            <summary>
                Get MolarEnergy from JoulesPerMole.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MolarEnergy.FromKilojoulesPerMole(UnitsNet.QuantityValue)">
            <summary>
                Get MolarEnergy from KilojoulesPerMole.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MolarEnergy.FromMegajoulesPerMole(UnitsNet.QuantityValue)">
            <summary>
                Get MolarEnergy from MegajoulesPerMole.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MolarEnergy.From(UnitsNet.QuantityValue,UnitsNet.Units.MolarEnergyUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.MolarEnergyUnit" /> to <see cref="T:UnitsNet.MolarEnergy" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>MolarEnergy unit value.</returns>
        </member>
        <member name="M:UnitsNet.MolarEnergy.GetAbbreviation(UnitsNet.Units.MolarEnergyUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.MolarEnergy.Equals(UnitsNet.MolarEnergy,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another MolarEnergy within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.MolarEnergy.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current MolarEnergy.</returns>
        </member>
        <member name="M:UnitsNet.MolarEnergy.As(UnitsNet.Units.MolarEnergyUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.MolarEnergy.ToUnit(UnitsNet.Units.MolarEnergyUnit)">
            <summary>
                Converts this MolarEnergy to another MolarEnergy with the unit representation <paramref name="unit" />.
            </summary>
            <returns>A MolarEnergy with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.MolarEnergy.AsBaseUnit">
            <summary>
                Converts the current value + unit to the base unit.
                This is typically the first step in converting from one unit to another.
            </summary>
            <returns>The value in the base unit representation.</returns>
        </member>
        <member name="M:UnitsNet.MolarEnergy.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.MolarEnergy.TryParse(System.String,UnitsNet.MolarEnergy@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.MolarEnergy.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.MolarEnergy.ParseInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.MolarEnergy.TryParseInternal(System.String,System.IFormatProvider,UnitsNet.MolarEnergy@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.MolarEnergy.ParseUnitInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.MolarEnergy.TryParseUnitInternal(System.String,System.IFormatProvider,UnitsNet.Units.MolarEnergyUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.MolarEnergy.ToString">
            <summary>
                Get default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.MolarEnergy.ToString(UnitsNet.Units.MolarEnergyUnit)">
            <summary>
                Get string representation of value and unit. Using current UI culture and two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <returns>String representation.</returns>
        </member>
        <member name="P:UnitsNet.MolarEnergy.MaxValue">
            <summary>
            Represents the largest possible value of MolarEnergy
            </summary>
        </member>
        <member name="P:UnitsNet.MolarEnergy.MinValue">
            <summary>
            Represents the smallest possible value of MolarEnergy
            </summary>
        </member>
        <member name="P:UnitsNet.MolarEnergy.Type">
            <summary>
                The <see cref="P:UnitsNet.MolarEnergy.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.MolarEnergy.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.MolarEnergy.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="T:UnitsNet.MolarEntropy">
            <summary>
                Molar entropy is amount of energy required to increase temperature of 1 mole substance by 1 Kelvin.
            </summary>
            <summary>
                Molar entropy is amount of energy required to increase temperature of 1 mole substance by 1 Kelvin.
            </summary>
        </member>
        <member name="P:UnitsNet.MolarEntropy.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.MolarEntropy.GetAbbreviation(UnitsNet.Units.MolarEntropyUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.MolarEntropy.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.MolarEntropy.TryParse(System.String,System.IFormatProvider,UnitsNet.MolarEntropy@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.MolarEntropy.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.MolarEntropy.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.MolarEntropyUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.MolarEntropy.ToString(UnitsNet.Units.MolarEntropyUnit,System.IFormatProvider)">
            <summary>
                Get string representation of value and unit. Using two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.MolarEntropy.ToString(UnitsNet.Units.MolarEntropyUnit,System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.MolarEntropy.ToString(UnitsNet.Units.MolarEntropyUnit,System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">Unit representation to use.</param>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
        </member>
        <member name="F:UnitsNet.MolarEntropy._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.MolarEntropy._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.MolarEntropy.Unit">
            <summary>
                The unit this quantity was constructed with -or- <see cref="P:UnitsNet.MolarEntropy.BaseUnit" /> if default ctor was used.
            </summary>
        </member>
        <member name="M:UnitsNet.MolarEntropy.#ctor(System.Double,UnitsNet.Units.MolarEntropyUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="numericValue">The numeric value  to contruct this quantity with.</param>
            <param name="unit">The unit representation to contruct this quantity with.</param>
            <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="P:UnitsNet.MolarEntropy.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.MolarEntropy.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.MolarEntropy.BaseUnit">
            <summary>
                The base unit of MolarEntropy, which is JoulePerMoleKelvin. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.MolarEntropy.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.MolarEntropy.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.MolarEntropy.Units">
            <summary>
                All units of measurement for the MolarEntropy quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.MolarEntropy.JoulesPerMoleKelvin">
            <summary>
                Get MolarEntropy in JoulesPerMoleKelvin.
            </summary>
        </member>
        <member name="P:UnitsNet.MolarEntropy.KilojoulesPerMoleKelvin">
            <summary>
                Get MolarEntropy in KilojoulesPerMoleKelvin.
            </summary>
        </member>
        <member name="P:UnitsNet.MolarEntropy.MegajoulesPerMoleKelvin">
            <summary>
                Get MolarEntropy in MegajoulesPerMoleKelvin.
            </summary>
        </member>
        <member name="P:UnitsNet.MolarEntropy.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit JoulePerMoleKelvin.
            </summary>
        </member>
        <member name="M:UnitsNet.MolarEntropy.FromJoulesPerMoleKelvin(UnitsNet.QuantityValue)">
            <summary>
                Get MolarEntropy from JoulesPerMoleKelvin.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MolarEntropy.FromKilojoulesPerMoleKelvin(UnitsNet.QuantityValue)">
            <summary>
                Get MolarEntropy from KilojoulesPerMoleKelvin.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MolarEntropy.FromMegajoulesPerMoleKelvin(UnitsNet.QuantityValue)">
            <summary>
                Get MolarEntropy from MegajoulesPerMoleKelvin.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MolarEntropy.From(UnitsNet.QuantityValue,UnitsNet.Units.MolarEntropyUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.MolarEntropyUnit" /> to <see cref="T:UnitsNet.MolarEntropy" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>MolarEntropy unit value.</returns>
        </member>
        <member name="M:UnitsNet.MolarEntropy.GetAbbreviation(UnitsNet.Units.MolarEntropyUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.MolarEntropy.Equals(UnitsNet.MolarEntropy,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another MolarEntropy within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.MolarEntropy.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current MolarEntropy.</returns>
        </member>
        <member name="M:UnitsNet.MolarEntropy.As(UnitsNet.Units.MolarEntropyUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.MolarEntropy.ToUnit(UnitsNet.Units.MolarEntropyUnit)">
            <summary>
                Converts this MolarEntropy to another MolarEntropy with the unit representation <paramref name="unit" />.
            </summary>
            <returns>A MolarEntropy with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.MolarEntropy.AsBaseUnit">
            <summary>
                Converts the current value + unit to the base unit.
                This is typically the first step in converting from one unit to another.
            </summary>
            <returns>The value in the base unit representation.</returns>
        </member>
        <member name="M:UnitsNet.MolarEntropy.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.MolarEntropy.TryParse(System.String,UnitsNet.MolarEntropy@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.MolarEntropy.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.MolarEntropy.ParseInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.MolarEntropy.TryParseInternal(System.String,System.IFormatProvider,UnitsNet.MolarEntropy@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.MolarEntropy.ParseUnitInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.MolarEntropy.TryParseUnitInternal(System.String,System.IFormatProvider,UnitsNet.Units.MolarEntropyUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.MolarEntropy.ToString">
            <summary>
                Get default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.MolarEntropy.ToString(UnitsNet.Units.MolarEntropyUnit)">
            <summary>
                Get string representation of value and unit. Using current UI culture and two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <returns>String representation.</returns>
        </member>
        <member name="P:UnitsNet.MolarEntropy.MaxValue">
            <summary>
            Represents the largest possible value of MolarEntropy
            </summary>
        </member>
        <member name="P:UnitsNet.MolarEntropy.MinValue">
            <summary>
            Represents the smallest possible value of MolarEntropy
            </summary>
        </member>
        <member name="P:UnitsNet.MolarEntropy.Type">
            <summary>
                The <see cref="P:UnitsNet.MolarEntropy.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.MolarEntropy.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.MolarEntropy.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="T:UnitsNet.MolarMass">
            <summary>
                In chemistry, the molar mass M is a physical property defined as the mass of a given substance (chemical element or chemical compound) divided by the amount of substance.
            </summary>
            <summary>
                In chemistry, the molar mass M is a physical property defined as the mass of a given substance (chemical element or chemical compound) divided by the amount of substance.
            </summary>
        </member>
        <member name="P:UnitsNet.MolarMass.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.MolarMass.GetAbbreviation(UnitsNet.Units.MolarMassUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.MolarMass.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.MolarMass.TryParse(System.String,System.IFormatProvider,UnitsNet.MolarMass@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.MolarMass.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.MolarMass.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.MolarMassUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.MolarMass.ToString(UnitsNet.Units.MolarMassUnit,System.IFormatProvider)">
            <summary>
                Get string representation of value and unit. Using two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.MolarMass.ToString(UnitsNet.Units.MolarMassUnit,System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.MolarMass.ToString(UnitsNet.Units.MolarMassUnit,System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">Unit representation to use.</param>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
        </member>
        <member name="F:UnitsNet.MolarMass._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.MolarMass._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.MolarMass.Unit">
            <summary>
                The unit this quantity was constructed with -or- <see cref="P:UnitsNet.MolarMass.BaseUnit" /> if default ctor was used.
            </summary>
        </member>
        <member name="M:UnitsNet.MolarMass.#ctor(System.Double,UnitsNet.Units.MolarMassUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="numericValue">The numeric value  to contruct this quantity with.</param>
            <param name="unit">The unit representation to contruct this quantity with.</param>
            <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="P:UnitsNet.MolarMass.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.MolarMass.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.MolarMass.BaseUnit">
            <summary>
                The base unit of MolarMass, which is KilogramPerMole. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.MolarMass.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.MolarMass.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.MolarMass.Units">
            <summary>
                All units of measurement for the MolarMass quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.MolarMass.CentigramsPerMole">
            <summary>
                Get MolarMass in CentigramsPerMole.
            </summary>
        </member>
        <member name="P:UnitsNet.MolarMass.DecagramsPerMole">
            <summary>
                Get MolarMass in DecagramsPerMole.
            </summary>
        </member>
        <member name="P:UnitsNet.MolarMass.DecigramsPerMole">
            <summary>
                Get MolarMass in DecigramsPerMole.
            </summary>
        </member>
        <member name="P:UnitsNet.MolarMass.GramsPerMole">
            <summary>
                Get MolarMass in GramsPerMole.
            </summary>
        </member>
        <member name="P:UnitsNet.MolarMass.HectogramsPerMole">
            <summary>
                Get MolarMass in HectogramsPerMole.
            </summary>
        </member>
        <member name="P:UnitsNet.MolarMass.KilogramsPerMole">
            <summary>
                Get MolarMass in KilogramsPerMole.
            </summary>
        </member>
        <member name="P:UnitsNet.MolarMass.KilopoundsPerMole">
            <summary>
                Get MolarMass in KilopoundsPerMole.
            </summary>
        </member>
        <member name="P:UnitsNet.MolarMass.MegapoundsPerMole">
            <summary>
                Get MolarMass in MegapoundsPerMole.
            </summary>
        </member>
        <member name="P:UnitsNet.MolarMass.MicrogramsPerMole">
            <summary>
                Get MolarMass in MicrogramsPerMole.
            </summary>
        </member>
        <member name="P:UnitsNet.MolarMass.MilligramsPerMole">
            <summary>
                Get MolarMass in MilligramsPerMole.
            </summary>
        </member>
        <member name="P:UnitsNet.MolarMass.NanogramsPerMole">
            <summary>
                Get MolarMass in NanogramsPerMole.
            </summary>
        </member>
        <member name="P:UnitsNet.MolarMass.PoundsPerMole">
            <summary>
                Get MolarMass in PoundsPerMole.
            </summary>
        </member>
        <member name="P:UnitsNet.MolarMass.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit KilogramPerMole.
            </summary>
        </member>
        <member name="M:UnitsNet.MolarMass.FromCentigramsPerMole(UnitsNet.QuantityValue)">
            <summary>
                Get MolarMass from CentigramsPerMole.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MolarMass.FromDecagramsPerMole(UnitsNet.QuantityValue)">
            <summary>
                Get MolarMass from DecagramsPerMole.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MolarMass.FromDecigramsPerMole(UnitsNet.QuantityValue)">
            <summary>
                Get MolarMass from DecigramsPerMole.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MolarMass.FromGramsPerMole(UnitsNet.QuantityValue)">
            <summary>
                Get MolarMass from GramsPerMole.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MolarMass.FromHectogramsPerMole(UnitsNet.QuantityValue)">
            <summary>
                Get MolarMass from HectogramsPerMole.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MolarMass.FromKilogramsPerMole(UnitsNet.QuantityValue)">
            <summary>
                Get MolarMass from KilogramsPerMole.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MolarMass.FromKilopoundsPerMole(UnitsNet.QuantityValue)">
            <summary>
                Get MolarMass from KilopoundsPerMole.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MolarMass.FromMegapoundsPerMole(UnitsNet.QuantityValue)">
            <summary>
                Get MolarMass from MegapoundsPerMole.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MolarMass.FromMicrogramsPerMole(UnitsNet.QuantityValue)">
            <summary>
                Get MolarMass from MicrogramsPerMole.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MolarMass.FromMilligramsPerMole(UnitsNet.QuantityValue)">
            <summary>
                Get MolarMass from MilligramsPerMole.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MolarMass.FromNanogramsPerMole(UnitsNet.QuantityValue)">
            <summary>
                Get MolarMass from NanogramsPerMole.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MolarMass.FromPoundsPerMole(UnitsNet.QuantityValue)">
            <summary>
                Get MolarMass from PoundsPerMole.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.MolarMass.From(UnitsNet.QuantityValue,UnitsNet.Units.MolarMassUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.MolarMassUnit" /> to <see cref="T:UnitsNet.MolarMass" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>MolarMass unit value.</returns>
        </member>
        <member name="M:UnitsNet.MolarMass.GetAbbreviation(UnitsNet.Units.MolarMassUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.MolarMass.Equals(UnitsNet.MolarMass,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another MolarMass within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.MolarMass.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current MolarMass.</returns>
        </member>
        <member name="M:UnitsNet.MolarMass.As(UnitsNet.Units.MolarMassUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.MolarMass.ToUnit(UnitsNet.Units.MolarMassUnit)">
            <summary>
                Converts this MolarMass to another MolarMass with the unit representation <paramref name="unit" />.
            </summary>
            <returns>A MolarMass with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.MolarMass.AsBaseUnit">
            <summary>
                Converts the current value + unit to the base unit.
                This is typically the first step in converting from one unit to another.
            </summary>
            <returns>The value in the base unit representation.</returns>
        </member>
        <member name="M:UnitsNet.MolarMass.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.MolarMass.TryParse(System.String,UnitsNet.MolarMass@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.MolarMass.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.MolarMass.ParseInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.MolarMass.TryParseInternal(System.String,System.IFormatProvider,UnitsNet.MolarMass@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.MolarMass.ParseUnitInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.MolarMass.TryParseUnitInternal(System.String,System.IFormatProvider,UnitsNet.Units.MolarMassUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.MolarMass.ToString">
            <summary>
                Get default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.MolarMass.ToString(UnitsNet.Units.MolarMassUnit)">
            <summary>
                Get string representation of value and unit. Using current UI culture and two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <returns>String representation.</returns>
        </member>
        <member name="P:UnitsNet.MolarMass.MaxValue">
            <summary>
            Represents the largest possible value of MolarMass
            </summary>
        </member>
        <member name="P:UnitsNet.MolarMass.MinValue">
            <summary>
            Represents the smallest possible value of MolarMass
            </summary>
        </member>
        <member name="P:UnitsNet.MolarMass.Type">
            <summary>
                The <see cref="P:UnitsNet.MolarMass.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.MolarMass.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.MolarMass.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="T:UnitsNet.Permeability">
            <summary>
                In electromagnetism, permeability is the measure of the ability of a material to support the formation of a magnetic field within itself.
            </summary>
            <summary>
                In electromagnetism, permeability is the measure of the ability of a material to support the formation of a magnetic field within itself.
            </summary>
        </member>
        <member name="P:UnitsNet.Permeability.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.Permeability.GetAbbreviation(UnitsNet.Units.PermeabilityUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.Permeability.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Permeability.TryParse(System.String,System.IFormatProvider,UnitsNet.Permeability@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Permeability.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Permeability.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.PermeabilityUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Permeability.ToString(UnitsNet.Units.PermeabilityUnit,System.IFormatProvider)">
            <summary>
                Get string representation of value and unit. Using two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Permeability.ToString(UnitsNet.Units.PermeabilityUnit,System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Permeability.ToString(UnitsNet.Units.PermeabilityUnit,System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">Unit representation to use.</param>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
        </member>
        <member name="F:UnitsNet.Permeability._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.Permeability._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.Permeability.Unit">
            <summary>
                The unit this quantity was constructed with -or- <see cref="P:UnitsNet.Permeability.BaseUnit" /> if default ctor was used.
            </summary>
        </member>
        <member name="M:UnitsNet.Permeability.#ctor(System.Double,UnitsNet.Units.PermeabilityUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="numericValue">The numeric value  to contruct this quantity with.</param>
            <param name="unit">The unit representation to contruct this quantity with.</param>
            <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="P:UnitsNet.Permeability.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.Permeability.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Permeability.BaseUnit">
            <summary>
                The base unit of Permeability, which is HenryPerMeter. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.Permeability.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.Permeability.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Permeability.Units">
            <summary>
                All units of measurement for the Permeability quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Permeability.HenriesPerMeter">
            <summary>
                Get Permeability in HenriesPerMeter.
            </summary>
        </member>
        <member name="P:UnitsNet.Permeability.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit HenryPerMeter.
            </summary>
        </member>
        <member name="M:UnitsNet.Permeability.FromHenriesPerMeter(UnitsNet.QuantityValue)">
            <summary>
                Get Permeability from HenriesPerMeter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Permeability.From(UnitsNet.QuantityValue,UnitsNet.Units.PermeabilityUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.PermeabilityUnit" /> to <see cref="T:UnitsNet.Permeability" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>Permeability unit value.</returns>
        </member>
        <member name="M:UnitsNet.Permeability.GetAbbreviation(UnitsNet.Units.PermeabilityUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.Permeability.Equals(UnitsNet.Permeability,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another Permeability within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.Permeability.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current Permeability.</returns>
        </member>
        <member name="M:UnitsNet.Permeability.As(UnitsNet.Units.PermeabilityUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Permeability.ToUnit(UnitsNet.Units.PermeabilityUnit)">
            <summary>
                Converts this Permeability to another Permeability with the unit representation <paramref name="unit" />.
            </summary>
            <returns>A Permeability with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Permeability.AsBaseUnit">
            <summary>
                Converts the current value + unit to the base unit.
                This is typically the first step in converting from one unit to another.
            </summary>
            <returns>The value in the base unit representation.</returns>
        </member>
        <member name="M:UnitsNet.Permeability.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Permeability.TryParse(System.String,UnitsNet.Permeability@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Permeability.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Permeability.ParseInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Permeability.TryParseInternal(System.String,System.IFormatProvider,UnitsNet.Permeability@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Permeability.ParseUnitInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Permeability.TryParseUnitInternal(System.String,System.IFormatProvider,UnitsNet.Units.PermeabilityUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Permeability.ToString">
            <summary>
                Get default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Permeability.ToString(UnitsNet.Units.PermeabilityUnit)">
            <summary>
                Get string representation of value and unit. Using current UI culture and two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <returns>String representation.</returns>
        </member>
        <member name="P:UnitsNet.Permeability.MaxValue">
            <summary>
            Represents the largest possible value of Permeability
            </summary>
        </member>
        <member name="P:UnitsNet.Permeability.MinValue">
            <summary>
            Represents the smallest possible value of Permeability
            </summary>
        </member>
        <member name="P:UnitsNet.Permeability.Type">
            <summary>
                The <see cref="P:UnitsNet.Permeability.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Permeability.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.Permeability.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="T:UnitsNet.Permittivity">
            <summary>
                In electromagnetism, permittivity is the measure of resistance that is encountered when forming an electric field in a particular medium.
            </summary>
            <summary>
                In electromagnetism, permittivity is the measure of resistance that is encountered when forming an electric field in a particular medium.
            </summary>
        </member>
        <member name="P:UnitsNet.Permittivity.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.Permittivity.GetAbbreviation(UnitsNet.Units.PermittivityUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.Permittivity.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Permittivity.TryParse(System.String,System.IFormatProvider,UnitsNet.Permittivity@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Permittivity.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Permittivity.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.PermittivityUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Permittivity.ToString(UnitsNet.Units.PermittivityUnit,System.IFormatProvider)">
            <summary>
                Get string representation of value and unit. Using two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Permittivity.ToString(UnitsNet.Units.PermittivityUnit,System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Permittivity.ToString(UnitsNet.Units.PermittivityUnit,System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">Unit representation to use.</param>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
        </member>
        <member name="F:UnitsNet.Permittivity._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.Permittivity._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.Permittivity.Unit">
            <summary>
                The unit this quantity was constructed with -or- <see cref="P:UnitsNet.Permittivity.BaseUnit" /> if default ctor was used.
            </summary>
        </member>
        <member name="M:UnitsNet.Permittivity.#ctor(System.Double,UnitsNet.Units.PermittivityUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="numericValue">The numeric value  to contruct this quantity with.</param>
            <param name="unit">The unit representation to contruct this quantity with.</param>
            <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="P:UnitsNet.Permittivity.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.Permittivity.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Permittivity.BaseUnit">
            <summary>
                The base unit of Permittivity, which is FaradPerMeter. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.Permittivity.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.Permittivity.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Permittivity.Units">
            <summary>
                All units of measurement for the Permittivity quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Permittivity.FaradsPerMeter">
            <summary>
                Get Permittivity in FaradsPerMeter.
            </summary>
        </member>
        <member name="P:UnitsNet.Permittivity.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit FaradPerMeter.
            </summary>
        </member>
        <member name="M:UnitsNet.Permittivity.FromFaradsPerMeter(UnitsNet.QuantityValue)">
            <summary>
                Get Permittivity from FaradsPerMeter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Permittivity.From(UnitsNet.QuantityValue,UnitsNet.Units.PermittivityUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.PermittivityUnit" /> to <see cref="T:UnitsNet.Permittivity" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>Permittivity unit value.</returns>
        </member>
        <member name="M:UnitsNet.Permittivity.GetAbbreviation(UnitsNet.Units.PermittivityUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.Permittivity.Equals(UnitsNet.Permittivity,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another Permittivity within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.Permittivity.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current Permittivity.</returns>
        </member>
        <member name="M:UnitsNet.Permittivity.As(UnitsNet.Units.PermittivityUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Permittivity.ToUnit(UnitsNet.Units.PermittivityUnit)">
            <summary>
                Converts this Permittivity to another Permittivity with the unit representation <paramref name="unit" />.
            </summary>
            <returns>A Permittivity with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Permittivity.AsBaseUnit">
            <summary>
                Converts the current value + unit to the base unit.
                This is typically the first step in converting from one unit to another.
            </summary>
            <returns>The value in the base unit representation.</returns>
        </member>
        <member name="M:UnitsNet.Permittivity.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Permittivity.TryParse(System.String,UnitsNet.Permittivity@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Permittivity.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Permittivity.ParseInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Permittivity.TryParseInternal(System.String,System.IFormatProvider,UnitsNet.Permittivity@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Permittivity.ParseUnitInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Permittivity.TryParseUnitInternal(System.String,System.IFormatProvider,UnitsNet.Units.PermittivityUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Permittivity.ToString">
            <summary>
                Get default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Permittivity.ToString(UnitsNet.Units.PermittivityUnit)">
            <summary>
                Get string representation of value and unit. Using current UI culture and two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <returns>String representation.</returns>
        </member>
        <member name="P:UnitsNet.Permittivity.MaxValue">
            <summary>
            Represents the largest possible value of Permittivity
            </summary>
        </member>
        <member name="P:UnitsNet.Permittivity.MinValue">
            <summary>
            Represents the smallest possible value of Permittivity
            </summary>
        </member>
        <member name="P:UnitsNet.Permittivity.Type">
            <summary>
                The <see cref="P:UnitsNet.Permittivity.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Permittivity.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.Permittivity.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="T:UnitsNet.PowerDensity">
            <summary>
                The amount of power in a volume.
            </summary>
            <summary>
                The amount of power in a volume.
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.PowerDensity.GetAbbreviation(UnitsNet.Units.PowerDensityUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.PowerDensity.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.PowerDensity.TryParse(System.String,System.IFormatProvider,UnitsNet.PowerDensity@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.PowerDensity.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.PowerDensity.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.PowerDensityUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.PowerDensity.ToString(UnitsNet.Units.PowerDensityUnit,System.IFormatProvider)">
            <summary>
                Get string representation of value and unit. Using two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.PowerDensity.ToString(UnitsNet.Units.PowerDensityUnit,System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.PowerDensity.ToString(UnitsNet.Units.PowerDensityUnit,System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">Unit representation to use.</param>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
        </member>
        <member name="F:UnitsNet.PowerDensity._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.PowerDensity._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.Unit">
            <summary>
                The unit this quantity was constructed with -or- <see cref="P:UnitsNet.PowerDensity.BaseUnit" /> if default ctor was used.
            </summary>
        </member>
        <member name="M:UnitsNet.PowerDensity.#ctor(System.Double,UnitsNet.Units.PowerDensityUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="numericValue">The numeric value  to contruct this quantity with.</param>
            <param name="unit">The unit representation to contruct this quantity with.</param>
            <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="P:UnitsNet.PowerDensity.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.PowerDensity.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.BaseUnit">
            <summary>
                The base unit of PowerDensity, which is WattPerCubicMeter. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.PowerDensity.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.Units">
            <summary>
                All units of measurement for the PowerDensity quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.DecawattsPerCubicFoot">
            <summary>
                Get PowerDensity in DecawattsPerCubicFoot.
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.DecawattsPerCubicInch">
            <summary>
                Get PowerDensity in DecawattsPerCubicInch.
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.DecawattsPerCubicMeter">
            <summary>
                Get PowerDensity in DecawattsPerCubicMeter.
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.DecawattsPerLiter">
            <summary>
                Get PowerDensity in DecawattsPerLiter.
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.DeciwattsPerCubicFoot">
            <summary>
                Get PowerDensity in DeciwattsPerCubicFoot.
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.DeciwattsPerCubicInch">
            <summary>
                Get PowerDensity in DeciwattsPerCubicInch.
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.DeciwattsPerCubicMeter">
            <summary>
                Get PowerDensity in DeciwattsPerCubicMeter.
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.DeciwattsPerLiter">
            <summary>
                Get PowerDensity in DeciwattsPerLiter.
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.GigawattsPerCubicFoot">
            <summary>
                Get PowerDensity in GigawattsPerCubicFoot.
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.GigawattsPerCubicInch">
            <summary>
                Get PowerDensity in GigawattsPerCubicInch.
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.GigawattsPerCubicMeter">
            <summary>
                Get PowerDensity in GigawattsPerCubicMeter.
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.GigawattsPerLiter">
            <summary>
                Get PowerDensity in GigawattsPerLiter.
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.KilowattsPerCubicFoot">
            <summary>
                Get PowerDensity in KilowattsPerCubicFoot.
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.KilowattsPerCubicInch">
            <summary>
                Get PowerDensity in KilowattsPerCubicInch.
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.KilowattsPerCubicMeter">
            <summary>
                Get PowerDensity in KilowattsPerCubicMeter.
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.KilowattsPerLiter">
            <summary>
                Get PowerDensity in KilowattsPerLiter.
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.MegawattsPerCubicFoot">
            <summary>
                Get PowerDensity in MegawattsPerCubicFoot.
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.MegawattsPerCubicInch">
            <summary>
                Get PowerDensity in MegawattsPerCubicInch.
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.MegawattsPerCubicMeter">
            <summary>
                Get PowerDensity in MegawattsPerCubicMeter.
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.MegawattsPerLiter">
            <summary>
                Get PowerDensity in MegawattsPerLiter.
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.MicrowattsPerCubicFoot">
            <summary>
                Get PowerDensity in MicrowattsPerCubicFoot.
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.MicrowattsPerCubicInch">
            <summary>
                Get PowerDensity in MicrowattsPerCubicInch.
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.MicrowattsPerCubicMeter">
            <summary>
                Get PowerDensity in MicrowattsPerCubicMeter.
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.MicrowattsPerLiter">
            <summary>
                Get PowerDensity in MicrowattsPerLiter.
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.MilliwattsPerCubicFoot">
            <summary>
                Get PowerDensity in MilliwattsPerCubicFoot.
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.MilliwattsPerCubicInch">
            <summary>
                Get PowerDensity in MilliwattsPerCubicInch.
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.MilliwattsPerCubicMeter">
            <summary>
                Get PowerDensity in MilliwattsPerCubicMeter.
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.MilliwattsPerLiter">
            <summary>
                Get PowerDensity in MilliwattsPerLiter.
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.NanowattsPerCubicFoot">
            <summary>
                Get PowerDensity in NanowattsPerCubicFoot.
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.NanowattsPerCubicInch">
            <summary>
                Get PowerDensity in NanowattsPerCubicInch.
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.NanowattsPerCubicMeter">
            <summary>
                Get PowerDensity in NanowattsPerCubicMeter.
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.NanowattsPerLiter">
            <summary>
                Get PowerDensity in NanowattsPerLiter.
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.PicowattsPerCubicFoot">
            <summary>
                Get PowerDensity in PicowattsPerCubicFoot.
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.PicowattsPerCubicInch">
            <summary>
                Get PowerDensity in PicowattsPerCubicInch.
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.PicowattsPerCubicMeter">
            <summary>
                Get PowerDensity in PicowattsPerCubicMeter.
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.PicowattsPerLiter">
            <summary>
                Get PowerDensity in PicowattsPerLiter.
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.TerawattsPerCubicFoot">
            <summary>
                Get PowerDensity in TerawattsPerCubicFoot.
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.TerawattsPerCubicInch">
            <summary>
                Get PowerDensity in TerawattsPerCubicInch.
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.TerawattsPerCubicMeter">
            <summary>
                Get PowerDensity in TerawattsPerCubicMeter.
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.TerawattsPerLiter">
            <summary>
                Get PowerDensity in TerawattsPerLiter.
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.WattsPerCubicFoot">
            <summary>
                Get PowerDensity in WattsPerCubicFoot.
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.WattsPerCubicInch">
            <summary>
                Get PowerDensity in WattsPerCubicInch.
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.WattsPerCubicMeter">
            <summary>
                Get PowerDensity in WattsPerCubicMeter.
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.WattsPerLiter">
            <summary>
                Get PowerDensity in WattsPerLiter.
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit WattPerCubicMeter.
            </summary>
        </member>
        <member name="M:UnitsNet.PowerDensity.FromDecawattsPerCubicFoot(UnitsNet.QuantityValue)">
            <summary>
                Get PowerDensity from DecawattsPerCubicFoot.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PowerDensity.FromDecawattsPerCubicInch(UnitsNet.QuantityValue)">
            <summary>
                Get PowerDensity from DecawattsPerCubicInch.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PowerDensity.FromDecawattsPerCubicMeter(UnitsNet.QuantityValue)">
            <summary>
                Get PowerDensity from DecawattsPerCubicMeter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PowerDensity.FromDecawattsPerLiter(UnitsNet.QuantityValue)">
            <summary>
                Get PowerDensity from DecawattsPerLiter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PowerDensity.FromDeciwattsPerCubicFoot(UnitsNet.QuantityValue)">
            <summary>
                Get PowerDensity from DeciwattsPerCubicFoot.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PowerDensity.FromDeciwattsPerCubicInch(UnitsNet.QuantityValue)">
            <summary>
                Get PowerDensity from DeciwattsPerCubicInch.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PowerDensity.FromDeciwattsPerCubicMeter(UnitsNet.QuantityValue)">
            <summary>
                Get PowerDensity from DeciwattsPerCubicMeter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PowerDensity.FromDeciwattsPerLiter(UnitsNet.QuantityValue)">
            <summary>
                Get PowerDensity from DeciwattsPerLiter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PowerDensity.FromGigawattsPerCubicFoot(UnitsNet.QuantityValue)">
            <summary>
                Get PowerDensity from GigawattsPerCubicFoot.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PowerDensity.FromGigawattsPerCubicInch(UnitsNet.QuantityValue)">
            <summary>
                Get PowerDensity from GigawattsPerCubicInch.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PowerDensity.FromGigawattsPerCubicMeter(UnitsNet.QuantityValue)">
            <summary>
                Get PowerDensity from GigawattsPerCubicMeter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PowerDensity.FromGigawattsPerLiter(UnitsNet.QuantityValue)">
            <summary>
                Get PowerDensity from GigawattsPerLiter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PowerDensity.FromKilowattsPerCubicFoot(UnitsNet.QuantityValue)">
            <summary>
                Get PowerDensity from KilowattsPerCubicFoot.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PowerDensity.FromKilowattsPerCubicInch(UnitsNet.QuantityValue)">
            <summary>
                Get PowerDensity from KilowattsPerCubicInch.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PowerDensity.FromKilowattsPerCubicMeter(UnitsNet.QuantityValue)">
            <summary>
                Get PowerDensity from KilowattsPerCubicMeter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PowerDensity.FromKilowattsPerLiter(UnitsNet.QuantityValue)">
            <summary>
                Get PowerDensity from KilowattsPerLiter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PowerDensity.FromMegawattsPerCubicFoot(UnitsNet.QuantityValue)">
            <summary>
                Get PowerDensity from MegawattsPerCubicFoot.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PowerDensity.FromMegawattsPerCubicInch(UnitsNet.QuantityValue)">
            <summary>
                Get PowerDensity from MegawattsPerCubicInch.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PowerDensity.FromMegawattsPerCubicMeter(UnitsNet.QuantityValue)">
            <summary>
                Get PowerDensity from MegawattsPerCubicMeter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PowerDensity.FromMegawattsPerLiter(UnitsNet.QuantityValue)">
            <summary>
                Get PowerDensity from MegawattsPerLiter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PowerDensity.FromMicrowattsPerCubicFoot(UnitsNet.QuantityValue)">
            <summary>
                Get PowerDensity from MicrowattsPerCubicFoot.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PowerDensity.FromMicrowattsPerCubicInch(UnitsNet.QuantityValue)">
            <summary>
                Get PowerDensity from MicrowattsPerCubicInch.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PowerDensity.FromMicrowattsPerCubicMeter(UnitsNet.QuantityValue)">
            <summary>
                Get PowerDensity from MicrowattsPerCubicMeter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PowerDensity.FromMicrowattsPerLiter(UnitsNet.QuantityValue)">
            <summary>
                Get PowerDensity from MicrowattsPerLiter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PowerDensity.FromMilliwattsPerCubicFoot(UnitsNet.QuantityValue)">
            <summary>
                Get PowerDensity from MilliwattsPerCubicFoot.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PowerDensity.FromMilliwattsPerCubicInch(UnitsNet.QuantityValue)">
            <summary>
                Get PowerDensity from MilliwattsPerCubicInch.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PowerDensity.FromMilliwattsPerCubicMeter(UnitsNet.QuantityValue)">
            <summary>
                Get PowerDensity from MilliwattsPerCubicMeter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PowerDensity.FromMilliwattsPerLiter(UnitsNet.QuantityValue)">
            <summary>
                Get PowerDensity from MilliwattsPerLiter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PowerDensity.FromNanowattsPerCubicFoot(UnitsNet.QuantityValue)">
            <summary>
                Get PowerDensity from NanowattsPerCubicFoot.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PowerDensity.FromNanowattsPerCubicInch(UnitsNet.QuantityValue)">
            <summary>
                Get PowerDensity from NanowattsPerCubicInch.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PowerDensity.FromNanowattsPerCubicMeter(UnitsNet.QuantityValue)">
            <summary>
                Get PowerDensity from NanowattsPerCubicMeter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PowerDensity.FromNanowattsPerLiter(UnitsNet.QuantityValue)">
            <summary>
                Get PowerDensity from NanowattsPerLiter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PowerDensity.FromPicowattsPerCubicFoot(UnitsNet.QuantityValue)">
            <summary>
                Get PowerDensity from PicowattsPerCubicFoot.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PowerDensity.FromPicowattsPerCubicInch(UnitsNet.QuantityValue)">
            <summary>
                Get PowerDensity from PicowattsPerCubicInch.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PowerDensity.FromPicowattsPerCubicMeter(UnitsNet.QuantityValue)">
            <summary>
                Get PowerDensity from PicowattsPerCubicMeter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PowerDensity.FromPicowattsPerLiter(UnitsNet.QuantityValue)">
            <summary>
                Get PowerDensity from PicowattsPerLiter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PowerDensity.FromTerawattsPerCubicFoot(UnitsNet.QuantityValue)">
            <summary>
                Get PowerDensity from TerawattsPerCubicFoot.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PowerDensity.FromTerawattsPerCubicInch(UnitsNet.QuantityValue)">
            <summary>
                Get PowerDensity from TerawattsPerCubicInch.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PowerDensity.FromTerawattsPerCubicMeter(UnitsNet.QuantityValue)">
            <summary>
                Get PowerDensity from TerawattsPerCubicMeter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PowerDensity.FromTerawattsPerLiter(UnitsNet.QuantityValue)">
            <summary>
                Get PowerDensity from TerawattsPerLiter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PowerDensity.FromWattsPerCubicFoot(UnitsNet.QuantityValue)">
            <summary>
                Get PowerDensity from WattsPerCubicFoot.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PowerDensity.FromWattsPerCubicInch(UnitsNet.QuantityValue)">
            <summary>
                Get PowerDensity from WattsPerCubicInch.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PowerDensity.FromWattsPerCubicMeter(UnitsNet.QuantityValue)">
            <summary>
                Get PowerDensity from WattsPerCubicMeter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PowerDensity.FromWattsPerLiter(UnitsNet.QuantityValue)">
            <summary>
                Get PowerDensity from WattsPerLiter.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PowerDensity.From(UnitsNet.QuantityValue,UnitsNet.Units.PowerDensityUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.PowerDensityUnit" /> to <see cref="T:UnitsNet.PowerDensity" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>PowerDensity unit value.</returns>
        </member>
        <member name="M:UnitsNet.PowerDensity.GetAbbreviation(UnitsNet.Units.PowerDensityUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.PowerDensity.Equals(UnitsNet.PowerDensity,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another PowerDensity within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.PowerDensity.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current PowerDensity.</returns>
        </member>
        <member name="M:UnitsNet.PowerDensity.As(UnitsNet.Units.PowerDensityUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.PowerDensity.ToUnit(UnitsNet.Units.PowerDensityUnit)">
            <summary>
                Converts this PowerDensity to another PowerDensity with the unit representation <paramref name="unit" />.
            </summary>
            <returns>A PowerDensity with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.PowerDensity.AsBaseUnit">
            <summary>
                Converts the current value + unit to the base unit.
                This is typically the first step in converting from one unit to another.
            </summary>
            <returns>The value in the base unit representation.</returns>
        </member>
        <member name="M:UnitsNet.PowerDensity.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.PowerDensity.TryParse(System.String,UnitsNet.PowerDensity@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.PowerDensity.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.PowerDensity.ParseInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.PowerDensity.TryParseInternal(System.String,System.IFormatProvider,UnitsNet.PowerDensity@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.PowerDensity.ParseUnitInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.PowerDensity.TryParseUnitInternal(System.String,System.IFormatProvider,UnitsNet.Units.PowerDensityUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.PowerDensity.ToString">
            <summary>
                Get default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.PowerDensity.ToString(UnitsNet.Units.PowerDensityUnit)">
            <summary>
                Get string representation of value and unit. Using current UI culture and two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <returns>String representation.</returns>
        </member>
        <member name="P:UnitsNet.PowerDensity.MaxValue">
            <summary>
            Represents the largest possible value of PowerDensity
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.MinValue">
            <summary>
            Represents the smallest possible value of PowerDensity
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.Type">
            <summary>
                The <see cref="P:UnitsNet.PowerDensity.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.PowerDensity.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.PowerDensity.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="T:UnitsNet.PressureChangeRate">
            <summary>
                Pressure change rate is the ratio of the pressure change to the time during which the change occurred (value of pressure changes per unit time).
            </summary>
            <summary>
                Pressure change rate is the ratio of the pressure change to the time during which the change occurred (value of pressure changes per unit time).
            </summary>
        </member>
        <member name="P:UnitsNet.PressureChangeRate.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.PressureChangeRate.GetAbbreviation(UnitsNet.Units.PressureChangeRateUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.PressureChangeRate.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.PressureChangeRate.TryParse(System.String,System.IFormatProvider,UnitsNet.PressureChangeRate@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.PressureChangeRate.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.PressureChangeRate.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.PressureChangeRateUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.PressureChangeRate.ToString(UnitsNet.Units.PressureChangeRateUnit,System.IFormatProvider)">
            <summary>
                Get string representation of value and unit. Using two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.PressureChangeRate.ToString(UnitsNet.Units.PressureChangeRateUnit,System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.PressureChangeRate.ToString(UnitsNet.Units.PressureChangeRateUnit,System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">Unit representation to use.</param>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
        </member>
        <member name="F:UnitsNet.PressureChangeRate._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.PressureChangeRate._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.PressureChangeRate.Unit">
            <summary>
                The unit this quantity was constructed with -or- <see cref="P:UnitsNet.PressureChangeRate.BaseUnit" /> if default ctor was used.
            </summary>
        </member>
        <member name="M:UnitsNet.PressureChangeRate.#ctor(System.Double,UnitsNet.Units.PressureChangeRateUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="numericValue">The numeric value  to contruct this quantity with.</param>
            <param name="unit">The unit representation to contruct this quantity with.</param>
            <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="P:UnitsNet.PressureChangeRate.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.PressureChangeRate.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.PressureChangeRate.BaseUnit">
            <summary>
                The base unit of PressureChangeRate, which is PascalPerSecond. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.PressureChangeRate.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.PressureChangeRate.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.PressureChangeRate.Units">
            <summary>
                All units of measurement for the PressureChangeRate quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.PressureChangeRate.AtmospheresPerSecond">
            <summary>
                Get PressureChangeRate in AtmospheresPerSecond.
            </summary>
        </member>
        <member name="P:UnitsNet.PressureChangeRate.KilopascalsPerSecond">
            <summary>
                Get PressureChangeRate in KilopascalsPerSecond.
            </summary>
        </member>
        <member name="P:UnitsNet.PressureChangeRate.MegapascalsPerSecond">
            <summary>
                Get PressureChangeRate in MegapascalsPerSecond.
            </summary>
        </member>
        <member name="P:UnitsNet.PressureChangeRate.PascalsPerSecond">
            <summary>
                Get PressureChangeRate in PascalsPerSecond.
            </summary>
        </member>
        <member name="P:UnitsNet.PressureChangeRate.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit PascalPerSecond.
            </summary>
        </member>
        <member name="M:UnitsNet.PressureChangeRate.FromAtmospheresPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Get PressureChangeRate from AtmospheresPerSecond.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PressureChangeRate.FromKilopascalsPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Get PressureChangeRate from KilopascalsPerSecond.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PressureChangeRate.FromMegapascalsPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Get PressureChangeRate from MegapascalsPerSecond.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PressureChangeRate.FromPascalsPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Get PressureChangeRate from PascalsPerSecond.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.PressureChangeRate.From(UnitsNet.QuantityValue,UnitsNet.Units.PressureChangeRateUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.PressureChangeRateUnit" /> to <see cref="T:UnitsNet.PressureChangeRate" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>PressureChangeRate unit value.</returns>
        </member>
        <member name="M:UnitsNet.PressureChangeRate.GetAbbreviation(UnitsNet.Units.PressureChangeRateUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.PressureChangeRate.Equals(UnitsNet.PressureChangeRate,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another PressureChangeRate within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.PressureChangeRate.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current PressureChangeRate.</returns>
        </member>
        <member name="M:UnitsNet.PressureChangeRate.As(UnitsNet.Units.PressureChangeRateUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.PressureChangeRate.ToUnit(UnitsNet.Units.PressureChangeRateUnit)">
            <summary>
                Converts this PressureChangeRate to another PressureChangeRate with the unit representation <paramref name="unit" />.
            </summary>
            <returns>A PressureChangeRate with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.PressureChangeRate.AsBaseUnit">
            <summary>
                Converts the current value + unit to the base unit.
                This is typically the first step in converting from one unit to another.
            </summary>
            <returns>The value in the base unit representation.</returns>
        </member>
        <member name="M:UnitsNet.PressureChangeRate.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.PressureChangeRate.TryParse(System.String,UnitsNet.PressureChangeRate@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.PressureChangeRate.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.PressureChangeRate.ParseInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.PressureChangeRate.TryParseInternal(System.String,System.IFormatProvider,UnitsNet.PressureChangeRate@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.PressureChangeRate.ParseUnitInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.PressureChangeRate.TryParseUnitInternal(System.String,System.IFormatProvider,UnitsNet.Units.PressureChangeRateUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.PressureChangeRate.ToString">
            <summary>
                Get default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.PressureChangeRate.ToString(UnitsNet.Units.PressureChangeRateUnit)">
            <summary>
                Get string representation of value and unit. Using current UI culture and two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <returns>String representation.</returns>
        </member>
        <member name="P:UnitsNet.PressureChangeRate.MaxValue">
            <summary>
            Represents the largest possible value of PressureChangeRate
            </summary>
        </member>
        <member name="P:UnitsNet.PressureChangeRate.MinValue">
            <summary>
            Represents the smallest possible value of PressureChangeRate
            </summary>
        </member>
        <member name="P:UnitsNet.PressureChangeRate.Type">
            <summary>
                The <see cref="P:UnitsNet.PressureChangeRate.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.PressureChangeRate.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.PressureChangeRate.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="T:UnitsNet.Ratio">
            <summary>
                In mathematics, a ratio is a relationship between two numbers of the same kind (e.g., objects, persons, students, spoonfuls, units of whatever identical dimension), usually expressed as "a to b" or a:b, sometimes expressed arithmetically as a dimensionless quotient of the two that explicitly indicates how many times the first number contains the second (not necessarily an integer).
            </summary>
            <summary>
                In mathematics, a ratio is a relationship between two numbers of the same kind (e.g., objects, persons, students, spoonfuls, units of whatever identical dimension), usually expressed as "a to b" or a:b, sometimes expressed arithmetically as a dimensionless quotient of the two that explicitly indicates how many times the first number contains the second (not necessarily an integer).
            </summary>
        </member>
        <member name="P:UnitsNet.Ratio.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.Ratio.GetAbbreviation(UnitsNet.Units.RatioUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.Ratio.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Ratio.TryParse(System.String,System.IFormatProvider,UnitsNet.Ratio@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Ratio.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Ratio.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.RatioUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Ratio.ToString(UnitsNet.Units.RatioUnit,System.IFormatProvider)">
            <summary>
                Get string representation of value and unit. Using two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Ratio.ToString(UnitsNet.Units.RatioUnit,System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Ratio.ToString(UnitsNet.Units.RatioUnit,System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">Unit representation to use.</param>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
        </member>
        <member name="F:UnitsNet.Ratio._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.Ratio._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.Ratio.Unit">
            <summary>
                The unit this quantity was constructed with -or- <see cref="P:UnitsNet.Ratio.BaseUnit" /> if default ctor was used.
            </summary>
        </member>
        <member name="M:UnitsNet.Ratio.#ctor(System.Double,UnitsNet.Units.RatioUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="numericValue">The numeric value  to contruct this quantity with.</param>
            <param name="unit">The unit representation to contruct this quantity with.</param>
            <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="P:UnitsNet.Ratio.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.Ratio.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Ratio.BaseUnit">
            <summary>
                The base unit of Ratio, which is DecimalFraction. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.Ratio.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.Ratio.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Ratio.Units">
            <summary>
                All units of measurement for the Ratio quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Ratio.DecimalFractions">
            <summary>
                Get Ratio in DecimalFractions.
            </summary>
        </member>
        <member name="P:UnitsNet.Ratio.PartsPerBillion">
            <summary>
                Get Ratio in PartsPerBillion.
            </summary>
        </member>
        <member name="P:UnitsNet.Ratio.PartsPerMillion">
            <summary>
                Get Ratio in PartsPerMillion.
            </summary>
        </member>
        <member name="P:UnitsNet.Ratio.PartsPerThousand">
            <summary>
                Get Ratio in PartsPerThousand.
            </summary>
        </member>
        <member name="P:UnitsNet.Ratio.PartsPerTrillion">
            <summary>
                Get Ratio in PartsPerTrillion.
            </summary>
        </member>
        <member name="P:UnitsNet.Ratio.Percent">
            <summary>
                Get Ratio in Percent.
            </summary>
        </member>
        <member name="P:UnitsNet.Ratio.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit DecimalFraction.
            </summary>
        </member>
        <member name="M:UnitsNet.Ratio.FromDecimalFractions(UnitsNet.QuantityValue)">
            <summary>
                Get Ratio from DecimalFractions.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Ratio.FromPartsPerBillion(UnitsNet.QuantityValue)">
            <summary>
                Get Ratio from PartsPerBillion.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Ratio.FromPartsPerMillion(UnitsNet.QuantityValue)">
            <summary>
                Get Ratio from PartsPerMillion.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Ratio.FromPartsPerThousand(UnitsNet.QuantityValue)">
            <summary>
                Get Ratio from PartsPerThousand.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Ratio.FromPartsPerTrillion(UnitsNet.QuantityValue)">
            <summary>
                Get Ratio from PartsPerTrillion.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Ratio.FromPercent(UnitsNet.QuantityValue)">
            <summary>
                Get Ratio from Percent.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Ratio.From(UnitsNet.QuantityValue,UnitsNet.Units.RatioUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.RatioUnit" /> to <see cref="T:UnitsNet.Ratio" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>Ratio unit value.</returns>
        </member>
        <member name="M:UnitsNet.Ratio.GetAbbreviation(UnitsNet.Units.RatioUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.Ratio.Equals(UnitsNet.Ratio,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another Ratio within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.Ratio.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current Ratio.</returns>
        </member>
        <member name="M:UnitsNet.Ratio.As(UnitsNet.Units.RatioUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Ratio.ToUnit(UnitsNet.Units.RatioUnit)">
            <summary>
                Converts this Ratio to another Ratio with the unit representation <paramref name="unit" />.
            </summary>
            <returns>A Ratio with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Ratio.AsBaseUnit">
            <summary>
                Converts the current value + unit to the base unit.
                This is typically the first step in converting from one unit to another.
            </summary>
            <returns>The value in the base unit representation.</returns>
        </member>
        <member name="M:UnitsNet.Ratio.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Ratio.TryParse(System.String,UnitsNet.Ratio@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Ratio.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Ratio.ParseInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.Ratio.TryParseInternal(System.String,System.IFormatProvider,UnitsNet.Ratio@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Ratio.ParseUnitInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.Ratio.TryParseUnitInternal(System.String,System.IFormatProvider,UnitsNet.Units.RatioUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.Ratio.ToString">
            <summary>
                Get default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.Ratio.ToString(UnitsNet.Units.RatioUnit)">
            <summary>
                Get string representation of value and unit. Using current UI culture and two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <returns>String representation.</returns>
        </member>
        <member name="P:UnitsNet.Ratio.MaxValue">
            <summary>
            Represents the largest possible value of Ratio
            </summary>
        </member>
        <member name="P:UnitsNet.Ratio.MinValue">
            <summary>
            Represents the smallest possible value of Ratio
            </summary>
        </member>
        <member name="P:UnitsNet.Ratio.Type">
            <summary>
                The <see cref="P:UnitsNet.Ratio.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.Ratio.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.Ratio.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="T:UnitsNet.ReactiveEnergy">
            <summary>
                The Volt-ampere reactive hour (expressed as varh) is the reactive power of one Volt-ampere reactive produced in one hour.
            </summary>
            <summary>
                The Volt-ampere reactive hour (expressed as varh) is the reactive power of one Volt-ampere reactive produced in one hour.
            </summary>
        </member>
        <member name="P:UnitsNet.ReactiveEnergy.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.ReactiveEnergy.GetAbbreviation(UnitsNet.Units.ReactiveEnergyUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.ReactiveEnergy.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.ReactiveEnergy.TryParse(System.String,System.IFormatProvider,UnitsNet.ReactiveEnergy@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ReactiveEnergy.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ReactiveEnergy.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.ReactiveEnergyUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ReactiveEnergy.ToString(UnitsNet.Units.ReactiveEnergyUnit,System.IFormatProvider)">
            <summary>
                Get string representation of value and unit. Using two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.ReactiveEnergy.ToString(UnitsNet.Units.ReactiveEnergyUnit,System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.ReactiveEnergy.ToString(UnitsNet.Units.ReactiveEnergyUnit,System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">Unit representation to use.</param>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
        </member>
        <member name="F:UnitsNet.ReactiveEnergy._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.ReactiveEnergy._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.ReactiveEnergy.Unit">
            <summary>
                The unit this quantity was constructed with -or- <see cref="P:UnitsNet.ReactiveEnergy.BaseUnit" /> if default ctor was used.
            </summary>
        </member>
        <member name="M:UnitsNet.ReactiveEnergy.#ctor(System.Double,UnitsNet.Units.ReactiveEnergyUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="numericValue">The numeric value  to contruct this quantity with.</param>
            <param name="unit">The unit representation to contruct this quantity with.</param>
            <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="P:UnitsNet.ReactiveEnergy.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.ReactiveEnergy.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ReactiveEnergy.BaseUnit">
            <summary>
                The base unit of ReactiveEnergy, which is VoltampereReactiveHour. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.ReactiveEnergy.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.ReactiveEnergy.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ReactiveEnergy.Units">
            <summary>
                All units of measurement for the ReactiveEnergy quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ReactiveEnergy.KilovoltampereReactiveHours">
            <summary>
                Get ReactiveEnergy in KilovoltampereReactiveHours.
            </summary>
        </member>
        <member name="P:UnitsNet.ReactiveEnergy.MegavoltampereReactiveHours">
            <summary>
                Get ReactiveEnergy in MegavoltampereReactiveHours.
            </summary>
        </member>
        <member name="P:UnitsNet.ReactiveEnergy.VoltampereReactiveHours">
            <summary>
                Get ReactiveEnergy in VoltampereReactiveHours.
            </summary>
        </member>
        <member name="P:UnitsNet.ReactiveEnergy.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit VoltampereReactiveHour.
            </summary>
        </member>
        <member name="M:UnitsNet.ReactiveEnergy.FromKilovoltampereReactiveHours(UnitsNet.QuantityValue)">
            <summary>
                Get ReactiveEnergy from KilovoltampereReactiveHours.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ReactiveEnergy.FromMegavoltampereReactiveHours(UnitsNet.QuantityValue)">
            <summary>
                Get ReactiveEnergy from MegavoltampereReactiveHours.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ReactiveEnergy.FromVoltampereReactiveHours(UnitsNet.QuantityValue)">
            <summary>
                Get ReactiveEnergy from VoltampereReactiveHours.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ReactiveEnergy.From(UnitsNet.QuantityValue,UnitsNet.Units.ReactiveEnergyUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.ReactiveEnergyUnit" /> to <see cref="T:UnitsNet.ReactiveEnergy" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>ReactiveEnergy unit value.</returns>
        </member>
        <member name="M:UnitsNet.ReactiveEnergy.GetAbbreviation(UnitsNet.Units.ReactiveEnergyUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.ReactiveEnergy.Equals(UnitsNet.ReactiveEnergy,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another ReactiveEnergy within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.ReactiveEnergy.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current ReactiveEnergy.</returns>
        </member>
        <member name="M:UnitsNet.ReactiveEnergy.As(UnitsNet.Units.ReactiveEnergyUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ReactiveEnergy.ToUnit(UnitsNet.Units.ReactiveEnergyUnit)">
            <summary>
                Converts this ReactiveEnergy to another ReactiveEnergy with the unit representation <paramref name="unit" />.
            </summary>
            <returns>A ReactiveEnergy with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ReactiveEnergy.AsBaseUnit">
            <summary>
                Converts the current value + unit to the base unit.
                This is typically the first step in converting from one unit to another.
            </summary>
            <returns>The value in the base unit representation.</returns>
        </member>
        <member name="M:UnitsNet.ReactiveEnergy.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.ReactiveEnergy.TryParse(System.String,UnitsNet.ReactiveEnergy@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ReactiveEnergy.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ReactiveEnergy.ParseInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.ReactiveEnergy.TryParseInternal(System.String,System.IFormatProvider,UnitsNet.ReactiveEnergy@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ReactiveEnergy.ParseUnitInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ReactiveEnergy.TryParseUnitInternal(System.String,System.IFormatProvider,UnitsNet.Units.ReactiveEnergyUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ReactiveEnergy.ToString">
            <summary>
                Get default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.ReactiveEnergy.ToString(UnitsNet.Units.ReactiveEnergyUnit)">
            <summary>
                Get string representation of value and unit. Using current UI culture and two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <returns>String representation.</returns>
        </member>
        <member name="P:UnitsNet.ReactiveEnergy.MaxValue">
            <summary>
            Represents the largest possible value of ReactiveEnergy
            </summary>
        </member>
        <member name="P:UnitsNet.ReactiveEnergy.MinValue">
            <summary>
            Represents the smallest possible value of ReactiveEnergy
            </summary>
        </member>
        <member name="P:UnitsNet.ReactiveEnergy.Type">
            <summary>
                The <see cref="P:UnitsNet.ReactiveEnergy.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ReactiveEnergy.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.ReactiveEnergy.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="T:UnitsNet.ReactivePower">
            <summary>
                Volt-ampere reactive (var) is a unit by which reactive power is expressed in an AC electric power system. Reactive power exists in an AC circuit when the current and voltage are not in phase.
            </summary>
            <summary>
                Volt-ampere reactive (var) is a unit by which reactive power is expressed in an AC electric power system. Reactive power exists in an AC circuit when the current and voltage are not in phase.
            </summary>
        </member>
        <member name="P:UnitsNet.ReactivePower.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.ReactivePower.GetAbbreviation(UnitsNet.Units.ReactivePowerUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.ReactivePower.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.ReactivePower.TryParse(System.String,System.IFormatProvider,UnitsNet.ReactivePower@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ReactivePower.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ReactivePower.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.ReactivePowerUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ReactivePower.ToString(UnitsNet.Units.ReactivePowerUnit,System.IFormatProvider)">
            <summary>
                Get string representation of value and unit. Using two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.ReactivePower.ToString(UnitsNet.Units.ReactivePowerUnit,System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.ReactivePower.ToString(UnitsNet.Units.ReactivePowerUnit,System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">Unit representation to use.</param>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
        </member>
        <member name="F:UnitsNet.ReactivePower._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.ReactivePower._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.ReactivePower.Unit">
            <summary>
                The unit this quantity was constructed with -or- <see cref="P:UnitsNet.ReactivePower.BaseUnit" /> if default ctor was used.
            </summary>
        </member>
        <member name="M:UnitsNet.ReactivePower.#ctor(System.Double,UnitsNet.Units.ReactivePowerUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="numericValue">The numeric value  to contruct this quantity with.</param>
            <param name="unit">The unit representation to contruct this quantity with.</param>
            <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="P:UnitsNet.ReactivePower.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.ReactivePower.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ReactivePower.BaseUnit">
            <summary>
                The base unit of ReactivePower, which is VoltampereReactive. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.ReactivePower.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.ReactivePower.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ReactivePower.Units">
            <summary>
                All units of measurement for the ReactivePower quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ReactivePower.GigavoltamperesReactive">
            <summary>
                Get ReactivePower in GigavoltamperesReactive.
            </summary>
        </member>
        <member name="P:UnitsNet.ReactivePower.KilovoltamperesReactive">
            <summary>
                Get ReactivePower in KilovoltamperesReactive.
            </summary>
        </member>
        <member name="P:UnitsNet.ReactivePower.MegavoltamperesReactive">
            <summary>
                Get ReactivePower in MegavoltamperesReactive.
            </summary>
        </member>
        <member name="P:UnitsNet.ReactivePower.VoltamperesReactive">
            <summary>
                Get ReactivePower in VoltamperesReactive.
            </summary>
        </member>
        <member name="P:UnitsNet.ReactivePower.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit VoltampereReactive.
            </summary>
        </member>
        <member name="M:UnitsNet.ReactivePower.FromGigavoltamperesReactive(UnitsNet.QuantityValue)">
            <summary>
                Get ReactivePower from GigavoltamperesReactive.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ReactivePower.FromKilovoltamperesReactive(UnitsNet.QuantityValue)">
            <summary>
                Get ReactivePower from KilovoltamperesReactive.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ReactivePower.FromMegavoltamperesReactive(UnitsNet.QuantityValue)">
            <summary>
                Get ReactivePower from MegavoltamperesReactive.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ReactivePower.FromVoltamperesReactive(UnitsNet.QuantityValue)">
            <summary>
                Get ReactivePower from VoltamperesReactive.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ReactivePower.From(UnitsNet.QuantityValue,UnitsNet.Units.ReactivePowerUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.ReactivePowerUnit" /> to <see cref="T:UnitsNet.ReactivePower" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>ReactivePower unit value.</returns>
        </member>
        <member name="M:UnitsNet.ReactivePower.GetAbbreviation(UnitsNet.Units.ReactivePowerUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.ReactivePower.Equals(UnitsNet.ReactivePower,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another ReactivePower within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.ReactivePower.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current ReactivePower.</returns>
        </member>
        <member name="M:UnitsNet.ReactivePower.As(UnitsNet.Units.ReactivePowerUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ReactivePower.ToUnit(UnitsNet.Units.ReactivePowerUnit)">
            <summary>
                Converts this ReactivePower to another ReactivePower with the unit representation <paramref name="unit" />.
            </summary>
            <returns>A ReactivePower with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ReactivePower.AsBaseUnit">
            <summary>
                Converts the current value + unit to the base unit.
                This is typically the first step in converting from one unit to another.
            </summary>
            <returns>The value in the base unit representation.</returns>
        </member>
        <member name="M:UnitsNet.ReactivePower.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.ReactivePower.TryParse(System.String,UnitsNet.ReactivePower@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ReactivePower.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ReactivePower.ParseInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.ReactivePower.TryParseInternal(System.String,System.IFormatProvider,UnitsNet.ReactivePower@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ReactivePower.ParseUnitInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ReactivePower.TryParseUnitInternal(System.String,System.IFormatProvider,UnitsNet.Units.ReactivePowerUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ReactivePower.ToString">
            <summary>
                Get default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.ReactivePower.ToString(UnitsNet.Units.ReactivePowerUnit)">
            <summary>
                Get string representation of value and unit. Using current UI culture and two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <returns>String representation.</returns>
        </member>
        <member name="P:UnitsNet.ReactivePower.MaxValue">
            <summary>
            Represents the largest possible value of ReactivePower
            </summary>
        </member>
        <member name="P:UnitsNet.ReactivePower.MinValue">
            <summary>
            Represents the smallest possible value of ReactivePower
            </summary>
        </member>
        <member name="P:UnitsNet.ReactivePower.Type">
            <summary>
                The <see cref="P:UnitsNet.ReactivePower.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ReactivePower.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.ReactivePower.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="T:UnitsNet.RotationalAcceleration">
            <summary>
                Angular acceleration is the rate of change of rotational speed.
            </summary>
            <summary>
                Angular acceleration is the rate of change of rotational speed.
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalAcceleration.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.RotationalAcceleration.GetAbbreviation(UnitsNet.Units.RotationalAccelerationUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.RotationalAcceleration.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.RotationalAcceleration.TryParse(System.String,System.IFormatProvider,UnitsNet.RotationalAcceleration@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.RotationalAcceleration.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.RotationalAcceleration.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.RotationalAccelerationUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.RotationalAcceleration.ToString(UnitsNet.Units.RotationalAccelerationUnit,System.IFormatProvider)">
            <summary>
                Get string representation of value and unit. Using two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.RotationalAcceleration.ToString(UnitsNet.Units.RotationalAccelerationUnit,System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.RotationalAcceleration.ToString(UnitsNet.Units.RotationalAccelerationUnit,System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">Unit representation to use.</param>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
        </member>
        <member name="F:UnitsNet.RotationalAcceleration._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.RotationalAcceleration._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalAcceleration.Unit">
            <summary>
                The unit this quantity was constructed with -or- <see cref="P:UnitsNet.RotationalAcceleration.BaseUnit" /> if default ctor was used.
            </summary>
        </member>
        <member name="M:UnitsNet.RotationalAcceleration.#ctor(System.Double,UnitsNet.Units.RotationalAccelerationUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="numericValue">The numeric value  to contruct this quantity with.</param>
            <param name="unit">The unit representation to contruct this quantity with.</param>
            <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="P:UnitsNet.RotationalAcceleration.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.RotationalAcceleration.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalAcceleration.BaseUnit">
            <summary>
                The base unit of RotationalAcceleration, which is RadianPerSecondSquared. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalAcceleration.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.RotationalAcceleration.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalAcceleration.Units">
            <summary>
                All units of measurement for the RotationalAcceleration quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalAcceleration.DegreesPerSecondSquared">
            <summary>
                Get RotationalAcceleration in DegreesPerSecondSquared.
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalAcceleration.RadiansPerSecondSquared">
            <summary>
                Get RotationalAcceleration in RadiansPerSecondSquared.
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalAcceleration.RevolutionsPerMinutePerSecond">
            <summary>
                Get RotationalAcceleration in RevolutionsPerMinutePerSecond.
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalAcceleration.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit RadianPerSecondSquared.
            </summary>
        </member>
        <member name="M:UnitsNet.RotationalAcceleration.FromDegreesPerSecondSquared(UnitsNet.QuantityValue)">
            <summary>
                Get RotationalAcceleration from DegreesPerSecondSquared.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.RotationalAcceleration.FromRadiansPerSecondSquared(UnitsNet.QuantityValue)">
            <summary>
                Get RotationalAcceleration from RadiansPerSecondSquared.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.RotationalAcceleration.FromRevolutionsPerMinutePerSecond(UnitsNet.QuantityValue)">
            <summary>
                Get RotationalAcceleration from RevolutionsPerMinutePerSecond.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.RotationalAcceleration.From(UnitsNet.QuantityValue,UnitsNet.Units.RotationalAccelerationUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.RotationalAccelerationUnit" /> to <see cref="T:UnitsNet.RotationalAcceleration" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>RotationalAcceleration unit value.</returns>
        </member>
        <member name="M:UnitsNet.RotationalAcceleration.GetAbbreviation(UnitsNet.Units.RotationalAccelerationUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.RotationalAcceleration.Equals(UnitsNet.RotationalAcceleration,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another RotationalAcceleration within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.RotationalAcceleration.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current RotationalAcceleration.</returns>
        </member>
        <member name="M:UnitsNet.RotationalAcceleration.As(UnitsNet.Units.RotationalAccelerationUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.RotationalAcceleration.ToUnit(UnitsNet.Units.RotationalAccelerationUnit)">
            <summary>
                Converts this RotationalAcceleration to another RotationalAcceleration with the unit representation <paramref name="unit" />.
            </summary>
            <returns>A RotationalAcceleration with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.RotationalAcceleration.AsBaseUnit">
            <summary>
                Converts the current value + unit to the base unit.
                This is typically the first step in converting from one unit to another.
            </summary>
            <returns>The value in the base unit representation.</returns>
        </member>
        <member name="M:UnitsNet.RotationalAcceleration.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.RotationalAcceleration.TryParse(System.String,UnitsNet.RotationalAcceleration@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.RotationalAcceleration.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.RotationalAcceleration.ParseInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.RotationalAcceleration.TryParseInternal(System.String,System.IFormatProvider,UnitsNet.RotationalAcceleration@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.RotationalAcceleration.ParseUnitInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.RotationalAcceleration.TryParseUnitInternal(System.String,System.IFormatProvider,UnitsNet.Units.RotationalAccelerationUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.RotationalAcceleration.ToString">
            <summary>
                Get default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.RotationalAcceleration.ToString(UnitsNet.Units.RotationalAccelerationUnit)">
            <summary>
                Get string representation of value and unit. Using current UI culture and two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <returns>String representation.</returns>
        </member>
        <member name="P:UnitsNet.RotationalAcceleration.MaxValue">
            <summary>
            Represents the largest possible value of RotationalAcceleration
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalAcceleration.MinValue">
            <summary>
            Represents the smallest possible value of RotationalAcceleration
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalAcceleration.Type">
            <summary>
                The <see cref="P:UnitsNet.RotationalAcceleration.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.RotationalAcceleration.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.RotationalAcceleration.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="T:UnitsNet.SolidAngle">
            <summary>
                In geometry, a solid angle is the two-dimensional angle in three-dimensional space that an object subtends at a point.
            </summary>
            <summary>
                In geometry, a solid angle is the two-dimensional angle in three-dimensional space that an object subtends at a point.
            </summary>
        </member>
        <member name="P:UnitsNet.SolidAngle.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.SolidAngle.GetAbbreviation(UnitsNet.Units.SolidAngleUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.SolidAngle.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.SolidAngle.TryParse(System.String,System.IFormatProvider,UnitsNet.SolidAngle@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.SolidAngle.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.SolidAngle.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.SolidAngleUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.SolidAngle.ToString(UnitsNet.Units.SolidAngleUnit,System.IFormatProvider)">
            <summary>
                Get string representation of value and unit. Using two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.SolidAngle.ToString(UnitsNet.Units.SolidAngleUnit,System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.SolidAngle.ToString(UnitsNet.Units.SolidAngleUnit,System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">Unit representation to use.</param>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
        </member>
        <member name="F:UnitsNet.SolidAngle._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.SolidAngle._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.SolidAngle.Unit">
            <summary>
                The unit this quantity was constructed with -or- <see cref="P:UnitsNet.SolidAngle.BaseUnit" /> if default ctor was used.
            </summary>
        </member>
        <member name="M:UnitsNet.SolidAngle.#ctor(System.Double,UnitsNet.Units.SolidAngleUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="numericValue">The numeric value  to contruct this quantity with.</param>
            <param name="unit">The unit representation to contruct this quantity with.</param>
            <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="P:UnitsNet.SolidAngle.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.SolidAngle.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.SolidAngle.BaseUnit">
            <summary>
                The base unit of SolidAngle, which is Steradian. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.SolidAngle.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.SolidAngle.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.SolidAngle.Units">
            <summary>
                All units of measurement for the SolidAngle quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.SolidAngle.Steradians">
            <summary>
                Get SolidAngle in Steradians.
            </summary>
        </member>
        <member name="P:UnitsNet.SolidAngle.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit Steradian.
            </summary>
        </member>
        <member name="M:UnitsNet.SolidAngle.FromSteradians(UnitsNet.QuantityValue)">
            <summary>
                Get SolidAngle from Steradians.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.SolidAngle.From(UnitsNet.QuantityValue,UnitsNet.Units.SolidAngleUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.SolidAngleUnit" /> to <see cref="T:UnitsNet.SolidAngle" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>SolidAngle unit value.</returns>
        </member>
        <member name="M:UnitsNet.SolidAngle.GetAbbreviation(UnitsNet.Units.SolidAngleUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.SolidAngle.Equals(UnitsNet.SolidAngle,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another SolidAngle within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.SolidAngle.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current SolidAngle.</returns>
        </member>
        <member name="M:UnitsNet.SolidAngle.As(UnitsNet.Units.SolidAngleUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.SolidAngle.ToUnit(UnitsNet.Units.SolidAngleUnit)">
            <summary>
                Converts this SolidAngle to another SolidAngle with the unit representation <paramref name="unit" />.
            </summary>
            <returns>A SolidAngle with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.SolidAngle.AsBaseUnit">
            <summary>
                Converts the current value + unit to the base unit.
                This is typically the first step in converting from one unit to another.
            </summary>
            <returns>The value in the base unit representation.</returns>
        </member>
        <member name="M:UnitsNet.SolidAngle.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.SolidAngle.TryParse(System.String,UnitsNet.SolidAngle@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.SolidAngle.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.SolidAngle.ParseInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.SolidAngle.TryParseInternal(System.String,System.IFormatProvider,UnitsNet.SolidAngle@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.SolidAngle.ParseUnitInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.SolidAngle.TryParseUnitInternal(System.String,System.IFormatProvider,UnitsNet.Units.SolidAngleUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.SolidAngle.ToString">
            <summary>
                Get default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.SolidAngle.ToString(UnitsNet.Units.SolidAngleUnit)">
            <summary>
                Get string representation of value and unit. Using current UI culture and two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <returns>String representation.</returns>
        </member>
        <member name="P:UnitsNet.SolidAngle.MaxValue">
            <summary>
            Represents the largest possible value of SolidAngle
            </summary>
        </member>
        <member name="P:UnitsNet.SolidAngle.MinValue">
            <summary>
            Represents the smallest possible value of SolidAngle
            </summary>
        </member>
        <member name="P:UnitsNet.SolidAngle.Type">
            <summary>
                The <see cref="P:UnitsNet.SolidAngle.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.SolidAngle.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.SolidAngle.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="T:UnitsNet.SpecificEntropy">
            <summary>
                Specific entropy is an amount of energy required to raise temperature of a substance by 1 Kelvin per unit mass.
            </summary>
            <summary>
                Specific entropy is an amount of energy required to raise temperature of a substance by 1 Kelvin per unit mass.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificEntropy.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.SpecificEntropy.GetAbbreviation(UnitsNet.Units.SpecificEntropyUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.SpecificEntropy.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.SpecificEntropy.TryParse(System.String,System.IFormatProvider,UnitsNet.SpecificEntropy@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.SpecificEntropy.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.SpecificEntropy.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.SpecificEntropyUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.SpecificEntropy.ToString(UnitsNet.Units.SpecificEntropyUnit,System.IFormatProvider)">
            <summary>
                Get string representation of value and unit. Using two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.SpecificEntropy.ToString(UnitsNet.Units.SpecificEntropyUnit,System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.SpecificEntropy.ToString(UnitsNet.Units.SpecificEntropyUnit,System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">Unit representation to use.</param>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
        </member>
        <member name="F:UnitsNet.SpecificEntropy._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.SpecificEntropy._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificEntropy.Unit">
            <summary>
                The unit this quantity was constructed with -or- <see cref="P:UnitsNet.SpecificEntropy.BaseUnit" /> if default ctor was used.
            </summary>
        </member>
        <member name="M:UnitsNet.SpecificEntropy.#ctor(System.Double,UnitsNet.Units.SpecificEntropyUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="numericValue">The numeric value  to contruct this quantity with.</param>
            <param name="unit">The unit representation to contruct this quantity with.</param>
            <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="P:UnitsNet.SpecificEntropy.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.SpecificEntropy.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificEntropy.BaseUnit">
            <summary>
                The base unit of SpecificEntropy, which is JoulePerKilogramKelvin. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificEntropy.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.SpecificEntropy.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificEntropy.Units">
            <summary>
                All units of measurement for the SpecificEntropy quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificEntropy.CaloriesPerGramKelvin">
            <summary>
                Get SpecificEntropy in CaloriesPerGramKelvin.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificEntropy.JoulesPerKilogramDegreeCelsius">
            <summary>
                Get SpecificEntropy in JoulesPerKilogramDegreeCelsius.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificEntropy.JoulesPerKilogramKelvin">
            <summary>
                Get SpecificEntropy in JoulesPerKilogramKelvin.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificEntropy.KilocaloriesPerGramKelvin">
            <summary>
                Get SpecificEntropy in KilocaloriesPerGramKelvin.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificEntropy.KilojoulesPerKilogramDegreeCelsius">
            <summary>
                Get SpecificEntropy in KilojoulesPerKilogramDegreeCelsius.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificEntropy.KilojoulesPerKilogramKelvin">
            <summary>
                Get SpecificEntropy in KilojoulesPerKilogramKelvin.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificEntropy.MegajoulesPerKilogramDegreeCelsius">
            <summary>
                Get SpecificEntropy in MegajoulesPerKilogramDegreeCelsius.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificEntropy.MegajoulesPerKilogramKelvin">
            <summary>
                Get SpecificEntropy in MegajoulesPerKilogramKelvin.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificEntropy.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit JoulePerKilogramKelvin.
            </summary>
        </member>
        <member name="M:UnitsNet.SpecificEntropy.FromCaloriesPerGramKelvin(UnitsNet.QuantityValue)">
            <summary>
                Get SpecificEntropy from CaloriesPerGramKelvin.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.SpecificEntropy.FromJoulesPerKilogramDegreeCelsius(UnitsNet.QuantityValue)">
            <summary>
                Get SpecificEntropy from JoulesPerKilogramDegreeCelsius.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.SpecificEntropy.FromJoulesPerKilogramKelvin(UnitsNet.QuantityValue)">
            <summary>
                Get SpecificEntropy from JoulesPerKilogramKelvin.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.SpecificEntropy.FromKilocaloriesPerGramKelvin(UnitsNet.QuantityValue)">
            <summary>
                Get SpecificEntropy from KilocaloriesPerGramKelvin.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.SpecificEntropy.FromKilojoulesPerKilogramDegreeCelsius(UnitsNet.QuantityValue)">
            <summary>
                Get SpecificEntropy from KilojoulesPerKilogramDegreeCelsius.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.SpecificEntropy.FromKilojoulesPerKilogramKelvin(UnitsNet.QuantityValue)">
            <summary>
                Get SpecificEntropy from KilojoulesPerKilogramKelvin.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.SpecificEntropy.FromMegajoulesPerKilogramDegreeCelsius(UnitsNet.QuantityValue)">
            <summary>
                Get SpecificEntropy from MegajoulesPerKilogramDegreeCelsius.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.SpecificEntropy.FromMegajoulesPerKilogramKelvin(UnitsNet.QuantityValue)">
            <summary>
                Get SpecificEntropy from MegajoulesPerKilogramKelvin.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.SpecificEntropy.From(UnitsNet.QuantityValue,UnitsNet.Units.SpecificEntropyUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.SpecificEntropyUnit" /> to <see cref="T:UnitsNet.SpecificEntropy" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>SpecificEntropy unit value.</returns>
        </member>
        <member name="M:UnitsNet.SpecificEntropy.GetAbbreviation(UnitsNet.Units.SpecificEntropyUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.SpecificEntropy.Equals(UnitsNet.SpecificEntropy,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another SpecificEntropy within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.SpecificEntropy.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current SpecificEntropy.</returns>
        </member>
        <member name="M:UnitsNet.SpecificEntropy.As(UnitsNet.Units.SpecificEntropyUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.SpecificEntropy.ToUnit(UnitsNet.Units.SpecificEntropyUnit)">
            <summary>
                Converts this SpecificEntropy to another SpecificEntropy with the unit representation <paramref name="unit" />.
            </summary>
            <returns>A SpecificEntropy with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.SpecificEntropy.AsBaseUnit">
            <summary>
                Converts the current value + unit to the base unit.
                This is typically the first step in converting from one unit to another.
            </summary>
            <returns>The value in the base unit representation.</returns>
        </member>
        <member name="M:UnitsNet.SpecificEntropy.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.SpecificEntropy.TryParse(System.String,UnitsNet.SpecificEntropy@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.SpecificEntropy.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.SpecificEntropy.ParseInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.SpecificEntropy.TryParseInternal(System.String,System.IFormatProvider,UnitsNet.SpecificEntropy@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.SpecificEntropy.ParseUnitInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.SpecificEntropy.TryParseUnitInternal(System.String,System.IFormatProvider,UnitsNet.Units.SpecificEntropyUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.SpecificEntropy.ToString">
            <summary>
                Get default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.SpecificEntropy.ToString(UnitsNet.Units.SpecificEntropyUnit)">
            <summary>
                Get string representation of value and unit. Using current UI culture and two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <returns>String representation.</returns>
        </member>
        <member name="P:UnitsNet.SpecificEntropy.MaxValue">
            <summary>
            Represents the largest possible value of SpecificEntropy
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificEntropy.MinValue">
            <summary>
            Represents the smallest possible value of SpecificEntropy
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificEntropy.Type">
            <summary>
                The <see cref="P:UnitsNet.SpecificEntropy.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.SpecificEntropy.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.SpecificEntropy.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="T:UnitsNet.TemperatureChangeRate">
            <summary>
                Temperature change rate is the ratio of the temperature change to the time during which the change occurred (value of temperature changes per unit time).
            </summary>
            <summary>
                Temperature change rate is the ratio of the temperature change to the time during which the change occurred (value of temperature changes per unit time).
            </summary>
        </member>
        <member name="P:UnitsNet.TemperatureChangeRate.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.TemperatureChangeRate.GetAbbreviation(UnitsNet.Units.TemperatureChangeRateUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.TemperatureChangeRate.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.TemperatureChangeRate.TryParse(System.String,System.IFormatProvider,UnitsNet.TemperatureChangeRate@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.TemperatureChangeRate.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.TemperatureChangeRate.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.TemperatureChangeRateUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.TemperatureChangeRate.ToString(UnitsNet.Units.TemperatureChangeRateUnit,System.IFormatProvider)">
            <summary>
                Get string representation of value and unit. Using two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.TemperatureChangeRate.ToString(UnitsNet.Units.TemperatureChangeRateUnit,System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.TemperatureChangeRate.ToString(UnitsNet.Units.TemperatureChangeRateUnit,System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">Unit representation to use.</param>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
        </member>
        <member name="F:UnitsNet.TemperatureChangeRate._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.TemperatureChangeRate._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.TemperatureChangeRate.Unit">
            <summary>
                The unit this quantity was constructed with -or- <see cref="P:UnitsNet.TemperatureChangeRate.BaseUnit" /> if default ctor was used.
            </summary>
        </member>
        <member name="M:UnitsNet.TemperatureChangeRate.#ctor(System.Double,UnitsNet.Units.TemperatureChangeRateUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="numericValue">The numeric value  to contruct this quantity with.</param>
            <param name="unit">The unit representation to contruct this quantity with.</param>
            <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="P:UnitsNet.TemperatureChangeRate.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.TemperatureChangeRate.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.TemperatureChangeRate.BaseUnit">
            <summary>
                The base unit of TemperatureChangeRate, which is DegreeCelsiusPerSecond. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.TemperatureChangeRate.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.TemperatureChangeRate.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.TemperatureChangeRate.Units">
            <summary>
                All units of measurement for the TemperatureChangeRate quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.TemperatureChangeRate.CentidegreesCelsiusPerSecond">
            <summary>
                Get TemperatureChangeRate in CentidegreesCelsiusPerSecond.
            </summary>
        </member>
        <member name="P:UnitsNet.TemperatureChangeRate.DecadegreesCelsiusPerSecond">
            <summary>
                Get TemperatureChangeRate in DecadegreesCelsiusPerSecond.
            </summary>
        </member>
        <member name="P:UnitsNet.TemperatureChangeRate.DecidegreesCelsiusPerSecond">
            <summary>
                Get TemperatureChangeRate in DecidegreesCelsiusPerSecond.
            </summary>
        </member>
        <member name="P:UnitsNet.TemperatureChangeRate.DegreesCelsiusPerMinute">
            <summary>
                Get TemperatureChangeRate in DegreesCelsiusPerMinute.
            </summary>
        </member>
        <member name="P:UnitsNet.TemperatureChangeRate.DegreesCelsiusPerSecond">
            <summary>
                Get TemperatureChangeRate in DegreesCelsiusPerSecond.
            </summary>
        </member>
        <member name="P:UnitsNet.TemperatureChangeRate.HectodegreesCelsiusPerSecond">
            <summary>
                Get TemperatureChangeRate in HectodegreesCelsiusPerSecond.
            </summary>
        </member>
        <member name="P:UnitsNet.TemperatureChangeRate.KilodegreesCelsiusPerSecond">
            <summary>
                Get TemperatureChangeRate in KilodegreesCelsiusPerSecond.
            </summary>
        </member>
        <member name="P:UnitsNet.TemperatureChangeRate.MicrodegreesCelsiusPerSecond">
            <summary>
                Get TemperatureChangeRate in MicrodegreesCelsiusPerSecond.
            </summary>
        </member>
        <member name="P:UnitsNet.TemperatureChangeRate.MillidegreesCelsiusPerSecond">
            <summary>
                Get TemperatureChangeRate in MillidegreesCelsiusPerSecond.
            </summary>
        </member>
        <member name="P:UnitsNet.TemperatureChangeRate.NanodegreesCelsiusPerSecond">
            <summary>
                Get TemperatureChangeRate in NanodegreesCelsiusPerSecond.
            </summary>
        </member>
        <member name="P:UnitsNet.TemperatureChangeRate.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit DegreeCelsiusPerSecond.
            </summary>
        </member>
        <member name="M:UnitsNet.TemperatureChangeRate.FromCentidegreesCelsiusPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Get TemperatureChangeRate from CentidegreesCelsiusPerSecond.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.TemperatureChangeRate.FromDecadegreesCelsiusPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Get TemperatureChangeRate from DecadegreesCelsiusPerSecond.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.TemperatureChangeRate.FromDecidegreesCelsiusPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Get TemperatureChangeRate from DecidegreesCelsiusPerSecond.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.TemperatureChangeRate.FromDegreesCelsiusPerMinute(UnitsNet.QuantityValue)">
            <summary>
                Get TemperatureChangeRate from DegreesCelsiusPerMinute.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.TemperatureChangeRate.FromDegreesCelsiusPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Get TemperatureChangeRate from DegreesCelsiusPerSecond.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.TemperatureChangeRate.FromHectodegreesCelsiusPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Get TemperatureChangeRate from HectodegreesCelsiusPerSecond.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.TemperatureChangeRate.FromKilodegreesCelsiusPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Get TemperatureChangeRate from KilodegreesCelsiusPerSecond.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.TemperatureChangeRate.FromMicrodegreesCelsiusPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Get TemperatureChangeRate from MicrodegreesCelsiusPerSecond.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.TemperatureChangeRate.FromMillidegreesCelsiusPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Get TemperatureChangeRate from MillidegreesCelsiusPerSecond.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.TemperatureChangeRate.FromNanodegreesCelsiusPerSecond(UnitsNet.QuantityValue)">
            <summary>
                Get TemperatureChangeRate from NanodegreesCelsiusPerSecond.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.TemperatureChangeRate.From(UnitsNet.QuantityValue,UnitsNet.Units.TemperatureChangeRateUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.TemperatureChangeRateUnit" /> to <see cref="T:UnitsNet.TemperatureChangeRate" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>TemperatureChangeRate unit value.</returns>
        </member>
        <member name="M:UnitsNet.TemperatureChangeRate.GetAbbreviation(UnitsNet.Units.TemperatureChangeRateUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.TemperatureChangeRate.Equals(UnitsNet.TemperatureChangeRate,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another TemperatureChangeRate within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.TemperatureChangeRate.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current TemperatureChangeRate.</returns>
        </member>
        <member name="M:UnitsNet.TemperatureChangeRate.As(UnitsNet.Units.TemperatureChangeRateUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.TemperatureChangeRate.ToUnit(UnitsNet.Units.TemperatureChangeRateUnit)">
            <summary>
                Converts this TemperatureChangeRate to another TemperatureChangeRate with the unit representation <paramref name="unit" />.
            </summary>
            <returns>A TemperatureChangeRate with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.TemperatureChangeRate.AsBaseUnit">
            <summary>
                Converts the current value + unit to the base unit.
                This is typically the first step in converting from one unit to another.
            </summary>
            <returns>The value in the base unit representation.</returns>
        </member>
        <member name="M:UnitsNet.TemperatureChangeRate.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.TemperatureChangeRate.TryParse(System.String,UnitsNet.TemperatureChangeRate@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.TemperatureChangeRate.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.TemperatureChangeRate.ParseInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.TemperatureChangeRate.TryParseInternal(System.String,System.IFormatProvider,UnitsNet.TemperatureChangeRate@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.TemperatureChangeRate.ParseUnitInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.TemperatureChangeRate.TryParseUnitInternal(System.String,System.IFormatProvider,UnitsNet.Units.TemperatureChangeRateUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.TemperatureChangeRate.ToString">
            <summary>
                Get default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.TemperatureChangeRate.ToString(UnitsNet.Units.TemperatureChangeRateUnit)">
            <summary>
                Get string representation of value and unit. Using current UI culture and two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <returns>String representation.</returns>
        </member>
        <member name="P:UnitsNet.TemperatureChangeRate.MaxValue">
            <summary>
            Represents the largest possible value of TemperatureChangeRate
            </summary>
        </member>
        <member name="P:UnitsNet.TemperatureChangeRate.MinValue">
            <summary>
            Represents the smallest possible value of TemperatureChangeRate
            </summary>
        </member>
        <member name="P:UnitsNet.TemperatureChangeRate.Type">
            <summary>
                The <see cref="P:UnitsNet.TemperatureChangeRate.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.TemperatureChangeRate.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.TemperatureChangeRate.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="T:UnitsNet.ThermalConductivity">
            <summary>
                Thermal conductivity is the property of a material to conduct heat.
            </summary>
            <summary>
                Thermal conductivity is the property of a material to conduct heat.
            </summary>
        </member>
        <member name="P:UnitsNet.ThermalConductivity.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.ThermalConductivity.GetAbbreviation(UnitsNet.Units.ThermalConductivityUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.ThermalConductivity.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.ThermalConductivity.TryParse(System.String,System.IFormatProvider,UnitsNet.ThermalConductivity@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ThermalConductivity.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ThermalConductivity.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.ThermalConductivityUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ThermalConductivity.ToString(UnitsNet.Units.ThermalConductivityUnit,System.IFormatProvider)">
            <summary>
                Get string representation of value and unit. Using two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.ThermalConductivity.ToString(UnitsNet.Units.ThermalConductivityUnit,System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.ThermalConductivity.ToString(UnitsNet.Units.ThermalConductivityUnit,System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">Unit representation to use.</param>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
        </member>
        <member name="F:UnitsNet.ThermalConductivity._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.ThermalConductivity._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.ThermalConductivity.Unit">
            <summary>
                The unit this quantity was constructed with -or- <see cref="P:UnitsNet.ThermalConductivity.BaseUnit" /> if default ctor was used.
            </summary>
        </member>
        <member name="M:UnitsNet.ThermalConductivity.#ctor(System.Double,UnitsNet.Units.ThermalConductivityUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="numericValue">The numeric value  to contruct this quantity with.</param>
            <param name="unit">The unit representation to contruct this quantity with.</param>
            <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="P:UnitsNet.ThermalConductivity.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.ThermalConductivity.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ThermalConductivity.BaseUnit">
            <summary>
                The base unit of ThermalConductivity, which is WattPerMeterKelvin. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.ThermalConductivity.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.ThermalConductivity.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ThermalConductivity.Units">
            <summary>
                All units of measurement for the ThermalConductivity quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ThermalConductivity.BtusPerHourFootFahrenheit">
            <summary>
                Get ThermalConductivity in BtusPerHourFootFahrenheit.
            </summary>
        </member>
        <member name="P:UnitsNet.ThermalConductivity.WattsPerMeterKelvin">
            <summary>
                Get ThermalConductivity in WattsPerMeterKelvin.
            </summary>
        </member>
        <member name="P:UnitsNet.ThermalConductivity.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit WattPerMeterKelvin.
            </summary>
        </member>
        <member name="M:UnitsNet.ThermalConductivity.FromBtusPerHourFootFahrenheit(UnitsNet.QuantityValue)">
            <summary>
                Get ThermalConductivity from BtusPerHourFootFahrenheit.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ThermalConductivity.FromWattsPerMeterKelvin(UnitsNet.QuantityValue)">
            <summary>
                Get ThermalConductivity from WattsPerMeterKelvin.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ThermalConductivity.From(UnitsNet.QuantityValue,UnitsNet.Units.ThermalConductivityUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.ThermalConductivityUnit" /> to <see cref="T:UnitsNet.ThermalConductivity" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>ThermalConductivity unit value.</returns>
        </member>
        <member name="M:UnitsNet.ThermalConductivity.GetAbbreviation(UnitsNet.Units.ThermalConductivityUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.ThermalConductivity.Equals(UnitsNet.ThermalConductivity,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another ThermalConductivity within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.ThermalConductivity.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current ThermalConductivity.</returns>
        </member>
        <member name="M:UnitsNet.ThermalConductivity.As(UnitsNet.Units.ThermalConductivityUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ThermalConductivity.ToUnit(UnitsNet.Units.ThermalConductivityUnit)">
            <summary>
                Converts this ThermalConductivity to another ThermalConductivity with the unit representation <paramref name="unit" />.
            </summary>
            <returns>A ThermalConductivity with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ThermalConductivity.AsBaseUnit">
            <summary>
                Converts the current value + unit to the base unit.
                This is typically the first step in converting from one unit to another.
            </summary>
            <returns>The value in the base unit representation.</returns>
        </member>
        <member name="M:UnitsNet.ThermalConductivity.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.ThermalConductivity.TryParse(System.String,UnitsNet.ThermalConductivity@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ThermalConductivity.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ThermalConductivity.ParseInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.ThermalConductivity.TryParseInternal(System.String,System.IFormatProvider,UnitsNet.ThermalConductivity@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ThermalConductivity.ParseUnitInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ThermalConductivity.TryParseUnitInternal(System.String,System.IFormatProvider,UnitsNet.Units.ThermalConductivityUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ThermalConductivity.ToString">
            <summary>
                Get default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.ThermalConductivity.ToString(UnitsNet.Units.ThermalConductivityUnit)">
            <summary>
                Get string representation of value and unit. Using current UI culture and two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <returns>String representation.</returns>
        </member>
        <member name="P:UnitsNet.ThermalConductivity.MaxValue">
            <summary>
            Represents the largest possible value of ThermalConductivity
            </summary>
        </member>
        <member name="P:UnitsNet.ThermalConductivity.MinValue">
            <summary>
            Represents the smallest possible value of ThermalConductivity
            </summary>
        </member>
        <member name="P:UnitsNet.ThermalConductivity.Type">
            <summary>
                The <see cref="P:UnitsNet.ThermalConductivity.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ThermalConductivity.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.ThermalConductivity.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="T:UnitsNet.ThermalResistance">
            <summary>
                Heat Transfer Coefficient or Thermal conductivity - indicates a materials ability to conduct heat.
            </summary>
            <summary>
                Heat Transfer Coefficient or Thermal conductivity - indicates a materials ability to conduct heat.
            </summary>
        </member>
        <member name="P:UnitsNet.ThermalResistance.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.ThermalResistance.GetAbbreviation(UnitsNet.Units.ThermalResistanceUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.ThermalResistance.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.ThermalResistance.TryParse(System.String,System.IFormatProvider,UnitsNet.ThermalResistance@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ThermalResistance.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ThermalResistance.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.ThermalResistanceUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ThermalResistance.ToString(UnitsNet.Units.ThermalResistanceUnit,System.IFormatProvider)">
            <summary>
                Get string representation of value and unit. Using two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.ThermalResistance.ToString(UnitsNet.Units.ThermalResistanceUnit,System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.ThermalResistance.ToString(UnitsNet.Units.ThermalResistanceUnit,System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">Unit representation to use.</param>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
        </member>
        <member name="F:UnitsNet.ThermalResistance._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.ThermalResistance._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.ThermalResistance.Unit">
            <summary>
                The unit this quantity was constructed with -or- <see cref="P:UnitsNet.ThermalResistance.BaseUnit" /> if default ctor was used.
            </summary>
        </member>
        <member name="M:UnitsNet.ThermalResistance.#ctor(System.Double,UnitsNet.Units.ThermalResistanceUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="numericValue">The numeric value  to contruct this quantity with.</param>
            <param name="unit">The unit representation to contruct this quantity with.</param>
            <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="P:UnitsNet.ThermalResistance.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.ThermalResistance.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ThermalResistance.BaseUnit">
            <summary>
                The base unit of ThermalResistance, which is SquareMeterKelvinPerKilowatt. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.ThermalResistance.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.ThermalResistance.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ThermalResistance.Units">
            <summary>
                All units of measurement for the ThermalResistance quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ThermalResistance.HourSquareFeetDegreesFahrenheitPerBtu">
            <summary>
                Get ThermalResistance in HourSquareFeetDegreesFahrenheitPerBtu.
            </summary>
        </member>
        <member name="P:UnitsNet.ThermalResistance.SquareCentimeterHourDegreesCelsiusPerKilocalorie">
            <summary>
                Get ThermalResistance in SquareCentimeterHourDegreesCelsiusPerKilocalorie.
            </summary>
        </member>
        <member name="P:UnitsNet.ThermalResistance.SquareCentimeterKelvinsPerWatt">
            <summary>
                Get ThermalResistance in SquareCentimeterKelvinsPerWatt.
            </summary>
        </member>
        <member name="P:UnitsNet.ThermalResistance.SquareMeterDegreesCelsiusPerWatt">
            <summary>
                Get ThermalResistance in SquareMeterDegreesCelsiusPerWatt.
            </summary>
        </member>
        <member name="P:UnitsNet.ThermalResistance.SquareMeterKelvinsPerKilowatt">
            <summary>
                Get ThermalResistance in SquareMeterKelvinsPerKilowatt.
            </summary>
        </member>
        <member name="P:UnitsNet.ThermalResistance.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit SquareMeterKelvinPerKilowatt.
            </summary>
        </member>
        <member name="M:UnitsNet.ThermalResistance.FromHourSquareFeetDegreesFahrenheitPerBtu(UnitsNet.QuantityValue)">
            <summary>
                Get ThermalResistance from HourSquareFeetDegreesFahrenheitPerBtu.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ThermalResistance.FromSquareCentimeterHourDegreesCelsiusPerKilocalorie(UnitsNet.QuantityValue)">
            <summary>
                Get ThermalResistance from SquareCentimeterHourDegreesCelsiusPerKilocalorie.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ThermalResistance.FromSquareCentimeterKelvinsPerWatt(UnitsNet.QuantityValue)">
            <summary>
                Get ThermalResistance from SquareCentimeterKelvinsPerWatt.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ThermalResistance.FromSquareMeterDegreesCelsiusPerWatt(UnitsNet.QuantityValue)">
            <summary>
                Get ThermalResistance from SquareMeterDegreesCelsiusPerWatt.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ThermalResistance.FromSquareMeterKelvinsPerKilowatt(UnitsNet.QuantityValue)">
            <summary>
                Get ThermalResistance from SquareMeterKelvinsPerKilowatt.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.ThermalResistance.From(UnitsNet.QuantityValue,UnitsNet.Units.ThermalResistanceUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.ThermalResistanceUnit" /> to <see cref="T:UnitsNet.ThermalResistance" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>ThermalResistance unit value.</returns>
        </member>
        <member name="M:UnitsNet.ThermalResistance.GetAbbreviation(UnitsNet.Units.ThermalResistanceUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.ThermalResistance.Equals(UnitsNet.ThermalResistance,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another ThermalResistance within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.ThermalResistance.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current ThermalResistance.</returns>
        </member>
        <member name="M:UnitsNet.ThermalResistance.As(UnitsNet.Units.ThermalResistanceUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ThermalResistance.ToUnit(UnitsNet.Units.ThermalResistanceUnit)">
            <summary>
                Converts this ThermalResistance to another ThermalResistance with the unit representation <paramref name="unit" />.
            </summary>
            <returns>A ThermalResistance with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.ThermalResistance.AsBaseUnit">
            <summary>
                Converts the current value + unit to the base unit.
                This is typically the first step in converting from one unit to another.
            </summary>
            <returns>The value in the base unit representation.</returns>
        </member>
        <member name="M:UnitsNet.ThermalResistance.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.ThermalResistance.TryParse(System.String,UnitsNet.ThermalResistance@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ThermalResistance.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ThermalResistance.ParseInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.ThermalResistance.TryParseInternal(System.String,System.IFormatProvider,UnitsNet.ThermalResistance@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ThermalResistance.ParseUnitInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.ThermalResistance.TryParseUnitInternal(System.String,System.IFormatProvider,UnitsNet.Units.ThermalResistanceUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.ThermalResistance.ToString">
            <summary>
                Get default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.ThermalResistance.ToString(UnitsNet.Units.ThermalResistanceUnit)">
            <summary>
                Get string representation of value and unit. Using current UI culture and two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <returns>String representation.</returns>
        </member>
        <member name="P:UnitsNet.ThermalResistance.MaxValue">
            <summary>
            Represents the largest possible value of ThermalResistance
            </summary>
        </member>
        <member name="P:UnitsNet.ThermalResistance.MinValue">
            <summary>
            Represents the smallest possible value of ThermalResistance
            </summary>
        </member>
        <member name="P:UnitsNet.ThermalResistance.Type">
            <summary>
                The <see cref="P:UnitsNet.ThermalResistance.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.ThermalResistance.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.ThermalResistance.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="T:UnitsNet.VitaminA">
            <summary>
                Vitamin A: 1 IU is the biological equivalent of 0.3 Âµg retinol, or of 0.6 Âµg beta-carotene.
            </summary>
            <summary>
                Vitamin A: 1 IU is the biological equivalent of 0.3 Âµg retinol, or of 0.6 Âµg beta-carotene.
            </summary>
        </member>
        <member name="P:UnitsNet.VitaminA.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="M:UnitsNet.VitaminA.GetAbbreviation(UnitsNet.Units.VitaminAUnit,System.IFormatProvider)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <param name="provider">Format to use for localization. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.VitaminA.Parse(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.VitaminA.TryParse(System.String,System.IFormatProvider,UnitsNet.VitaminA@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.VitaminA.ParseUnit(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.VitaminA.TryParseUnit(System.String,System.IFormatProvider,UnitsNet.Units.VitaminAUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.TryParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.VitaminA.ToString(UnitsNet.Units.VitaminAUnit,System.IFormatProvider)">
            <summary>
                Get string representation of value and unit. Using two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.VitaminA.ToString(UnitsNet.Units.VitaminAUnit,System.IFormatProvider,System.Int32)">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.VitaminA.ToString(UnitsNet.Units.VitaminAUnit,System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Get string representation of value and unit.
            </summary>
            <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" /> if null.</param>
            <param name="unit">Unit representation to use.</param>
            <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
            <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
            <returns>String representation.</returns>
        </member>
        <member name="F:UnitsNet.VitaminA._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.VitaminA._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.VitaminA.Unit">
            <summary>
                The unit this quantity was constructed with -or- <see cref="P:UnitsNet.VitaminA.BaseUnit" /> if default ctor was used.
            </summary>
        </member>
        <member name="M:UnitsNet.VitaminA.#ctor(System.Double,UnitsNet.Units.VitaminAUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="numericValue">The numeric value  to contruct this quantity with.</param>
            <param name="unit">The unit representation to contruct this quantity with.</param>
            <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="P:UnitsNet.VitaminA.QuantityType">
            <summary>
                The <see cref="P:UnitsNet.VitaminA.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.VitaminA.BaseUnit">
            <summary>
                The base unit of VitaminA, which is InternationalUnit. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.VitaminA.BaseDimensions">
            <summary>
                The <see cref="P:UnitsNet.VitaminA.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.VitaminA.Units">
            <summary>
                All units of measurement for the VitaminA quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.VitaminA.InternationalUnits">
            <summary>
                Get VitaminA in InternationalUnits.
            </summary>
        </member>
        <member name="P:UnitsNet.VitaminA.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit InternationalUnit.
            </summary>
        </member>
        <member name="M:UnitsNet.VitaminA.FromInternationalUnits(UnitsNet.QuantityValue)">
            <summary>
                Get VitaminA from InternationalUnits.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.VitaminA.From(UnitsNet.QuantityValue,UnitsNet.Units.VitaminAUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.VitaminAUnit" /> to <see cref="T:UnitsNet.VitaminA" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>VitaminA unit value.</returns>
        </member>
        <member name="M:UnitsNet.VitaminA.GetAbbreviation(UnitsNet.Units.VitaminAUnit)">
            <summary>
                Get unit abbreviation string.
            </summary>
            <param name="unit">Unit to get abbreviation for.</param>
            <returns>Unit abbreviation string.</returns>
        </member>
        <member name="M:UnitsNet.VitaminA.Equals(UnitsNet.VitaminA,System.Double,UnitsNet.ComparisonType)">
            <summary>
                <para>
                Compare equality to another VitaminA within the given absolute or relative tolerance.
                </para>
                <para>
                Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
                this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
                this quantity's value to be considered equal.
                <example>
                In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Relative);
                </code>
                </example>
                </para>
                <para>
                Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
                <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
                this quantity's unit for comparison.
                <example>
                In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
                <code>
                var a = Length.FromMeters(2.0);
                var b = Length.FromInches(50.0);
                a.Equals(b, 0.01, ComparisonType.Absolute);
                </code>
                </example>
                </para>
                <para>
                Note that it is advised against specifying zero difference, due to the nature
                of floating point operations and using System.Double internally.
                </para>
            </summary>
            <param name="other">The other quantity to compare to.</param>
            <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
            <param name="comparisonType">The comparison type: either relative or absolute.</param>
            <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        </member>
        <member name="M:UnitsNet.VitaminA.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current VitaminA.</returns>
        </member>
        <member name="M:UnitsNet.VitaminA.As(UnitsNet.Units.VitaminAUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.VitaminA.ToUnit(UnitsNet.Units.VitaminAUnit)">
            <summary>
                Converts this VitaminA to another VitaminA with the unit representation <paramref name="unit" />.
            </summary>
            <returns>A VitaminA with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.VitaminA.AsBaseUnit">
            <summary>
                Converts the current value + unit to the base unit.
                This is typically the first step in converting from one unit to another.
            </summary>
            <returns>The value in the base unit representation.</returns>
        </member>
        <member name="M:UnitsNet.VitaminA.Parse(System.String)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.VitaminA.TryParse(System.String,UnitsNet.VitaminA@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.VitaminA.ParseUnit(System.String)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.VitaminA.ParseInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:System.ArgumentException">
                Expected string to have one or two pairs of quantity and unit in the format
                "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
            </exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">
                More than one unit is represented by the specified unit abbreviation.
                Example: Volume.Parse("1 cup") will throw, because it can refer to any of
                <see cref="F:UnitsNet.Units.VolumeUnit.MetricCup" />, <see cref="F:UnitsNet.Units.VolumeUnit.UsLegalCup" /> and <see cref="F:UnitsNet.Units.VolumeUnit.UsCustomaryCup" />.
            </exception>
            <exception cref="T:UnitsNet.UnitsNetException">
                If anything else goes wrong, typically due to a bug or unhandled case.
                We wrap exceptions in <see cref="T:UnitsNet.UnitsNetException" /> to allow you to distinguish
                Units.NET exceptions from other exceptions.
            </exception>
        </member>
        <member name="M:UnitsNet.VitaminA.TryParseInternal(System.String,System.IFormatProvider,UnitsNet.VitaminA@)">
            <summary>
                Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="result">Resulting unit quantity if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.Parse("5.5 m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.VitaminA.ParseUnitInternal(System.String,System.IFormatProvider)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
            <exception cref="T:System.ArgumentNullException">The value of 'str' cannot be null. </exception>
            <exception cref="T:UnitsNet.UnitsNetException">Error parsing string.</exception>
        </member>
        <member name="M:UnitsNet.VitaminA.TryParseUnitInternal(System.String,System.IFormatProvider,UnitsNet.Units.VitaminAUnit@)">
            <summary>
                Parse a unit string.
            </summary>
            <param name="str">String to parse. Typically in the form: {number} {unit}</param>
            <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="P:UnitsNet.GlobalConfiguration.DefaultCulture" />.</param>
            <param name="unit">The parsed unit if successful.</param>
            <returns>True if successful, otherwise false.</returns>
            <example>
                Length.ParseUnit("m", new CultureInfo("en-US"));
            </example>
        </member>
        <member name="M:UnitsNet.VitaminA.ToString">
            <summary>
                Get default string representation of value and unit.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:UnitsNet.VitaminA.ToString(UnitsNet.Units.VitaminAUnit)">
            <summary>
                Get string representation of value and unit. Using current UI culture and two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <returns>String representation.</returns>
        </member>
        <member name="P:UnitsNet.VitaminA.MaxValue">
            <summary>
            Represents the largest possible value of VitaminA
            </summary>
        </member>
        <member name="P:UnitsNet.VitaminA.MinValue">
            <summary>
            Represents the smallest possible value of VitaminA
            </summary>
        </member>
        <member name="P:UnitsNet.VitaminA.Type">
            <summary>
                The <see cref="P:UnitsNet.VitaminA.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.VitaminA.Dimensions">
            <summary>
                The <see cref="P:UnitsNet.VitaminA.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="T:UnitsNet.QuantityType">
            <summary>
                Lists all generated quantities with the same name as the quantity struct type,
                such as Length, Mass, Force etc.
                This is useful for populating options in the UI, such as creating a generic conversion
                tool with inputValue, quantityName, fromUnit and toUnit selectors.
            </summary>
        </member>
        <member name="F:UnitsNet.Units.BrakeSpecificFuelConsumptionUnit.PoundPerMechanicalHorsepowerHour">
            <summary>
                The pound per horse power hour uses mechanical horse power and the imperial pound
            </summary>
        </member>
        <member name="F:UnitsNet.Units.MassUnit.LongHundredweight">
            <summary>
                The long or imperial hundredweight (abbreviation cwt) is a unit of mass equal to 112 pounds in US and Canada.
            </summary>
            <remarks>https://en.wikipedia.org/wiki/Hundredweight</remarks>
        </member>
        <member name="F:UnitsNet.Units.MassUnit.LongTon">
            <summary>
                Long ton (weight ton or Imperial ton) is a unit of mass equal to 2,240 pounds (1,016 kg) and is the name for the unit called the "ton" in the avoirdupois or Imperial system of measurements that was used in the United Kingdom and several other Commonwealth countries before metrication.
            </summary>
            <remarks>http://en.wikipedia.org/wiki/Long_ton</remarks>
        </member>
        <member name="F:UnitsNet.Units.MassUnit.Ounce">
            <summary>
                An ounce (abbreviated oz) is usually the international avoirdupois ounce as used in the United States customary and British imperial systems, which is equal to one-sixteenth of a pound or approximately 28 grams. The abbreviation 'oz' derives from the Italian word onza (now spelled oncia).
            </summary>
            <remarks>http://en.wikipedia.org/wiki/Ounce</remarks>
        </member>
        <member name="F:UnitsNet.Units.MassUnit.Pound">
            <summary>
                The pound or pound-mass (abbreviations: lb, lbm) is a unit of mass used in the imperial, United States customary and other systems of measurement. A number of different definitions have been used, the most common today being the international avoirdupois pound which is legally defined as exactly 0.45359237 kilograms, and which is divided into 16 avoirdupois ounces.
            </summary>
        </member>
        <member name="F:UnitsNet.Units.MassUnit.ShortHundredweight">
            <summary>
                The short hundredweight (abbreviation cwt) is a unit of mass equal to 100 pounds in US and Canada. In British English, the short hundredweight is referred to as the "cental".
            </summary>
            <remarks>https://en.wikipedia.org/wiki/Hundredweight</remarks>
        </member>
        <member name="F:UnitsNet.Units.MassUnit.ShortTon">
            <summary>
                The short ton is a unit of mass equal to 2,000 pounds (907.18474 kg), that is most commonly used in the United States â€“ known there simply as the ton.
            </summary>
            <remarks>http://en.wikipedia.org/wiki/Short_ton</remarks>
        </member>
        <member name="F:UnitsNet.Units.MassUnit.Slug">
            <summary>
                The slug (abbreviation slug) is a unit of mass that is accelerated by 1 ft/sÂ² when a force of one pound (lbf) is exerted on it.
            </summary>
            <remarks>http://en.wikipedia.org/wiki/Slug_(unit)</remarks>
        </member>
        <member name="F:UnitsNet.Units.MassUnit.Stone">
            <summary>
                The stone (abbreviation st) is a unit of mass equal to 14 pounds avoirdupois (about 6.35 kilograms) used in Great Britain and Ireland for measuring human body weight.
            </summary>
            <remarks>http://en.wikipedia.org/wiki/Stone_(unit)</remarks>
        </member>
        <member name="T:UnitsNet.InternalHelpers.Guard">
            <summary>
                Guard methods to ensure parameter values satisfy pre-conditions and use a consistent exception message.
            </summary>
        </member>
        <member name="M:UnitsNet.InternalHelpers.Guard.EnsureValidNumber(System.Double,System.String)">
            <summary>
                Throws <see cref="T:System.ArgumentException" /> if value is <see cref="F:System.Double.NaN" />,
                <see cref="F:System.Double.PositiveInfinity" /> or <see cref="F:System.Double.NegativeInfinity" />.
            </summary>
            <param name="value">The value to check.</param>
            <param name="paramName">Name of parameter in calling method.</param>
            <returns>The given <paramref name="value" /> if valid.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="value" /> is invalid.</exception>
        </member>
        <member name="T:UnitsNet.IQuantity">
            <summary>
                Represents a quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.IQuantity.Type">
            <summary>
                The <see cref="T:UnitsNet.QuantityType" /> of this quantity.
            </summary>
        </member>
        <member name="P:UnitsNet.IQuantity.Dimensions">
            <summary>
                The <see cref="T:UnitsNet.BaseDimensions" /> of this quantity.
            </summary>
        </member>
        <member name="M:UnitsNet.IQuantity`1.As(`0)">
            <summary>
                Convert to the unit representation <typeparamref name="UnitType"/>.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.IQuantity`1.ToString(`0)">
            <summary>
                Get string representation of value and unit. Using current UI culture and two significant digits after radix.
            </summary>
            <param name="unit">Unit representation to use.</param>
            <returns>String representation.</returns>
        </member>
        <member name="T:UnitsNet.QuantityNotFoundException">
            <summary>
                Quantity type was not found. This is typically thrown for dynamic conversions,
                such as <see cref="M:UnitsNet.UnitConverter.ConvertByName(UnitsNet.QuantityValue,System.String,System.String,System.String)" />.
            </summary>
        </member>
        <member name="T:UnitsNet.QuantityValue">
            <summary>
                A type that supports implicit cast from all .NET numeric types, in order to avoid a large number of overloads
                and binary size for all From(value, unit) factory methods, for each of the 700+ units in the library.
                <see cref="T:UnitsNet.QuantityValue"/> stores the value internally with the proper type to preserve the range or precision of the original value:
            <list type="bullet">
            <item><description><see cref="T:System.Double"/> for [byte, short, int, long, float, double]</description></item>
            <item><description><see cref="T:System.Decimal"/> for [decimal] to preserve the 128-bit precision</description></item>
            </list>
            </summary>
            <remarks>
                At the time of this writing, this reduces the number of From(value, unit) overloads to 1/4th:
                From 8 (int, long, double, decimal + each nullable) down to 2 (QuantityValue and QuantityValue?).
                This also adds more numeric types with no extra overhead, such as float, short and byte.
            </remarks>
        </member>
        <member name="F:UnitsNet.QuantityValue._value">
            <summary>
                Value assigned when implicitly casting from all numeric types except <see cref="T:System.Decimal" />, since
                <see cref="T:System.Double" /> has the greatest range and is 64 bits versus 128 bits for <see cref="T:System.Decimal"/>.
            </summary>
        </member>
        <member name="F:UnitsNet.QuantityValue._valueDecimal">
            <summary>
                Value assigned when implicitly casting from <see cref="T:System.Decimal" /> type, since it has a greater precision than
                <see cref="T:System.Double"/> and we want to preserve that when constructing quantities that use <see cref="T:System.Decimal"/>
                as their value type.
            </summary>
        </member>
        <member name="T:UnitsNet.UnitConverter">
            <summary>
                Convert between units of a quantity, such as converting from meters to centimeters of a given length.
            </summary>
        </member>
        <member name="M:UnitsNet.UnitConverter.ConvertByName(UnitsNet.QuantityValue,System.String,System.String,System.String)">
            <summary>
                Convert between any two quantity units by their names, such as converting a "Length" of N "Meter" to "Centimeter".
                This is particularly useful for creating things like a generated unit conversion UI,
                where you list some selectors:
                a) Quantity: Length, Mass, Force etc.
                b) From unit: Meter, Centimeter etc if Length is selected
                c) To unit: Meter, Centimeter etc if Length is selected
            </summary>
            <param name="fromValue">
                Input value, which together with <paramref name="fromUnit" /> represents the quantity to
                convert from.
            </param>
            <param name="quantityName">
                Name of quantity, such as "Length" and "Mass". <see cref="T:UnitsNet.QuantityType" /> for all
                values.
            </param>
            <param name="fromUnit">
                Name of unit, such as "Meter" or "Centimeter" if "Length" was passed as
                <paramref name="quantityName" />.
            </param>
            <param name="toUnit">
                Name of unit, such as "Meter" or "Centimeter" if "Length" was passed as
                <paramref name="quantityName" />.
            </param>
            <example>double centimeters = ConvertByName(5, "Length", "Meter", "Centimeter"); // 500</example>
            <returns>Output value as the result of converting to <paramref name="toUnit" />.</returns>
            <exception cref="T:UnitsNet.QuantityNotFoundException">No quantities were found that match <paramref name="quantityName" />.</exception>
            <exception cref="T:UnitsNet.UnitNotFoundException">No units match the abbreviation.</exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">More than one unit matches the abbrevation.</exception>
        </member>
        <member name="M:UnitsNet.UnitConverter.TryConvertByName(UnitsNet.QuantityValue,System.String,System.String,System.String,System.Double@)">
            <summary>
                Convert between any two quantity units by their names, such as converting a "Length" of N "Meter" to "Centimeter".
                This is particularly useful for creating things like a generated unit conversion UI,
                where you list some selectors:
                a) Quantity: Length, Mass, Force etc.
                b) From unit: Meter, Centimeter etc if Length is selected
                c) To unit: Meter, Centimeter etc if Length is selected
            </summary>
            <param name="inputValue">
                Input value, which together with <paramref name="fromUnit" /> represents the quantity to
                convert from.
            </param>
            <param name="quantityName">
                Name of quantity, such as "Length" and "Mass". <see cref="T:UnitsNet.QuantityType" /> for all
                values.
            </param>
            <param name="fromUnit">
                Name of unit, such as "Meter" or "Centimeter" if "Length" was passed as
                <paramref name="quantityName" />.
            </param>
            <param name="toUnit">
                Name of unit, such as "Meter" or "Centimeter" if "Length" was passed as
                <paramref name="quantityName" />.
            </param>
            <param name="result">Result if conversion was successful, 0 if not.</param>
            <example>bool ok = TryConvertByName(5, "Length", "Meter", "Centimeter", out double centimeters); // 500</example>
            <returns>True if conversion was successful.</returns>
        </member>
        <member name="M:UnitsNet.UnitConverter.ConvertByAbbreviation(UnitsNet.QuantityValue,System.String,System.String,System.String)">
            <summary>
                Convert between any two quantity units by their abbreviations, such as converting a "Length" of N "m" to "cm".
                This is particularly useful for creating things like a generated unit conversion UI,
                where you list some selectors:
                a) Quantity: Length, Mass, Force etc.
                b) From unit: Meter, Centimeter etc if Length is selected
                c) To unit: Meter, Centimeter etc if Length is selected
            </summary>
            <param name="fromValue">
                Input value, which together with <paramref name="fromUnitAbbrev" /> represents the quantity to
                convert from.
            </param>
            <param name="quantityName">
                Name of quantity, such as "Length" and "Mass". <see cref="T:UnitsNet.QuantityType" /> for all
                values.
            </param>
            <param name="fromUnitAbbrev">
                Name of unit, such as "Meter" or "Centimeter" if "Length" was passed as
                <paramref name="quantityName" />.
            </param>
            <param name="toUnitAbbrev">
                Name of unit, such as "Meter" or "Centimeter" if "Length" was passed as
                <paramref name="quantityName" />.
            </param>
            <example>double centimeters = ConvertByName(5, "Length", "m", "cm"); // 500</example>
            <returns>Output value as the result of converting to <paramref name="toUnitAbbrev" />.</returns>
        </member>
        <member name="M:UnitsNet.UnitConverter.ConvertByAbbreviation(UnitsNet.QuantityValue,System.String,System.String,System.String,System.String)">
            <summary>
                Convert between any two quantity units by their abbreviations, such as converting a "Length" of N "m" to "cm".
                This is particularly useful for creating things like a generated unit conversion UI,
                where you list some selectors:
                a) Quantity: Length, Mass, Force etc.
                b) From unit: Meter, Centimeter etc if Length is selected
                c) To unit: Meter, Centimeter etc if Length is selected
            </summary>
            <param name="fromValue">
                Input value, which together with <paramref name="fromUnitAbbrev" /> represents the quantity to
                convert from.
            </param>
            <param name="quantityName">
                Name of quantity, such as "Length" and "Mass". <see cref="T:UnitsNet.QuantityType" /> for all
                values.
            </param>
            <param name="fromUnitAbbrev">
                Name of unit, such as "Meter" or "Centimeter" if "Length" was passed as
                <paramref name="quantityName" />.
            </param>
            <param name="toUnitAbbrev">
                Name of unit, such as "Meter" or "Centimeter" if "Length" was passed as
                <paramref name="quantityName" />.
            </param>
            <param name="culture">Culture to parse abbreviations with.</param>
            <example>double centimeters = ConvertByName(5, "Length", "m", "cm"); // 500</example>
            <returns>Output value as the result of converting to <paramref name="toUnitAbbrev" />.</returns>
            <exception cref="T:UnitsNet.QuantityNotFoundException">No quantity types match the <paramref name="quantityName"/>.</exception>
            <exception cref="T:UnitsNet.UnitNotFoundException">No unit types match the prefix of <paramref name="quantityName"/> or no units are mapped to the abbreviation.</exception>
            <exception cref="T:UnitsNet.AmbiguousUnitParseException">More than one unit matches the abbrevation.</exception>
        </member>
        <member name="M:UnitsNet.UnitConverter.TryConvertByAbbreviation(UnitsNet.QuantityValue,System.String,System.String,System.String,System.Double@)">
            <summary>
                Convert between any two quantity units by their abbreviations, such as converting a "Length" of N "m" to "cm".
                This is particularly useful for creating things like a generated unit conversion UI,
                where you list some selectors:
                a) Quantity: Length, Mass, Force etc.
                b) From unit: Meter, Centimeter etc if Length is selected
                c) To unit: Meter, Centimeter etc if Length is selected
            </summary>
            <param name="fromValue">
                Input value, which together with <paramref name="fromUnitAbbrev" /> represents the quantity to
                convert from.
            </param>
            <param name="quantityName">
                Name of quantity, such as "Length" and "Mass". <see cref="T:UnitsNet.QuantityType" /> for all
                values.
            </param>
            <param name="fromUnitAbbrev">
                Name of unit, such as "Meter" or "Centimeter" if "Length" was passed as
                <paramref name="quantityName" />.
            </param>
            <param name="toUnitAbbrev">
                Name of unit, such as "Meter" or "Centimeter" if "Length" was passed as
                <paramref name="quantityName" />.
            </param>
            <param name="result">Result if conversion was successful, 0 if not.</param>
            <example>double centimeters = ConvertByName(5, "Length", "m", "cm"); // 500</example>
            <returns>True if conversion was successful.</returns>
        </member>
        <member name="M:UnitsNet.UnitConverter.TryConvertByAbbreviation(UnitsNet.QuantityValue,System.String,System.String,System.String,System.Double@,System.String)">
            <summary>
                Convert between any two quantity units by their abbreviations, such as converting a "Length" of N "m" to "cm".
                This is particularly useful for creating things like a generated unit conversion UI,
                where you list some selectors:
                a) Quantity: Length, Mass, Force etc.
                b) From unit: Meter, Centimeter etc if Length is selected
                c) To unit: Meter, Centimeter etc if Length is selected
            </summary>
            <param name="fromValue">
                Input value, which together with <paramref name="fromUnitAbbrev" /> represents the quantity to
                convert from.
            </param>
            <param name="quantityName">
                Name of quantity, such as "Length" and "Mass". <see cref="T:UnitsNet.QuantityType" /> for all
                values.
            </param>
            <param name="fromUnitAbbrev">
                Name of unit, such as "Meter" or "Centimeter" if "Length" was passed as
                <paramref name="quantityName" />.
            </param>
            <param name="toUnitAbbrev">
                Name of unit, such as "Meter" or "Centimeter" if "Length" was passed as
                <paramref name="quantityName" />.
            </param>
            <param name="culture">Culture to parse abbreviations with.</param>
            <param name="result">Result if conversion was successful, 0 if not.</param>
            <example>double centimeters = ConvertByName(5, "Length", "m", "cm"); // 500</example>
            <returns>True if conversion was successful.</returns>
        </member>
        <member name="M:UnitsNet.UnitConverter.TryParseUnit(System.Type,System.String,System.Object@)">
            <summary>
                Parse a unit by the unit enum type <paramref name="unitType" /> and a unit enum value <paramref name="unitName" />>
            </summary>
            <param name="unitType">Unit type, such as <see cref="T:UnitsNet.Units.LengthUnit" />.</param>
            <param name="unitName">Unit name, such as "Meter" corresponding to <see cref="F:UnitsNet.Units.LengthUnit.Meter" />.</param>
            <param name="unitValue">The return enum value, such as <see cref="F:UnitsNet.Units.LengthUnit.Meter" /> boxed as an object.</param>
            <returns>True if succeeded, otherwise false.</returns>
            <exception cref="T:UnitsNet.UnitNotFoundException">No unit values match the <paramref name="unitName" />.</exception>
        </member>
        <member name="T:UnitsNet.UnitFormatter">
            <summary>
                Utility class for formatting units and values.
            </summary>
        </member>
        <member name="M:UnitsNet.UnitFormatter.GetFormat(System.Double,System.Int32)">
            <summary>
                Gets the default ToString format for the specified value.
            </summary>
            <param name="value">The value to format.</param>
            <param name="significantDigitsAfterRadix">
                The number of digits after the radix point to display in the formatted
                string.
            </param>
            <returns>A ToString format for the specified value.</returns>
        </member>
        <member name="M:UnitsNet.UnitFormatter.GetFormatArgs``1(``0,System.Double,System.IFormatProvider,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
                Gets ToString format arguments.
            </summary>
            <typeparam name="TUnitType">The type of units to format.</typeparam>
            <param name="unit">The units</param>
            <param name="value">The unit value to format.</param>
            <param name="culture">The current culture.</param>
            <param name="args">The list of format arguments.</param>
            <returns>An array of ToString format arguments.</returns>
        </member>
        <member name="T:UnitsNet.UnitNotFoundException">
            <summary>
                Unit was not found. This is typically thrown for dynamic conversions,
                such as <see cref="M:UnitsNet.UnitConverter.ConvertByName(UnitsNet.QuantityValue,System.String,System.String,System.String)" />.
            </summary>
        </member>
    </members>
</doc>
